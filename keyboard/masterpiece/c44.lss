
c44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00004612  000046c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004612  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e6  00800116  00800116  000046dc  2**0
                  ALLOC
  3 .noinit       00000004  008001fc  008001fc  000046dc  2**0
                  ALLOC
  4 .eeprom       00000001  00810000  00810000  000046dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         00000024  00000000  00000000  000046e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000007e  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000b38  00000000  00000000  00004782  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001aa5  00000000  00000000  000052ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d181  00000000  00000000  00006d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000375a  00000000  00000000  00013ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000092f9  00000000  00000000  0001763a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000011d0  00000000  00000000  00020934  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000043aa  00000000  00000000  00021b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b0c  00000000  00000000  00025eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  0002a9ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
       0:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__ctors_end>
  // TWEN  - twi enable
  // TWEA  - enable address acknowledgement
  // TWINT - twi interrupt flag
  // TWIE  - enable the twi interrupt
  TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
}
       4:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_1>
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
  _delay_us(80);
}

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
       8:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
	rgblight_config.hue = 200;
	rgblight_config.sat = 204;
	rgblight_config.val = 204;
	eeconfig_write_rgblight(rgblight_config.raw);
}
void eeconfig_debug_rgblight(void) {
       c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
      10:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>

__attribute__ ((weak)) void matrix_setup(void) {}
void keyboard_setup(void)
{
    matrix_setup();
}
      14:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}

void debug_action(action_t action)
{
      18:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
      1c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
    }
}


/* modifier */
uint8_t get_mods(void) { return real_mods; }
      20:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
      24:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
      28:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__vector_10>
 */
#define BOOTLOADER_RESET_KEY 0xB007B007
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
      2c:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__vector_11>
bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
      30:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__vector_12>
    Endpoint_SelectEndpoint(ep);
    return -1;
}
#else
int8_t sendchar(uint8_t c)
{
      34:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
      38:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
      3c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      40:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      44:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      48:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      4c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      50:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      54:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__vector_21>
      58:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      5c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      60:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      64:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      68:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      6c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      70:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      74:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      78:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      7c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      80:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_32>
      84:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      88:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      8c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      90:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__vector_36>
      94:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      98:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      9c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      a0:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      a4:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>
      a8:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__bad_interrupt>

000000ac <keymaps>:
      ac:	29 00 14 00 1a 00 08 00 15 00 17 00 2b 00 04 00     )...........+...
      bc:	16 00 07 00 09 00 0a 00 e1 00 1d 00 1b 00 06 00     ................
      cc:	19 00 05 00 e0 00 e0 00 e3 00 e2 00 c9 00 2c 00     ..............,.
      dc:	1c 00 18 00 0c 00 12 00 13 00 2a 00 0b 00 0d 00     ..........*.....
      ec:	0e 00 0f 00 33 00 34 00 11 00 10 00 36 00 37 00     ....3.4.....6.7.
      fc:	38 00 28 00 2c 00 c8 00 50 00 51 00 52 00 4f 00     8.(.,...P.Q.R.O.
     10c:	35 00 1e 00 1f 00 20 00 21 00 22 00 01 00 3a 00     5..... .!."...:.
     11c:	3b 00 3c 00 3d 00 3e 00 01 00 40 00 41 00 42 00     ;.<.=.>...@.A.B.
     12c:	43 00 44 00 01 00 01 00 01 00 01 00 01 00 01 00     C.D.............
     13c:	23 00 24 00 25 00 26 00 27 00 4c 00 3f 00 2f 00     #.$.%.&.'.L.?./.
     14c:	30 00 2d 00 2e 00 31 00 45 00 01 00 01 00 01 00     0.-...1.E.......
     15c:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................
     16c:	35 02 1e 02 1f 02 20 02 21 02 22 02 01 00 01 00     5..... .!.".....
     17c:	01 00 01 00 01 00 01 00 c0 00 c1 00 c2 00 c3 00     ................
     18c:	c4 00 c5 00 c6 00 c7 00 01 00 01 00 01 00 01 00     ................
     19c:	23 02 24 02 25 02 26 02 27 02 01 00 01 00 2f 02     #.$.%.&.'...../.
     1ac:	30 02 2d 02 2e 02 31 02 01 00 3a 00 3b 00 3c 00     0.-...1...:.;.<.
     1bc:	3d 00 3e 00 01 00 01 00 01 00 01 00 01 00 01 00     =.>.............

000001cc <fn_actions>:
     1cc:	00 f0 01 f0 02 f0 03 f0 04 f0 05 f0 06 f0 07 f0     ................
     1dc:	f1 a1 f1 a2                                         ....

000001e0 <DIM_CURVE>:
     1e0:	00 01 01 02 02 02 02 02 02 03 03 03 03 03 03 03     ................
     1f0:	03 03 03 03 03 03 03 04 04 04 04 04 04 04 04 04     ................
     200:	04 04 04 05 05 05 05 05 05 05 05 05 05 06 06 06     ................
     210:	06 06 06 06 06 07 07 07 07 07 07 07 08 08 08 08     ................
     220:	08 08 09 09 09 09 09 09 0a 0a 0a 0a 0a 0b 0b 0b     ................
     230:	0b 0b 0c 0c 0c 0c 0c 0d 0d 0d 0d 0e 0e 0e 0e 0f     ................
     240:	0f 0f 10 10 10 10 11 11 11 12 12 12 13 13 13 14     ................
     250:	14 14 15 15 16 16 16 17 17 18 18 19 19 19 1a 1a     ................
     260:	1b 1b 1c 1c 1d 1d 1e 1e 1f 20 20 21 21 22 23 23     .........  !!"##
     270:	24 24 25 26 26 27 28 28 29 2a 2b 2b 2c 2d 2e 2f     $$%&&'(()*++,-./
     280:	30 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e     00123456789:;<=>
     290:	3f 40 41 42 44 45 46 47 49 4a 4b 4c 4e 4f 51 52     ?@ABDEFGIJKLNOQR
     2a0:	53 55 56 58 5a 5b 5d 5e 60 62 63 65 67 69 6b 6d     SUVXZ[]^`bcegikm
     2b0:	6e 70 72 74 76 79 7b 7d 7f 81 84 86 88 8b 8d 90     nprtvy{}........
     2c0:	92 95 97 9a 9d 9f a2 a5 a8 ab ae b1 b4 b7 ba be     ................
     2d0:	c1 c4 c8 cb cf d3 d6 da de e2 e6 ea ee f2 f8 ff     ................

000002e0 <RGBLED_BREATHING_TABLE>:
     2e0:	00 00 00 00 01 01 01 02 02 03 04 05 05 06 07 09     ................
     2f0:	0a 0b 0c 0e 0f 11 12 14 15 17 19 1b 1d 1f 21 23     ..............!#
     300:	25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c     %(*,/1469;>ACFIL
     310:	4f 52 55 58 5a 5d 61 64 67 6a 6d 70 73 76 79 7c     ORUXZ]adgjmpsvy|
     320:	7f 83 86 89 8c 8f 92 95 98 9b 9e a2 a5 a7 aa ad     ................
     330:	b0 b3 b6 b9 bc be c1 c4 c6 c9 cb ce d0 d3 d5 d7     ................
     340:	da dc de e0 e2 e4 e6 e8 ea eb ed ee f0 f1 f3 f4     ................
     350:	f5 f6 f8 f9 fa fa fb fc fd fd fe fe fe ff ff ff     ................
     360:	ff ff ff ff fe fe fe fd fd fc fb fa fa f9 f8 f6     ................
     370:	f5 f4 f3 f1 f0 ee ed eb ea e8 e6 e4 e2 e0 de dc     ................
     380:	da d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3     ................
     390:	b0 ad aa a7 a5 a2 9e 9b 98 95 92 8f 8c 89 86 83     ................
     3a0:	80 7c 79 76 73 70 6d 6a 67 64 61 5d 5a 58 55 52     .|yvspmjgda]ZXUR
     3b0:	4f 4c 49 46 43 41 3e 3b 39 36 34 31 2f 2c 2a 28     OLIFCA>;9641/,*(
     3c0:	25 23 21 1f 1d 1b 19 17 15 14 12 11 0f 0e 0c 0b     %#!.............
     3d0:	0a 09 07 06 05 05 04 03 02 02 01 01 01 00 00 00     ................

000003e0 <RGBLED_BREATHING_INTERVALS>:
     3e0:	1e 14 0a 05                                         ....

000003e4 <RGBLED_RAINBOW_MOOD_INTERVALS>:
     3e4:	78 3c 1e                                            x<.

000003e7 <RGBLED_RAINBOW_SWIRL_INTERVALS>:
     3e7:	64 32 14                                            d2.

000003ea <RGBLED_SNAKE_INTERVALS>:
     3ea:	64 32 14                                            d2.

000003ed <RGBLED_KNIGHT_INTERVALS>:
     3ed:	64 32 14                                            d2.

000003f0 <KeyboardReport>:
     3f0:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     400:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     410:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     420:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000042f <MouseReport>:
     42f:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     43f:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     44f:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     45f:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     46f:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000047c <ExtrakeyReport>:
     47c:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     48c:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     49c:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     4ac:	10 95 01 81 00 c0                                   ......

000004b2 <DeviceDescriptor>:
     4b2:	12 01 10 01 00 00 00 08 ed fe 44 44 01 00 01 02     ..........DD....
     4c2:	00 01                                               ..

000004c4 <ConfigurationDescriptor>:
     4c4:	09 02 54 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..T.....2.......
     4d4:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     4e4:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     4f4:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     504:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     514:	03 08 00 0a                                         ....

00000518 <LanguageString>:
     518:	04 03 09 04                                         ....

0000051c <ManufacturerString>:
     51c:	08 03 4d 00 61 00 78 00 00 00                       ..M.a.x...

00000526 <ProductString>:
     526:	22 03 52 00 47 00 42 00 20 00 53 00 70 00 6c 00     ".R.G.B. .S.p.l.
     536:	69 00 74 00 20 00 50 00 6c 00 61 00 6e 00 63 00     i.t. .P.l.a.n.c.
     546:	6b 00 00 00                                         k...

0000054a <__ctors_end>:
     54a:	11 24       	eor	r1, r1
     54c:	1f be       	out	0x3f, r1	; 63
     54e:	cf ef       	ldi	r28, 0xFF	; 255
     550:	da e0       	ldi	r29, 0x0A	; 10
     552:	de bf       	out	0x3e, r29	; 62
     554:	cd bf       	out	0x3d, r28	; 61

00000556 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     556:	04 b6       	in	r0, 0x34	; 52
     558:	03 fe       	sbrs	r0, 3
     55a:	24 c0       	rjmp	.+72     	; 0x5a4 <__do_copy_data>
     55c:	80 91 fc 01 	lds	r24, 0x01FC
     560:	90 91 fd 01 	lds	r25, 0x01FD
     564:	a0 91 fe 01 	lds	r26, 0x01FE
     568:	b0 91 ff 01 	lds	r27, 0x01FF
     56c:	87 50       	subi	r24, 0x07	; 7
     56e:	90 4b       	sbci	r25, 0xB0	; 176
     570:	a7 40       	sbci	r26, 0x07	; 7
     572:	b0 4b       	sbci	r27, 0xB0	; 176
     574:	b9 f4       	brne	.+46     	; 0x5a4 <__do_copy_data>
        reset_key = 0;
     576:	10 92 fc 01 	sts	0x01FC, r1
     57a:	10 92 fd 01 	sts	0x01FD, r1
     57e:	10 92 fe 01 	sts	0x01FE, r1
     582:	10 92 ff 01 	sts	0x01FF, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     586:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     588:	84 b7       	in	r24, 0x34	; 52
     58a:	87 7f       	andi	r24, 0xF7	; 247
     58c:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     58e:	88 e1       	ldi	r24, 0x18	; 24
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	80 93 60 00 	sts	0x0060, r24
     598:	10 92 60 00 	sts	0x0060, r1
     59c:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     59e:	e0 e0       	ldi	r30, 0x00	; 0
     5a0:	f8 e3       	ldi	r31, 0x38	; 56
     5a2:	09 95       	icall

000005a4 <__do_copy_data>:
     5a4:	11 e0       	ldi	r17, 0x01	; 1
     5a6:	a0 e0       	ldi	r26, 0x00	; 0
     5a8:	b1 e0       	ldi	r27, 0x01	; 1
     5aa:	e2 e1       	ldi	r30, 0x12	; 18
     5ac:	f6 e4       	ldi	r31, 0x46	; 70
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <.do_copy_data_start>

000005b0 <.do_copy_data_loop>:
     5b0:	05 90       	lpm	r0, Z+
     5b2:	0d 92       	st	X+, r0

000005b4 <.do_copy_data_start>:
     5b4:	a6 31       	cpi	r26, 0x16	; 22
     5b6:	b1 07       	cpc	r27, r17
     5b8:	d9 f7       	brne	.-10     	; 0x5b0 <.do_copy_data_loop>

000005ba <__do_clear_bss>:
     5ba:	11 e0       	ldi	r17, 0x01	; 1
     5bc:	a6 e1       	ldi	r26, 0x16	; 22
     5be:	b1 e0       	ldi	r27, 0x01	; 1
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <.do_clear_bss_start>

000005c2 <.do_clear_bss_loop>:
     5c2:	1d 92       	st	X+, r1

000005c4 <.do_clear_bss_start>:
     5c4:	ac 3f       	cpi	r26, 0xFC	; 252
     5c6:	b1 07       	cpc	r27, r17
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <.do_clear_bss_loop>
     5ca:	0e 94 c9 06 	call	0xd92	; 0xd92 <main>
     5ce:	0c 94 07 23 	jmp	0x460e	; 0x460e <_exit>

000005d2 <__bad_interrupt>:
     5d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005d6 <action_function>:
        break;
      }
    return MACRO_NONE;
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt) {
     5d6:	fc 01       	movw	r30, r24
  switch (id) {
     5d8:	63 30       	cpi	r22, 0x03	; 3
     5da:	d9 f0       	breq	.+54     	; 0x612 <action_function+0x3c>
     5dc:	64 30       	cpi	r22, 0x04	; 4
     5de:	30 f4       	brcc	.+12     	; 0x5ec <action_function+0x16>
     5e0:	61 30       	cpi	r22, 0x01	; 1
     5e2:	a9 f1       	breq	.+106    	; 0x64e <action_function+0x78>
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	62 30       	cpi	r22, 0x02	; 2
     5e8:	78 f4       	brcc	.+30     	; 0x608 <action_function+0x32>
     5ea:	09 c0       	rjmp	.+18     	; 0x5fe <action_function+0x28>
     5ec:	65 30       	cpi	r22, 0x05	; 5
     5ee:	e9 f0       	breq	.+58     	; 0x62a <action_function+0x54>
     5f0:	65 30       	cpi	r22, 0x05	; 5
     5f2:	a8 f0       	brcs	.+42     	; 0x61e <action_function+0x48>
     5f4:	66 30       	cpi	r22, 0x06	; 6
     5f6:	f9 f0       	breq	.+62     	; 0x636 <action_function+0x60>
     5f8:	67 30       	cpi	r22, 0x07	; 7
     5fa:	71 f5       	brne	.+92     	; 0x658 <action_function+0x82>
     5fc:	22 c0       	rjmp	.+68     	; 0x642 <action_function+0x6c>
    case RGBLED_TOGGLE:
      //led operations
      if (record->event.pressed) {
     5fe:	88 23       	and	r24, r24
     600:	59 f1       	breq	.+86     	; 0x658 <action_function+0x82>
        rgblight_toggle();
     602:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <rgblight_toggle>
     606:	08 95       	ret
      }

      break;
    case RGBLED_INCREASE_HUE:
      if (record->event.pressed) {
     608:	88 23       	and	r24, r24
     60a:	31 f1       	breq	.+76     	; 0x658 <action_function+0x82>
        rgblight_increase_hue();
     60c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <rgblight_increase_hue>
     610:	08 95       	ret
      }
      break;
    case RGBLED_DECREASE_HUE:
      if (record->event.pressed) {
     612:	82 81       	ldd	r24, Z+2	; 0x02
     614:	88 23       	and	r24, r24
     616:	01 f1       	breq	.+64     	; 0x658 <action_function+0x82>
        rgblight_decrease_hue();
     618:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <rgblight_decrease_hue>
     61c:	08 95       	ret
      }
      break;
    case RGBLED_INCREASE_SAT:
      if (record->event.pressed) {
     61e:	82 81       	ldd	r24, Z+2	; 0x02
     620:	88 23       	and	r24, r24
     622:	d1 f0       	breq	.+52     	; 0x658 <action_function+0x82>
        rgblight_increase_sat();
     624:	0e 94 bb 0b 	call	0x1776	; 0x1776 <rgblight_increase_sat>
     628:	08 95       	ret
      }
      break;
    case RGBLED_DECREASE_SAT:
      if (record->event.pressed) {
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	88 23       	and	r24, r24
     62e:	a1 f0       	breq	.+40     	; 0x658 <action_function+0x82>
        rgblight_decrease_sat();
     630:	0e 94 a0 0b 	call	0x1740	; 0x1740 <rgblight_decrease_sat>
     634:	08 95       	ret
      }
      break;
      case RGBLED_INCREASE_VAL:
        if (record->event.pressed) {
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	88 23       	and	r24, r24
     63a:	71 f0       	breq	.+28     	; 0x658 <action_function+0x82>
          rgblight_increase_val();
     63c:	0e 94 84 0b 	call	0x1708	; 0x1708 <rgblight_increase_val>
     640:	08 95       	ret
        }
        break;
      case RGBLED_DECREASE_VAL:
        if (record->event.pressed) {
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	88 23       	and	r24, r24
     646:	41 f0       	breq	.+16     	; 0x658 <action_function+0x82>
          rgblight_decrease_val();
     648:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <rgblight_decrease_val>
     64c:	08 95       	ret
        }
        break;
      case RGBLED_STEP_MODE:
        if (record->event.pressed) {
     64e:	82 81       	ldd	r24, Z+2	; 0x02
     650:	88 23       	and	r24, r24
     652:	11 f0       	breq	.+4      	; 0x658 <action_function+0x82>
          rgblight_step();
     654:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <rgblight_step>
     658:	08 95       	ret

0000065a <action_get_macro>:
  [8] ACTION_LAYER_MOMENTARY(1),
  [9] ACTION_LAYER_MOMENTARY(2),
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
     65a:	fc 01       	movw	r30, r24
  // MACRODOWN only works in this function
      switch(id) {
     65c:	66 23       	and	r22, r22
     65e:	51 f4       	brne	.+20     	; 0x674 <action_get_macro+0x1a>
        case 0:
          if (record->event.pressed) {
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	88 23       	and	r24, r24
     664:	21 f0       	breq	.+8      	; 0x66e <action_get_macro+0x14>
            register_code(KC_RSFT);
     666:	85 ee       	ldi	r24, 0xE5	; 229
     668:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <register_code>
     66c:	03 c0       	rjmp	.+6      	; 0x674 <action_get_macro+0x1a>
            #ifdef BACKLIGHT_ENABLE
              backlight_step();
            #endif
          } else {
            unregister_code(KC_RSFT);
     66e:	85 ee       	ldi	r24, 0xE5	; 229
     670:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <unregister_code>
          }
        break;
      }
    return MACRO_NONE;
};
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	08 95       	ret

0000067a <keymap_key_to_keycode>:

/* translates key to keycode */
uint16_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
	// Read entire word (16bits)
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
     67a:	e6 2f       	mov	r30, r22
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	ee 0f       	add	r30, r30
     680:	ff 1f       	adc	r31, r31
     682:	9c e0       	ldi	r25, 0x0C	; 12
     684:	79 9f       	mul	r23, r25
     686:	90 01       	movw	r18, r0
     688:	11 24       	eor	r1, r1
     68a:	e2 0f       	add	r30, r18
     68c:	f3 1f       	adc	r31, r19
     68e:	90 e6       	ldi	r25, 0x60	; 96
     690:	89 9f       	mul	r24, r25
     692:	c0 01       	movw	r24, r0
     694:	11 24       	eor	r1, r1
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	e4 55       	subi	r30, 0x54	; 84
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	25 91       	lpm	r18, Z+
     6a0:	34 91       	lpm	r19, Z+
}
     6a2:	c9 01       	movw	r24, r18
     6a4:	08 95       	ret

000006a6 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint16_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     6a6:	fc 01       	movw	r30, r24
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	e4 5b       	subi	r30, 0xB4	; 180
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	25 91       	lpm	r18, Z+
     6b2:	34 91       	lpm	r19, Z+
}
     6b4:	c9 01       	movw	r24, r18
     6b6:	08 95       	ret

000006b8 <keymap_func_to_action>:

action_t keymap_func_to_action(uint16_t keycode)
{
	// For FUNC without 8bit limit
    return (action_t){ .code = pgm_read_word(&fn_actions[(int)keycode]) };
     6b8:	fc 01       	movw	r30, r24
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e4 53       	subi	r30, 0x34	; 52
     6c0:	fe 4f       	sbci	r31, 0xFE	; 254
     6c2:	25 91       	lpm	r18, Z+
     6c4:	34 91       	lpm	r19, Z+
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <action_for_key>:

/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
	// 16bit keycodes - important
    uint16_t keycode = keymap_key_to_keycode(layer, key);
     6ca:	0e 94 3d 03 	call	0x67a	; 0x67a <keymap_key_to_keycode>
     6ce:	9c 01       	movw	r18, r24

    if (keycode >= 0x0100 && keycode < 0x2000) {
     6d0:	80 50       	subi	r24, 0x00	; 0
     6d2:	91 40       	sbci	r25, 0x01	; 1
     6d4:	80 50       	subi	r24, 0x00	; 0
     6d6:	9f 41       	sbci	r25, 0x1F	; 31
     6d8:	18 f4       	brcc	.+6      	; 0x6e0 <action_for_key+0x16>
    	// Has a modifier
    	action_t action;
    	// Split it up
    	action.code = ACTION_MODS_KEY(keycode >> 8, keycode & 0xFF);
     6da:	c9 01       	movw	r24, r18
     6dc:	9f 71       	andi	r25, 0x1F	; 31
     6de:	d6 c0       	rjmp	.+428    	; 0x88c <action_for_key+0x1c2>
    	return action;
    } else if (keycode >= 0x2000 && keycode < 0x3000) {
     6e0:	c9 01       	movw	r24, r18
     6e2:	80 50       	subi	r24, 0x00	; 0
     6e4:	90 42       	sbci	r25, 0x20	; 32
     6e6:	80 50       	subi	r24, 0x00	; 0
     6e8:	90 41       	sbci	r25, 0x10	; 16
     6ea:	28 f4       	brcc	.+10     	; 0x6f6 <action_for_key+0x2c>
        // Is a shortcut for function layer, pull last 12bits
        return keymap_func_to_action(keycode & 0xFFF);
     6ec:	c9 01       	movw	r24, r18
     6ee:	9f 70       	andi	r25, 0x0F	; 15
     6f0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keymap_func_to_action>
     6f4:	cb c0       	rjmp	.+406    	; 0x88c <action_for_key+0x1c2>
    } else if (keycode >= 0x3000 && keycode < 0x4000) {
     6f6:	c9 01       	movw	r24, r18
     6f8:	80 50       	subi	r24, 0x00	; 0
     6fa:	90 43       	sbci	r25, 0x30	; 48
     6fc:	80 50       	subi	r24, 0x00	; 0
     6fe:	90 41       	sbci	r25, 0x10	; 16
     700:	20 f4       	brcc	.+8      	; 0x70a <action_for_key+0x40>
        action_t action;
        action.code = ACTION_MACRO(keycode & 0xFF);
     702:	c9 01       	movw	r24, r18
     704:	90 70       	andi	r25, 0x00	; 0
     706:	90 6c       	ori	r25, 0xC0	; 192
     708:	c1 c0       	rjmp	.+386    	; 0x88c <action_for_key+0x1c2>
    /*     return; */
    /* } else if (keycode == DEBUG) { */
    /*     print("\nDEBUG: enabled.\n"); */
    /*     debug_enable = true; */
    /*     return; */
    } else if (keycode >= 0x6000 && keycode < 0x7000) {
     70a:	c9 01       	movw	r24, r18
     70c:	80 50       	subi	r24, 0x00	; 0
     70e:	90 46       	sbci	r25, 0x60	; 96
     710:	80 50       	subi	r24, 0x00	; 0
     712:	90 41       	sbci	r25, 0x10	; 16
     714:	10 f0       	brcs	.+4      	; 0x71a <action_for_key+0x50>
        action_t action;
        action.code =  ACTION_FUNCTION_OPT(keycode & 0xFF, (keycode & 0x0F00) >> 8);
        return action;
    } else if (keycode >= 0x8000) {
     716:	37 ff       	sbrs	r19, 7
     718:	03 c0       	rjmp	.+6      	; 0x720 <action_for_key+0x56>
        action_t action;
        uint16_t unicode = keycode & ~(0x8000);
        action.code =  ACTION_FUNCTION_OPT(unicode & 0xFF, (unicode & 0xFF00) >> 8);
     71a:	c9 01       	movw	r24, r18
     71c:	90 6f       	ori	r25, 0xF0	; 240
     71e:	b6 c0       	rjmp	.+364    	; 0x88c <action_for_key+0x1c2>
        return action;
    }

    switch (keycode) {
     720:	c9 01       	movw	r24, r18
     722:	80 5c       	subi	r24, 0xC0	; 192
     724:	90 40       	sbci	r25, 0x00	; 0
     726:	80 97       	sbiw	r24, 0x20	; 32
     728:	20 f4       	brcc	.+8      	; 0x732 <action_for_key+0x68>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
     72a:	c9 01       	movw	r24, r18
     72c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <keymap_fn_to_action>
     730:	ad c0       	rjmp	.+346    	; 0x88c <action_for_key+0x1c2>

/* translates keycode to action */
static action_t keycode_to_action(uint16_t keycode)
{
    action_t action;
    switch (keycode) {
     732:	2b 3b       	cpi	r18, 0xBB	; 187
     734:	31 05       	cpc	r19, r1
     736:	70 f4       	brcc	.+28     	; 0x754 <action_for_key+0x8a>
     738:	28 3a       	cpi	r18, 0xA8	; 168
     73a:	31 05       	cpc	r19, r1
     73c:	50 f5       	brcc	.+84     	; 0x792 <action_for_key+0xc8>
     73e:	25 3a       	cpi	r18, 0xA5	; 165
     740:	31 05       	cpc	r19, r1
     742:	c0 f4       	brcc	.+48     	; 0x774 <action_for_key+0xaa>
     744:	24 30       	cpi	r18, 0x04	; 4
     746:	31 05       	cpc	r19, r1
     748:	98 f4       	brcc	.+38     	; 0x770 <action_for_key+0xa6>
     74a:	21 30       	cpi	r18, 0x01	; 1
     74c:	31 05       	cpc	r19, r1
     74e:	09 f0       	breq	.+2      	; 0x752 <action_for_key+0x88>
     750:	9b c0       	rjmp	.+310    	; 0x888 <action_for_key+0x1be>
     752:	97 c0       	rjmp	.+302    	; 0x882 <action_for_key+0x1b8>
     754:	20 3e       	cpi	r18, 0xE0	; 224
     756:	31 05       	cpc	r19, r1
     758:	08 f4       	brcc	.+2      	; 0x75c <action_for_key+0x92>
     75a:	96 c0       	rjmp	.+300    	; 0x888 <action_for_key+0x1be>
     75c:	28 3e       	cpi	r18, 0xE8	; 232
     75e:	31 05       	cpc	r19, r1
     760:	38 f0       	brcs	.+14     	; 0x770 <action_for_key+0xa6>
     762:	c9 01       	movw	r24, r18
     764:	80 5f       	subi	r24, 0xF0	; 240
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	40 97       	sbiw	r24, 0x10	; 16
     76a:	08 f0       	brcs	.+2      	; 0x76e <action_for_key+0xa4>
     76c:	8d c0       	rjmp	.+282    	; 0x888 <action_for_key+0x1be>
     76e:	86 c0       	rjmp	.+268    	; 0x87c <action_for_key+0x1b2>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
     770:	c9 01       	movw	r24, r18
     772:	8c c0       	rjmp	.+280    	; 0x88c <action_for_key+0x1c2>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
     774:	25 3a       	cpi	r18, 0xA5	; 165
     776:	31 05       	cpc	r19, r1
     778:	19 f4       	brne	.+6      	; 0x780 <action_for_key+0xb6>
     77a:	81 e8       	ldi	r24, 0x81	; 129
     77c:	90 e4       	ldi	r25, 0x40	; 64
     77e:	86 c0       	rjmp	.+268    	; 0x88c <action_for_key+0x1c2>
     780:	26 3a       	cpi	r18, 0xA6	; 166
     782:	31 05       	cpc	r19, r1
     784:	19 f0       	breq	.+6      	; 0x78c <action_for_key+0xc2>
     786:	83 e8       	ldi	r24, 0x83	; 131
     788:	90 e4       	ldi	r25, 0x40	; 64
     78a:	80 c0       	rjmp	.+256    	; 0x88c <action_for_key+0x1c2>
     78c:	82 e8       	ldi	r24, 0x82	; 130
     78e:	90 e4       	ldi	r25, 0x40	; 64
     790:	7d c0       	rjmp	.+250    	; 0x88c <action_for_key+0x1c2>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
     792:	28 3a       	cpi	r18, 0xA8	; 168
     794:	31 05       	cpc	r19, r1
     796:	19 f4       	brne	.+6      	; 0x79e <action_for_key+0xd4>
     798:	82 ee       	ldi	r24, 0xE2	; 226
     79a:	94 e4       	ldi	r25, 0x44	; 68
     79c:	77 c0       	rjmp	.+238    	; 0x88c <action_for_key+0x1c2>
     79e:	29 3a       	cpi	r18, 0xA9	; 169
     7a0:	31 05       	cpc	r19, r1
     7a2:	19 f4       	brne	.+6      	; 0x7aa <action_for_key+0xe0>
     7a4:	89 ee       	ldi	r24, 0xE9	; 233
     7a6:	94 e4       	ldi	r25, 0x44	; 68
     7a8:	71 c0       	rjmp	.+226    	; 0x88c <action_for_key+0x1c2>
     7aa:	2a 3a       	cpi	r18, 0xAA	; 170
     7ac:	31 05       	cpc	r19, r1
     7ae:	19 f4       	brne	.+6      	; 0x7b6 <action_for_key+0xec>
     7b0:	8a ee       	ldi	r24, 0xEA	; 234
     7b2:	94 e4       	ldi	r25, 0x44	; 68
     7b4:	6b c0       	rjmp	.+214    	; 0x88c <action_for_key+0x1c2>
     7b6:	2b 3a       	cpi	r18, 0xAB	; 171
     7b8:	31 05       	cpc	r19, r1
     7ba:	19 f4       	brne	.+6      	; 0x7c2 <action_for_key+0xf8>
     7bc:	85 eb       	ldi	r24, 0xB5	; 181
     7be:	94 e4       	ldi	r25, 0x44	; 68
     7c0:	65 c0       	rjmp	.+202    	; 0x88c <action_for_key+0x1c2>
     7c2:	2c 3a       	cpi	r18, 0xAC	; 172
     7c4:	31 05       	cpc	r19, r1
     7c6:	19 f4       	brne	.+6      	; 0x7ce <action_for_key+0x104>
     7c8:	86 eb       	ldi	r24, 0xB6	; 182
     7ca:	94 e4       	ldi	r25, 0x44	; 68
     7cc:	5f c0       	rjmp	.+190    	; 0x88c <action_for_key+0x1c2>
     7ce:	2d 3a       	cpi	r18, 0xAD	; 173
     7d0:	31 05       	cpc	r19, r1
     7d2:	19 f4       	brne	.+6      	; 0x7da <action_for_key+0x110>
     7d4:	87 eb       	ldi	r24, 0xB7	; 183
     7d6:	94 e4       	ldi	r25, 0x44	; 68
     7d8:	59 c0       	rjmp	.+178    	; 0x88c <action_for_key+0x1c2>
     7da:	20 3b       	cpi	r18, 0xB0	; 176
     7dc:	31 05       	cpc	r19, r1
     7de:	19 f4       	brne	.+6      	; 0x7e6 <action_for_key+0x11c>
     7e0:	8c ec       	ldi	r24, 0xCC	; 204
     7e2:	94 e4       	ldi	r25, 0x44	; 68
     7e4:	53 c0       	rjmp	.+166    	; 0x88c <action_for_key+0x1c2>
     7e6:	2e 3a       	cpi	r18, 0xAE	; 174
     7e8:	31 05       	cpc	r19, r1
     7ea:	19 f4       	brne	.+6      	; 0x7f2 <action_for_key+0x128>
     7ec:	8d ec       	ldi	r24, 0xCD	; 205
     7ee:	94 e4       	ldi	r25, 0x44	; 68
     7f0:	4d c0       	rjmp	.+154    	; 0x88c <action_for_key+0x1c2>
     7f2:	2f 3a       	cpi	r18, 0xAF	; 175
     7f4:	31 05       	cpc	r19, r1
     7f6:	19 f4       	brne	.+6      	; 0x7fe <action_for_key+0x134>
     7f8:	83 e8       	ldi	r24, 0x83	; 131
     7fa:	95 e4       	ldi	r25, 0x45	; 69
     7fc:	47 c0       	rjmp	.+142    	; 0x88c <action_for_key+0x1c2>
     7fe:	21 3b       	cpi	r18, 0xB1	; 177
     800:	31 05       	cpc	r19, r1
     802:	19 f4       	brne	.+6      	; 0x80a <action_for_key+0x140>
     804:	8a e8       	ldi	r24, 0x8A	; 138
     806:	95 e4       	ldi	r25, 0x45	; 69
     808:	41 c0       	rjmp	.+130    	; 0x88c <action_for_key+0x1c2>
     80a:	22 3b       	cpi	r18, 0xB2	; 178
     80c:	31 05       	cpc	r19, r1
     80e:	19 f4       	brne	.+6      	; 0x816 <action_for_key+0x14c>
     810:	82 e9       	ldi	r24, 0x92	; 146
     812:	95 e4       	ldi	r25, 0x45	; 69
     814:	3b c0       	rjmp	.+118    	; 0x88c <action_for_key+0x1c2>
     816:	23 3b       	cpi	r18, 0xB3	; 179
     818:	31 05       	cpc	r19, r1
     81a:	19 f4       	brne	.+6      	; 0x822 <action_for_key+0x158>
     81c:	84 e9       	ldi	r24, 0x94	; 148
     81e:	95 e4       	ldi	r25, 0x45	; 69
     820:	35 c0       	rjmp	.+106    	; 0x88c <action_for_key+0x1c2>
     822:	24 3b       	cpi	r18, 0xB4	; 180
     824:	31 05       	cpc	r19, r1
     826:	19 f4       	brne	.+6      	; 0x82e <action_for_key+0x164>
     828:	81 e2       	ldi	r24, 0x21	; 33
     82a:	96 e4       	ldi	r25, 0x46	; 70
     82c:	2f c0       	rjmp	.+94     	; 0x88c <action_for_key+0x1c2>
     82e:	25 3b       	cpi	r18, 0xB5	; 181
     830:	31 05       	cpc	r19, r1
     832:	19 f4       	brne	.+6      	; 0x83a <action_for_key+0x170>
     834:	83 e2       	ldi	r24, 0x23	; 35
     836:	96 e4       	ldi	r25, 0x46	; 70
     838:	29 c0       	rjmp	.+82     	; 0x88c <action_for_key+0x1c2>
     83a:	26 3b       	cpi	r18, 0xB6	; 182
     83c:	31 05       	cpc	r19, r1
     83e:	19 f4       	brne	.+6      	; 0x846 <action_for_key+0x17c>
     840:	84 e2       	ldi	r24, 0x24	; 36
     842:	96 e4       	ldi	r25, 0x46	; 70
     844:	23 c0       	rjmp	.+70     	; 0x88c <action_for_key+0x1c2>
     846:	27 3b       	cpi	r18, 0xB7	; 183
     848:	31 05       	cpc	r19, r1
     84a:	19 f4       	brne	.+6      	; 0x852 <action_for_key+0x188>
     84c:	85 e2       	ldi	r24, 0x25	; 37
     84e:	96 e4       	ldi	r25, 0x46	; 70
     850:	1d c0       	rjmp	.+58     	; 0x88c <action_for_key+0x1c2>
     852:	28 3b       	cpi	r18, 0xB8	; 184
     854:	31 05       	cpc	r19, r1
     856:	19 f4       	brne	.+6      	; 0x85e <action_for_key+0x194>
     858:	86 e2       	ldi	r24, 0x26	; 38
     85a:	96 e4       	ldi	r25, 0x46	; 70
     85c:	17 c0       	rjmp	.+46     	; 0x88c <action_for_key+0x1c2>
     85e:	29 3b       	cpi	r18, 0xB9	; 185
     860:	31 05       	cpc	r19, r1
     862:	19 f4       	brne	.+6      	; 0x86a <action_for_key+0x1a0>
     864:	87 e2       	ldi	r24, 0x27	; 39
     866:	96 e4       	ldi	r25, 0x46	; 70
     868:	11 c0       	rjmp	.+34     	; 0x88c <action_for_key+0x1c2>
     86a:	2a 3b       	cpi	r18, 0xBA	; 186
     86c:	31 05       	cpc	r19, r1
     86e:	19 f0       	breq	.+6      	; 0x876 <action_for_key+0x1ac>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	94 e4       	ldi	r25, 0x44	; 68
     874:	0b c0       	rjmp	.+22     	; 0x88c <action_for_key+0x1c2>
     876:	8a e2       	ldi	r24, 0x2A	; 42
     878:	96 e4       	ldi	r25, 0x46	; 70
     87a:	08 c0       	rjmp	.+16     	; 0x88c <action_for_key+0x1c2>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
     87c:	c9 01       	movw	r24, r18
     87e:	90 65       	ori	r25, 0x50	; 80
     880:	05 c0       	rjmp	.+10     	; 0x88c <action_for_key+0x1c2>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	02 c0       	rjmp	.+4      	; 0x88c <action_for_key+0x1c2>
            break;
        default:
            action.code = ACTION_NO;
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
     88c:	08 95       	ret

0000088e <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
     88e:	e6 e1       	ldi	r30, 0x16	; 22
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	e8 0f       	add	r30, r24
     894:	f1 1d       	adc	r31, r1
    return matrix[row];
}
     896:	80 81       	ld	r24, Z
     898:	08 95       	ret

0000089a <matrix_print>:
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
     89a:	08 95       	ret

0000089c <unselect_rows>:
 * pin:  E6 B4 B6
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b11000000;
     89c:	80 b3       	in	r24, 0x10	; 16
     89e:	8f 73       	andi	r24, 0x3F	; 63
     8a0:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b11000000;
     8a2:	81 b3       	in	r24, 0x11	; 17
     8a4:	8f 73       	andi	r24, 0x3F	; 63
     8a6:	81 bb       	out	0x11, r24	; 17

    DDRE  &= ~0b01000000;
     8a8:	6e 98       	cbi	0x0d, 6	; 13
    PORTE &= ~0b01000000;
     8aa:	76 98       	cbi	0x0e, 6	; 14
 
    DDRD  &= ~0b10000000;
     8ac:	57 98       	cbi	0x0a, 7	; 10
    PORTD &= ~0b10000000;
     8ae:	5f 98       	cbi	0x0b, 7	; 11

    
}
     8b0:	08 95       	ret

000008b2 <_matrix_scan>:
    }

}

uint8_t _matrix_scan(void)
{
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
     8c8:	80 91 01 01 	lds	r24, 0x0101
     8cc:	88 23       	and	r24, r24
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <_matrix_scan+0x26>
     8d0:	b4 e0       	ldi	r27, 0x04	; 4
     8d2:	eb 2e       	mov	r14, r27
     8d4:	f1 2c       	mov	r15, r1
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <_matrix_scan+0x2a>
     8d8:	ee 24       	eor	r14, r14
     8da:	ff 24       	eor	r15, r15
     8dc:	00 91 00 01 	lds	r16, 0x0100
     8e0:	ae e1       	ldi	r26, 0x1E	; 30
     8e2:	ca 2e       	mov	r12, r26
     8e4:	a1 e0       	ldi	r26, 0x01	; 1
     8e6:	da 2e       	mov	r13, r26
     8e8:	ce 0c       	add	r12, r14
     8ea:	df 1c       	adc	r13, r15
     8ec:	e6 01       	movw	r28, r12
     8ee:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8f0:	f0 ea       	ldi	r31, 0xA0	; 160
     8f2:	9f 2e       	mov	r9, r31
    
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<4) ? 0 : (1<<0)) |
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	ae 2e       	mov	r10, r30
     8f8:	b1 2c       	mov	r11, r1
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     8fa:	11 30       	cpi	r17, 0x01	; 1
     8fc:	51 f0       	breq	.+20     	; 0x912 <_matrix_scan+0x60>
     8fe:	11 30       	cpi	r17, 0x01	; 1
     900:	28 f0       	brcs	.+10     	; 0x90c <_matrix_scan+0x5a>
     902:	12 30       	cpi	r17, 0x02	; 2
     904:	49 f0       	breq	.+18     	; 0x918 <_matrix_scan+0x66>
     906:	13 30       	cpi	r17, 0x03	; 3
     908:	61 f4       	brne	.+24     	; 0x922 <_matrix_scan+0x70>
     90a:	09 c0       	rjmp	.+18     	; 0x91e <_matrix_scan+0x6c>
        case 0:
            DDRD  |= (1<<7);
     90c:	57 9a       	sbi	0x0a, 7	; 10
            PORTD &= ~(1<<7);
     90e:	5f 98       	cbi	0x0b, 7	; 11
     910:	08 c0       	rjmp	.+16     	; 0x922 <_matrix_scan+0x70>
            break;
        case 1:
            DDRE  |= (1<<6);
     912:	6e 9a       	sbi	0x0d, 6	; 13
            PORTE &= ~(1<<6);
     914:	76 98       	cbi	0x0e, 6	; 14
     916:	05 c0       	rjmp	.+10     	; 0x922 <_matrix_scan+0x70>
            break;
        case 2:
            DDRF  |= (1<<6);
     918:	86 9a       	sbi	0x10, 6	; 16
            PORTF &= ~(1<<6);
     91a:	8e 98       	cbi	0x11, 6	; 17
     91c:	02 c0       	rjmp	.+4      	; 0x922 <_matrix_scan+0x70>
            break;
        case 3:
            DDRF  |= (1<<7);
     91e:	87 9a       	sbi	0x10, 7	; 16
            PORTF &= ~(1<<7);
     920:	8f 98       	cbi	0x11, 7	; 17
     922:	89 2d       	mov	r24, r9
     924:	8a 95       	dec	r24
     926:	f1 f7       	brne	.-4      	; 0x924 <_matrix_scan+0x72>
    
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<4) ? 0 : (1<<0)) |
     928:	83 b1       	in	r24, 0x03	; 3
     92a:	1d 99       	sbic	0x03, 5	; 3
     92c:	02 c0       	rjmp	.+4      	; 0x932 <_matrix_scan+0x80>
     92e:	62 e0       	ldi	r22, 0x02	; 2
     930:	01 c0       	rjmp	.+2      	; 0x934 <_matrix_scan+0x82>
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	1e 99       	sbic	0x03, 6	; 3
     936:	02 c0       	rjmp	.+4      	; 0x93c <_matrix_scan+0x8a>
     938:	54 e0       	ldi	r21, 0x04	; 4
     93a:	01 c0       	rjmp	.+2      	; 0x93e <_matrix_scan+0x8c>
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	1a 99       	sbic	0x03, 2	; 3
     940:	02 c0       	rjmp	.+4      	; 0x946 <_matrix_scan+0x94>
     942:	48 e0       	ldi	r20, 0x08	; 8
     944:	01 c0       	rjmp	.+2      	; 0x948 <_matrix_scan+0x96>
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	1b 99       	sbic	0x03, 3	; 3
     94a:	02 c0       	rjmp	.+4      	; 0x950 <_matrix_scan+0x9e>
     94c:	30 e1       	ldi	r19, 0x10	; 16
     94e:	01 c0       	rjmp	.+2      	; 0x952 <_matrix_scan+0xa0>
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	19 99       	sbic	0x03, 1	; 3
     954:	02 c0       	rjmp	.+4      	; 0x95a <_matrix_scan+0xa8>
     956:	20 e2       	ldi	r18, 0x20	; 32
     958:	01 c0       	rjmp	.+2      	; 0x95c <_matrix_scan+0xaa>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	74 e0       	ldi	r23, 0x04	; 4
     960:	96 95       	lsr	r25
     962:	87 95       	ror	r24
     964:	7a 95       	dec	r23
     966:	e1 f7       	brne	.-8      	; 0x960 <_matrix_scan+0xae>
     968:	8a 25       	eor	r24, r10
     96a:	9b 25       	eor	r25, r11
     96c:	98 2f       	mov	r25, r24
     96e:	91 70       	andi	r25, 0x01	; 1
     970:	96 2b       	or	r25, r22
     972:	95 2b       	or	r25, r21
     974:	94 2b       	or	r25, r20
     976:	93 2b       	or	r25, r19
     978:	92 2b       	or	r25, r18

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i+offset] != cols) {
     97a:	88 81       	ld	r24, Y
     97c:	89 17       	cp	r24, r25
     97e:	11 f0       	breq	.+4      	; 0x984 <_matrix_scan+0xd2>
            matrix_debouncing[i+offset] = cols;
     980:	98 83       	st	Y, r25
     982:	05 e0       	ldi	r16, 0x05	; 5
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
        }
        unselect_rows();
     984:	0e 94 4e 04 	call	0x89c	; 0x89c <unselect_rows>
uint8_t _matrix_scan(void)
{
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
     988:	1f 5f       	subi	r17, 0xFF	; 255
     98a:	21 96       	adiw	r28, 0x01	; 1
     98c:	14 30       	cpi	r17, 0x04	; 4
     98e:	09 f0       	breq	.+2      	; 0x992 <_matrix_scan+0xe0>
     990:	b4 cf       	rjmp	.-152    	; 0x8fa <_matrix_scan+0x48>
     992:	00 93 00 01 	sts	0x0100, r16
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     996:	00 23       	and	r16, r16
     998:	b1 f0       	breq	.+44     	; 0x9c6 <_matrix_scan+0x114>
        if (--debouncing) {
     99a:	80 2f       	mov	r24, r16
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	80 93 00 01 	sts	0x0100, r24
     9a2:	88 23       	and	r24, r24
     9a4:	29 f0       	breq	.+10     	; 0x9b0 <_matrix_scan+0xfe>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9a6:	80 ea       	ldi	r24, 0xA0	; 160
     9a8:	9f e0       	ldi	r25, 0x0F	; 15
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <_matrix_scan+0xf8>
     9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <_matrix_scan+0x114>
     9b0:	f7 01       	movw	r30, r14
     9b2:	ea 5e       	subi	r30, 0xEA	; 234
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
                matrix[i+offset] = matrix_debouncing[i+offset];
     9b8:	d6 01       	movw	r26, r12
     9ba:	8d 91       	ld	r24, X+
     9bc:	6d 01       	movw	r12, r26
     9be:	81 93       	st	Z+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	94 30       	cpi	r25, 0x04	; 4
     9c4:	c9 f7       	brne	.-14     	; 0x9b8 <_matrix_scan+0x106>
            }
        }
    }

    return 1;
}
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	9f 90       	pop	r9
     9de:	08 95       	ret

000009e0 <matrix_slave_scan>:

    return ret;
}

void matrix_slave_scan(void) {
    int ret = _matrix_scan();
     9e0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_matrix_scan>

    int offset = (isLeftHand) ? 0 : (MATRIX_ROWS / 2);
     9e4:	80 91 01 01 	lds	r24, 0x0101
     9e8:	88 23       	and	r24, r24
     9ea:	19 f4       	brne	.+6      	; 0x9f2 <matrix_slave_scan+0x12>
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <matrix_slave_scan+0x16>
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	dc 01       	movw	r26, r24
     9f8:	aa 5e       	subi	r26, 0xEA	; 234
     9fa:	be 4f       	sbci	r27, 0xFE	; 254
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        serial_slave_buffer[i] = matrix[offset+i];
     a00:	8d 91       	ld	r24, X+
     a02:	f9 01       	movw	r30, r18
     a04:	e8 5d       	subi	r30, 0xD8	; 216
     a06:	fe 4f       	sbci	r31, 0xFE	; 254
     a08:	80 83       	st	Z, r24
void matrix_slave_scan(void) {
    int ret = _matrix_scan();

    int offset = (isLeftHand) ? 0 : (MATRIX_ROWS / 2);

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	24 30       	cpi	r18, 0x04	; 4
     a10:	31 05       	cpc	r19, r1
     a12:	b1 f7       	brne	.-20     	; 0xa00 <matrix_slave_scan+0x20>
        serial_slave_buffer[i] = matrix[offset+i];
    }
}
     a14:	08 95       	ret

00000a16 <matrix_scan>:
    return 1;
}


uint8_t matrix_scan(void)
{
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
    int ret = _matrix_scan();
     a1c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_matrix_scan>
     a20:	18 2f       	mov	r17, r24


    int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
     a22:	80 91 01 01 	lds	r24, 0x0101
     a26:	88 23       	and	r24, r24
     a28:	19 f4       	brne	.+6      	; 0xa30 <matrix_scan+0x1a>
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <matrix_scan+0x1e>
     a30:	c4 e0       	ldi	r28, 0x04	; 4
     a32:	d0 e0       	ldi	r29, 0x00	; 0
        for (int i = 0; i < ROWS_PER_HAND; ++i) {
            matrix[slaveOffset+i] = 0;
        }
    }
#else
    if( serial_transaction() ) {
     a34:	0e 94 59 06 	call	0xcb2	; 0xcb2 <serial_transaction>
     a38:	9e 01       	movw	r18, r28
     a3a:	2a 5e       	subi	r18, 0xEA	; 234
     a3c:	3e 4f       	sbci	r19, 0xFE	; 254
     a3e:	89 2b       	or	r24, r25
     a40:	51 f0       	breq	.+20     	; 0xa56 <matrix_scan+0x40>
        // turn on the indicator led
        PORTD &= ~(1<<5);
     a42:	5d 98       	cbi	0x0b, 5	; 11
     a44:	f9 01       	movw	r30, r18
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
        // if we cannot communicate with the other half, then unset all of its keys
        for (int i = 0; i < ROWS_PER_HAND; ++i) {
            matrix[slaveOffset+i] = 0;
     a4a:	11 92       	st	Z+, r1
#else
    if( serial_transaction() ) {
        // turn on the indicator led
        PORTD &= ~(1<<5);
        // if we cannot communicate with the other half, then unset all of its keys
        for (int i = 0; i < ROWS_PER_HAND; ++i) {
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	84 30       	cpi	r24, 0x04	; 4
     a50:	91 05       	cpc	r25, r1
     a52:	d9 f7       	brne	.-10     	; 0xa4a <matrix_scan+0x34>
     a54:	0e c0       	rjmp	.+28     	; 0xa72 <matrix_scan+0x5c>
            matrix[slaveOffset+i] = 0;
        }
    } else {
        // turn off the indicator led on no error
        PORTD |= (1<<5);
     a56:	5d 9a       	sbi	0x0b, 5	; 11
     a58:	d9 01       	movw	r26, r18
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
        // no error

        for (int i = 0; i < ROWS_PER_HAND; ++i) {
            matrix[slaveOffset+i] = serial_slave_buffer[i];
     a5e:	f9 01       	movw	r30, r18
     a60:	e8 5d       	subi	r30, 0xD8	; 216
     a62:	fe 4f       	sbci	r31, 0xFE	; 254
     a64:	80 81       	ld	r24, Z
     a66:	8d 93       	st	X+, r24
    } else {
        // turn off the indicator led on no error
        PORTD |= (1<<5);
        // no error

        for (int i = 0; i < ROWS_PER_HAND; ++i) {
     a68:	2f 5f       	subi	r18, 0xFF	; 255
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	24 30       	cpi	r18, 0x04	; 4
     a6e:	31 05       	cpc	r19, r1
     a70:	b1 f7       	brne	.-20     	; 0xa5e <matrix_scan+0x48>
        }
    }
#endif

    return ret;
}
     a72:	81 2f       	mov	r24, r17
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	08 95       	ret

00000a7c <matrix_init>:
    return MATRIX_COLS;
}

void matrix_init(void)
{
    debug_enable = true;
     a7c:	80 91 9a 01 	lds	r24, 0x019A
    debug_matrix = true;
    debug_mouse = true;
     a80:	8b 60       	ori	r24, 0x0B	; 11
     a82:	80 93 9a 01 	sts	0x019A, r24
    // initialize row and col
    unselect_rows();
     a86:	0e 94 4e 04 	call	0x89c	; 0x89c <unselect_rows>
 * pin: B4 B5  B6  B2  E6  D7
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRB  &= ~(1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 );
     a8a:	84 b1       	in	r24, 0x04	; 4
     a8c:	81 78       	andi	r24, 0x81	; 129
     a8e:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 );
     a90:	85 b1       	in	r24, 0x05	; 5
     a92:	8e 67       	ori	r24, 0x7E	; 126
     a94:	85 b9       	out	0x05, r24	; 5
    init_cols();

#ifdef USE_I2C
    i2c_master_init();
#else
    serial_master_init();
     a96:	0e 94 c7 05 	call	0xb8e	; 0xb8e <serial_master_init>
    /*     PORTD &= ~(1<<5); */
    /* } else { */

    // use the pro micro TX led as an indicator
    // pull D5 low to turn on
    DDRD  |= 1<<5;
     a9a:	55 9a       	sbi	0x0a, 5	; 10
    PORTD |= (1<<5);
     a9c:	5d 9a       	sbi	0x0b, 5	; 11
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
    /* } */

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     aa2:	fc 01       	movw	r30, r24
     aa4:	ea 5e       	subi	r30, 0xEA	; 234
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	10 82       	st	Z, r1
        matrix_debouncing[i] = 0;
     aaa:	fc 01       	movw	r30, r24
     aac:	e2 5e       	subi	r30, 0xE2	; 226
     aae:	fe 4f       	sbci	r31, 0xFE	; 254
     ab0:	10 82       	st	Z, r1
     ab2:	01 96       	adiw	r24, 0x01	; 1
    DDRD  |= 1<<5;
    PORTD |= (1<<5);
    /* } */

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     ab4:	88 30       	cpi	r24, 0x08	; 8
     ab6:	91 05       	cpc	r25, r1
     ab8:	a1 f7       	brne	.-24     	; 0xaa2 <matrix_init+0x26>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }

}
     aba:	08 95       	ret

00000abc <__vector_36>:

ISR(TWI_vect) {
     abc:	1f 92       	push	r1
     abe:	0f 92       	push	r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	ef 93       	push	r30
     acc:	ff 93       	push	r31
  uint8_t ack = 1;
  switch(TW_STATUS) {
     ace:	80 91 b9 00 	lds	r24, 0x00B9
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	88 7f       	andi	r24, 0xF8	; 248
     ad6:	90 70       	andi	r25, 0x00	; 0
     ad8:	80 38       	cpi	r24, 0x80	; 128
     ada:	91 05       	cpc	r25, r1
     adc:	99 f0       	breq	.+38     	; 0xb04 <__stack+0x5>
     ade:	81 38       	cpi	r24, 0x81	; 129
     ae0:	91 05       	cpc	r25, r1
     ae2:	34 f4       	brge	.+12     	; 0xaf0 <__vector_36+0x34>
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	e9 f1       	breq	.+122    	; 0xb62 <__stack+0x63>
     ae8:	80 36       	cpi	r24, 0x60	; 96
     aea:	91 05       	cpc	r25, r1
     aec:	e1 f5       	brne	.+120    	; 0xb66 <__stack+0x67>
     aee:	07 c0       	rjmp	.+14     	; 0xafe <__vector_36+0x42>
     af0:	88 3a       	cpi	r24, 0xA8	; 168
     af2:	91 05       	cpc	r25, r1
     af4:	29 f1       	breq	.+74     	; 0xb40 <__stack+0x41>
     af6:	88 3b       	cpi	r24, 0xB8	; 184
     af8:	91 05       	cpc	r25, r1
     afa:	a9 f5       	brne	.+106    	; 0xb66 <__stack+0x67>
     afc:	21 c0       	rjmp	.+66     	; 0xb40 <__stack+0x41>
    case TW_SR_SLA_ACK:
      // this device has been addressed as a slave receiver
      hasSetRegister = false;
     afe:	10 92 26 01 	sts	0x0126, r1
     b02:	31 c0       	rjmp	.+98     	; 0xb66 <__stack+0x67>
      // this device has received data as a slave receiver
      // The first byte that we receive in this transaction sets the location
      // of the read/write location of the slaves memory that it exposes over
      // i2c.  After that, bytes will be written at bufferPos, incrementing
      // bufferPos after each write.
      if(!hasSetRegister) {
     b04:	80 91 26 01 	lds	r24, 0x0126
     b08:	88 23       	and	r24, r24
     b0a:	89 f4       	brne	.+34     	; 0xb2e <__stack+0x2f>
        bufferPos = TWDR;
     b0c:	80 91 bb 00 	lds	r24, 0x00BB
     b10:	80 93 27 01 	sts	0x0127, r24
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( bufferPos >= SLAVE_BUFFER_SIZE ) {
     b14:	80 91 27 01 	lds	r24, 0x0127
     b18:	80 31       	cpi	r24, 0x10	; 16
     b1a:	10 f4       	brcc	.+4      	; 0xb20 <__stack+0x21>
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <__stack+0x27>
          ack = 0;
          bufferPos = 0;
     b20:	10 92 27 01 	sts	0x0127, r1
     b24:	90 e0       	ldi	r25, 0x00	; 0
        }
        hasSetRegister = true;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 26 01 	sts	0x0126, r24
     b2c:	1d c0       	rjmp	.+58     	; 0xb68 <__stack+0x69>
      } else {
        slaveBuffer[bufferPos] = TWDR;
     b2e:	e0 91 27 01 	lds	r30, 0x0127
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 91 bb 00 	lds	r24, 0x00BB
     b38:	ed 54       	subi	r30, 0x4D	; 77
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	80 83       	st	Z, r24
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__stack+0x51>

    case TW_ST_SLA_ACK:
    case TW_ST_DATA_ACK:
      // master has addressed this device as a slave transmitter and is
      // requesting data.
      TWDR = slaveBuffer[bufferPos];
     b40:	e0 91 27 01 	lds	r30, 0x0127
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ed 54       	subi	r30, 0x4D	; 77
     b48:	fe 4f       	sbci	r31, 0xFE	; 254
     b4a:	80 81       	ld	r24, Z
     b4c:	80 93 bb 00 	sts	0x00BB, r24
      BUFFER_POS_INC();
     b50:	80 91 27 01 	lds	r24, 0x0127
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	8f 70       	andi	r24, 0x0F	; 15
     b5a:	90 70       	andi	r25, 0x00	; 0
     b5c:	80 93 27 01 	sts	0x0127, r24
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <__stack+0x67>
      break;

    case TW_BUS_ERROR: // something went wrong, reset twi state
      TWCR = 0;
     b62:	10 92 bc 00 	sts	0x00BC, r1
     b66:	91 e0       	ldi	r25, 0x01	; 1
    default:
      break;
  }
  // Reset everything, so we are ready for the next TWI interrupt
  TWCR |= (1<<TWIE) | (1<<TWINT) | (ack<<TWEA) | (1<<TWEN);
     b68:	80 91 bc 00 	lds	r24, 0x00BC
     b6c:	85 68       	ori	r24, 0x85	; 133
     b6e:	92 95       	swap	r25
     b70:	99 0f       	add	r25, r25
     b72:	99 0f       	add	r25, r25
     b74:	90 7c       	andi	r25, 0xC0	; 192
     b76:	98 2b       	or	r25, r24
     b78:	90 93 bc 00 	sts	0x00BC, r25
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <serial_master_init>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     b8e:	50 9a       	sbi	0x0a, 0	; 10
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     b90:	58 9a       	sbi	0x0b, 0	; 11
}

void serial_master_init(void) {
  serial_output();
  serial_high();
}
     b92:	08 95       	ret

00000b94 <serial_slave_init>:
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     b94:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     b96:	58 9a       	sbi	0x0b, 0	; 11

void serial_slave_init(void) {
  serial_input();

  // Enable INT0
  EIMSK |= _BV(INT0);
     b98:	e8 9a       	sbi	0x1d, 0	; 29
  // Trigger on falling edge of INT0
  EICRA &= ~(_BV(ISC00) | _BV(ISC01));
     b9a:	e9 e6       	ldi	r30, 0x69	; 105
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8c 7f       	andi	r24, 0xFC	; 252
     ba2:	80 83       	st	Z, r24
}
     ba4:	08 95       	ret

00000ba6 <sync_recv>:
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     ba6:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     ba8:	58 9a       	sbi	0x0b, 0	; 11
static
void sync_recv(void) {
  serial_input();
  // This shouldn't hang if the slave disconnects because the
  // serial line will float to high if the slave does disconnect.
  while (!serial_read_pin());
     baa:	48 9b       	sbis	0x09, 0	; 9
     bac:	fe cf       	rjmp	.-4      	; 0xbaa <sync_recv+0x4>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bae:	80 e8       	ldi	r24, 0x80	; 128
     bb0:	8a 95       	dec	r24
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <sync_recv+0xa>
  serial_delay();
}
     bb4:	08 95       	ret

00000bb6 <sync_send>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     bb6:	50 9a       	sbi	0x0a, 0	; 10
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
     bb8:	58 98       	cbi	0x0b, 0	; 11
     bba:	80 e8       	ldi	r24, 0x80	; 128
     bbc:	8a 95       	dec	r24
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <sync_send+0x6>
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     bc0:	58 9a       	sbi	0x0b, 0	; 11

  serial_low();
  serial_delay();

  serial_high();
}
     bc2:	08 95       	ret

00000bc4 <serial_read_byte>:
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     bc4:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     bc6:	58 9a       	sbi	0x0b, 0	; 11
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
     bce:	35 e0       	ldi	r19, 0x05	; 5
     bd0:	89 b1       	in	r24, 0x09	; 9
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    byte = (byte << 1) | serial_read_pin();
     bd2:	99 0f       	add	r25, r25
     bd4:	81 70       	andi	r24, 0x01	; 1
     bd6:	98 2b       	or	r25, r24
     bd8:	84 2f       	mov	r24, r20
     bda:	8a 95       	dec	r24
     bdc:	f1 f7       	brne	.-4      	; 0xbda <serial_read_byte+0x16>
     bde:	83 2f       	mov	r24, r19
     be0:	8a 95       	dec	r24
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <serial_read_byte+0x1c>
// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
     be4:	2f 5f       	subi	r18, 0xFF	; 255
     be6:	28 30       	cpi	r18, 0x08	; 8
     be8:	99 f7       	brne	.-26     	; 0xbd0 <serial_read_byte+0xc>
    serial_delay();
    _delay_us(1);
  }

  return byte;
}
     bea:	89 2f       	mov	r24, r25
     bec:	08 95       	ret

00000bee <serial_write_byte>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     bee:	50 9a       	sbi	0x0a, 0	; 10
     bf0:	28 e0       	ldi	r18, 0x08	; 8
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
    if(data & (1 << b)) {
     bf2:	48 2f       	mov	r20, r24
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	30 e8       	ldi	r19, 0x80	; 128
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
     bf8:	21 50       	subi	r18, 0x01	; 1
    if(data & (1 << b)) {
     bfa:	ca 01       	movw	r24, r20
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <serial_write_byte+0x16>
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <serial_write_byte+0x12>
     c08:	80 ff       	sbrs	r24, 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <serial_write_byte+0x22>
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     c0c:	58 9a       	sbi	0x0b, 0	; 11
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <serial_write_byte+0x24>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
     c10:	58 98       	cbi	0x0b, 0	; 11
     c12:	83 2f       	mov	r24, r19
     c14:	8a 95       	dec	r24
     c16:	f1 f7       	brne	.-4      	; 0xc14 <serial_write_byte+0x26>
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
     c18:	22 23       	and	r18, r18
     c1a:	71 f7       	brne	.-36     	; 0xbf8 <serial_write_byte+0xa>
    } else {
      serial_low();
    }
    serial_delay();
  }
}
     c1c:	08 95       	ret

00000c1e <__vector_1>:

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
  sync_send();
     c40:	0e 94 db 05 	call	0xbb6	; 0xbb6 <sync_send>

  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
     c44:	80 91 28 01 	lds	r24, 0x0128
     c48:	0e 94 f7 05 	call	0xbee	; 0xbee <serial_write_byte>
    sync_send();
     c4c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <sync_send>
// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
     c50:	80 91 29 01 	lds	r24, 0x0129
     c54:	0e 94 f7 05 	call	0xbee	; 0xbee <serial_write_byte>
    sync_send();
     c58:	0e 94 db 05 	call	0xbb6	; 0xbb6 <sync_send>
// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
     c5c:	80 91 2a 01 	lds	r24, 0x012A
     c60:	0e 94 f7 05 	call	0xbee	; 0xbee <serial_write_byte>
    sync_send();
     c64:	0e 94 db 05 	call	0xbb6	; 0xbb6 <sync_send>
// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
     c68:	80 91 2b 01 	lds	r24, 0x012B
     c6c:	0e 94 f7 05 	call	0xbee	; 0xbee <serial_write_byte>
    sync_send();
     c70:	0e 94 db 05 	call	0xbb6	; 0xbb6 <sync_send>
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	8a 95       	dec	r24
     c78:	f1 f7       	brne	.-4      	; 0xc76 <__vector_1+0x58>

  // read the middle of pulses
  _delay_us(SERIAL_DELAY/2);

  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_master_buffer[i] = serial_read_byte();
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	8a 95       	dec	r24
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <__vector_1+0x5e>
     c80:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <serial_read_byte>
     c84:	80 93 2c 01 	sts	0x012C, r24
    /* serial_master_buffer[2] = serial_read_byte(); */
    sync_send();
     c88:	0e 94 db 05 	call	0xbb6	; 0xbb6 <sync_send>
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     c8c:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     c8e:	58 9a       	sbi	0x0b, 0	; 11
    /* serial_master_buffer[2] = serial_read_byte(); */
    sync_send();
  }

  serial_input();
}
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <serial_transaction>:
// Returns:
// 0 => no error
// 1 => slave did not respond
int serial_transaction(void) {
  // this code is very time dependent, so we need to disable interrupts
  cli();
     cb2:	f8 94       	cli
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     cb4:	50 9a       	sbi	0x0a, 0	; 10
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
     cb6:	58 98       	cbi	0x0b, 0	; 11
     cb8:	85 e0       	ldi	r24, 0x05	; 5
     cba:	8a 95       	dec	r24
     cbc:	f1 f7       	brne	.-4      	; 0xcba <serial_transaction+0x8>
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     cbe:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     cc0:	58 9a       	sbi	0x0b, 0	; 11
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     cc2:	58 9a       	sbi	0x0b, 0	; 11
     cc4:	80 e8       	ldi	r24, 0x80	; 128
     cc6:	8a 95       	dec	r24
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <serial_transaction+0x14>
  serial_input();
  serial_high();
  _delay_us(SERIAL_DELAY);

  // check if the slave is present
  if (serial_read_pin()) {
     cca:	48 9b       	sbis	0x09, 0	; 9
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <serial_transaction+0x24>
    // slave failed to pull the line low, assume not present
    sei();
     cce:	78 94       	sei
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	25 c0       	rjmp	.+74     	; 0xd20 <serial_transaction+0x6e>
    return 1;
  }

  // if the slave is present syncronize with it
  sync_recv();
     cd6:	0e 94 d3 05 	call	0xba6	; 0xba6 <sync_recv>

  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
     cda:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <serial_read_byte>
     cde:	80 93 28 01 	sts	0x0128, r24
    sync_recv();
     ce2:	0e 94 d3 05 	call	0xba6	; 0xba6 <sync_recv>
  // if the slave is present syncronize with it
  sync_recv();

  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
     ce6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <serial_read_byte>
     cea:	80 93 29 01 	sts	0x0129, r24
    sync_recv();
     cee:	0e 94 d3 05 	call	0xba6	; 0xba6 <sync_recv>
  // if the slave is present syncronize with it
  sync_recv();

  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
     cf2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <serial_read_byte>
     cf6:	80 93 2a 01 	sts	0x012A, r24
    sync_recv();
     cfa:	0e 94 d3 05 	call	0xba6	; 0xba6 <sync_recv>
  // if the slave is present syncronize with it
  sync_recv();

  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
     cfe:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <serial_read_byte>
     d02:	80 93 2b 01 	sts	0x012B, r24
    sync_recv();
     d06:	0e 94 d3 05 	call	0xba6	; 0xba6 <sync_recv>
  }

  // send data to the slave
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_master_buffer[i]);
     d0a:	80 91 2c 01 	lds	r24, 0x012C
     d0e:	0e 94 f7 05 	call	0xbee	; 0xbee <serial_write_byte>
    sync_recv();
     d12:	0e 94 d3 05 	call	0xba6	; 0xba6 <sync_recv>
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     d16:	50 9a       	sbi	0x0a, 0	; 10
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     d18:	58 9a       	sbi	0x0b, 0	; 11

  // always, release the line when not in use
  serial_output();
  serial_high();

  sei();
     d1a:	78 94       	sei
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
  return 0;
}
     d20:	c9 01       	movw	r24, r18
     d22:	08 95       	ret

00000d24 <has_usb>:

bool EEMEM EEMEM_isLeftHand = true;
extern bool isLeftHand = true;

bool has_usb(void) {
   USBCON |= (1 << OTGPADE); //enables VBUS pad
     d24:	e8 ed       	ldi	r30, 0xD8	; 216
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 61       	ori	r24, 0x10	; 16
     d2c:	80 83       	st	Z, r24
     d2e:	8a e1       	ldi	r24, 0x1A	; 26
     d30:	8a 95       	dec	r24
     d32:	f1 f7       	brne	.-4      	; 0xd30 <has_usb+0xc>
   _delay_us(5);
   return (USBSTA & (1<<VBUS));  //checks state of VBUS
     d34:	80 91 d9 00 	lds	r24, 0x00D9
}
     d38:	81 70       	andi	r24, 0x01	; 1
     d3a:	08 95       	ret

00000d3c <setup_set_handedness>:
    // for Console_Task
    USB_Device_EnableSOFEvents();
}

void setup_set_handedness(void) {
    isLeftHand = eeprom_read_byte(&EEMEM_isLeftHand);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 c8 22 	call	0x4590	; 0x4590 <__eerd_byte_m32u4>
     d44:	10 92 01 01 	sts	0x0101, r1
     d48:	88 23       	and	r24, r24
     d4a:	19 f0       	breq	.+6      	; 0xd52 <setup_set_handedness+0x16>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 01 01 	sts	0x0101, r24
     d52:	08 95       	ret

00000d54 <setup_hardware>:
   return (USBSTA & (1<<VBUS));  //checks state of VBUS
}

void setup_hardware(void) {
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     d54:	84 b7       	in	r24, 0x34	; 52
     d56:	87 7f       	andi	r24, 0xF7	; 247
     d58:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     d5a:	88 e1       	ldi	r24, 0x18	; 24
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	80 93 60 00 	sts	0x0060, r24
     d64:	10 92 60 00 	sts	0x0060, r1
     d68:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	20 e8       	ldi	r18, 0x80	; 128
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	20 93 61 00 	sts	0x0061, r18
     d78:	80 93 61 00 	sts	0x0061, r24
     d7c:	0f be       	out	0x3f, r0	; 63

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     d7e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <USB_Disable>

    USB_Init();
     d82:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     d86:	e2 ee       	ldi	r30, 0xE2	; 226
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	84 60       	ori	r24, 0x04	; 4
     d8e:	80 83       	st	Z, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
}
     d90:	08 95       	ret

00000d92 <main>:
void matrix_slave_scan(void);

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_hardware();
     d92:	0e 94 aa 06 	call	0xd54	; 0xd54 <setup_hardware>
    setup_set_handedness();
     d96:	0e 94 9e 06 	call	0xd3c	; 0xd3c <setup_set_handedness>
    sei();
     d9a:	78 94       	sei
     d9c:	28 ec       	ldi	r18, 0xC8	; 200
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	5e e4       	ldi	r21, 0x4E	; 78
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <main+0x18>
     da4:	ca 01       	movw	r24, r20
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <main+0x14>

    /* wait for USB startup to get ready for debug output */
    uint8_t timeout = 200;  // timeout when USB is not available
    while (timeout-- && USB_DeviceState != DEVICE_STATE_Configured) {
     daa:	21 50       	subi	r18, 0x01	; 1
     dac:	2f 3f       	cpi	r18, 0xFF	; 255
     dae:	21 f0       	breq	.+8      	; 0xdb8 <main+0x26>
     db0:	80 91 f3 01 	lds	r24, 0x01F3
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	b1 f7       	brne	.-20     	; 0xda4 <main+0x12>
        USB_USBTask();
#endif
    }

    /* if (USB_DeviceState != DEVICE_STATE_Configured) { */
    if (!has_usb()) {
     db8:	0e 94 92 06 	call	0xd24	; 0xd24 <has_usb>
     dbc:	88 23       	and	r24, r24
     dbe:	39 f4       	brne	.+14     	; 0xdce <main+0x3c>
        // USB failed to connect, so run this device in slave mode.
        matrix_init();
     dc0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <matrix_init>
        serial_slave_init();
     dc4:	0e 94 ca 05 	call	0xb94	; 0xb94 <serial_slave_init>

        while (1) {
            matrix_slave_scan();
     dc8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <matrix_slave_scan>
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <main+0x36>
        }
    }

    /* init modules */
    keyboard_init();
     dce:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <keyboard_init>
    host_set_driver(&lufa_driver);
     dd2:	8c e0       	ldi	r24, 0x0C	; 12
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <host_set_driver>

#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif
#ifdef RGBLIGHT_ENABLE
        rgblight_init();
     dda:	0e 94 a3 0c 	call	0x1946	; 0x1946 <rgblight_init>
#endif
    while (1) {
        keyboard_task();
     dde:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <keyboard_task>
     de2:	fd cf       	rjmp	.-6      	; 0xdde <main+0x4c>

00000de4 <led_set>:

static int count = 0;

void led_set(uint8_t usb_led)
{
}
     de4:	08 95       	ret

00000de6 <ws2812_sendarray_mask>:
#define w_nop4  w_nop2 w_nop2
#define w_nop8  w_nop4 w_nop4
#define w_nop16 w_nop8 w_nop8

void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
     de6:	fc 01       	movw	r30, r24
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  masklo	=~maskhi&ws2812_PORTREG;
     de8:	81 b3       	in	r24, 0x11	; 17
     dea:	24 2f       	mov	r18, r20
     dec:	20 95       	com	r18
     dee:	28 23       	and	r18, r24
  maskhi |=        ws2812_PORTREG;
     df0:	91 b3       	in	r25, 0x11	; 17
     df2:	94 2b       	or	r25, r20
  sreg_prev=SREG;
     df4:	3f b7       	in	r19, 0x3f	; 63
  cli();
     df6:	f8 94       	cli
     df8:	12 c0       	rjmp	.+36     	; 0xe1e <loop28+0x20>

  while (datlen--) {
    curbyte=*data++;
     dfa:	81 91       	ld	r24, Z+

    asm volatile(
     dfc:	48 e0       	ldi	r20, 0x08	; 8

00000dfe <loop28>:
     dfe:	91 bb       	out	0x11, r25	; 17
     e00:	00 00       	nop
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <loop28+0x6>
     e04:	87 ff       	sbrs	r24, 7
     e06:	21 bb       	out	0x11, r18	; 17
     e08:	88 0f       	add	r24, r24
     e0a:	00 00       	nop
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <loop28+0x10>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <loop28+0x12>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <loop28+0x14>
     e12:	21 bb       	out	0x11, r18	; 17
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <loop28+0x18>
     e16:	4a 95       	dec	r20
     e18:	91 f7       	brne	.-28     	; 0xdfe <loop28>
     e1a:	61 50       	subi	r22, 0x01	; 1
     e1c:	70 40       	sbci	r23, 0x00	; 0
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();

  while (datlen--) {
     e1e:	61 15       	cp	r22, r1
     e20:	71 05       	cpc	r23, r1
     e22:	59 f7       	brne	.-42     	; 0xdfa <ws2812_sendarray_mask+0x14>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }

  SREG=sreg_prev;
     e24:	3f bf       	out	0x3f, r19	; 63
}
     e26:	08 95       	ret

00000e28 <ws2812_setleds_pin>:
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
     e28:	fb 01       	movw	r30, r22
  ws2812_DDRREG |= pinmask; // Enable DDR
     e2a:	20 b3       	in	r18, 0x10	; 16
     e2c:	24 2b       	or	r18, r20
     e2e:	20 bb       	out	0x10, r18	; 16
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	6e 0f       	add	r22, r30
     e36:	7f 1f       	adc	r23, r31
     e38:	0e 94 f3 06 	call	0xde6	; 0xde6 <ws2812_sendarray_mask>
     e3c:	88 ec       	ldi	r24, 0xC8	; 200
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <ws2812_setleds_pin+0x18>
  _delay_us(50);
}
     e44:	08 95       	ret

00000e46 <ws2812_setleds>:
#include "debug.h"

// Setleds for standard RGB
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
     e46:	40 e1       	ldi	r20, 0x10	; 16
     e48:	0e 94 14 07 	call	0xe28	; 0xe28 <ws2812_setleds_pin>
}
     e4c:	08 95       	ret

00000e4e <setrgb>:
		}
	}
  setrgb(r,g,b, led1);
}

void setrgb(uint8_t r, uint8_t g, uint8_t b, struct cRGB *led1) {
     e4e:	f9 01       	movw	r30, r18
  (*led1).r = r;
     e50:	81 83       	std	Z+1, r24	; 0x01
  (*led1).g = g;
     e52:	60 83       	st	Z, r22
  (*led1).b = b;
     e54:	42 83       	std	Z+2, r20	; 0x02
}
     e56:	08 95       	ret

00000e58 <sethsv>:
rgblight_config_t inmem_config;
struct cRGB led[RGBLED_NUM];
uint8_t rgblight_inited = 0;


void sethsv(uint16_t hue, uint8_t sat, uint8_t val, struct cRGB *led1) {
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	ec 01       	movw	r28, r24
     e6a:	e4 2f       	mov	r30, r20
     e6c:	69 01       	movw	r12, r18
	The DIM_CURVE is used only on brightness/value and on saturation (inverted).
	This looks the most natural.
	*/
  uint8_t r, g, b;

  val = pgm_read_byte(&DIM_CURVE[val]);
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	e0 52       	subi	r30, 0x20	; 32
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	e4 90       	lpm	r14, Z+
	sat = 255 - pgm_read_byte(&DIM_CURVE[255 - sat]);
     e76:	4f ef       	ldi	r20, 0xFF	; 255
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	fa 01       	movw	r30, r20
     e7c:	e6 1b       	sub	r30, r22
     e7e:	f1 09       	sbc	r31, r1
     e80:	e0 52       	subi	r30, 0x20	; 32
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	84 91       	lpm	r24, Z+
     e86:	80 95       	com	r24

	uint8_t base;

	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
     e88:	21 f4       	brne	.+8      	; 0xe92 <sethsv+0x3a>
     e8a:	6e 2d       	mov	r22, r14
     e8c:	9e 2d       	mov	r25, r14
     e8e:	4e 2d       	mov	r20, r14
     e90:	ba c0       	rjmp	.+372    	; 0x1006 <sethsv+0x1ae>
		r = val;
		g = val;
		b = val;
	} else  {
		base = ((255 - sat) * val) >> 8;
     e92:	ee 2d       	mov	r30, r14
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	48 1b       	sub	r20, r24
     e98:	51 09       	sbc	r21, r1
     e9a:	4e 9f       	mul	r20, r30
     e9c:	c0 01       	movw	r24, r0
     e9e:	4f 9f       	mul	r20, r31
     ea0:	90 0d       	add	r25, r0
     ea2:	5e 9f       	mul	r21, r30
     ea4:	90 0d       	add	r25, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	09 2f       	mov	r16, r25
     eaa:	11 27       	eor	r17, r17
     eac:	07 fd       	sbrc	r16, 7
     eae:	1a 95       	dec	r17

		switch (hue / 60) {
     eb0:	2c e3       	ldi	r18, 0x3C	; 60
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	ce 01       	movw	r24, r28
     eb6:	6c e3       	ldi	r22, 0x3C	; 60
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     ebe:	62 30       	cpi	r22, 0x02	; 2
     ec0:	71 05       	cpc	r23, r1
     ec2:	09 f4       	brne	.+2      	; 0xec6 <sethsv+0x6e>
     ec4:	41 c0       	rjmp	.+130    	; 0xf48 <sethsv+0xf0>
     ec6:	63 30       	cpi	r22, 0x03	; 3
     ec8:	71 05       	cpc	r23, r1
     eca:	40 f4       	brcc	.+16     	; 0xedc <sethsv+0x84>
     ecc:	61 15       	cp	r22, r1
     ece:	71 05       	cpc	r23, r1
     ed0:	91 f0       	breq	.+36     	; 0xef6 <sethsv+0x9e>
     ed2:	61 30       	cpi	r22, 0x01	; 1
     ed4:	71 05       	cpc	r23, r1
     ed6:	09 f0       	breq	.+2      	; 0xeda <sethsv+0x82>
     ed8:	96 c0       	rjmp	.+300    	; 0x1006 <sethsv+0x1ae>
     eda:	1e c0       	rjmp	.+60     	; 0xf18 <sethsv+0xc0>
     edc:	64 30       	cpi	r22, 0x04	; 4
     ede:	71 05       	cpc	r23, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <sethsv+0x8c>
     ee2:	62 c0       	rjmp	.+196    	; 0xfa8 <sethsv+0x150>
     ee4:	64 30       	cpi	r22, 0x04	; 4
     ee6:	71 05       	cpc	r23, r1
     ee8:	08 f4       	brcc	.+2      	; 0xeec <sethsv+0x94>
     eea:	46 c0       	rjmp	.+140    	; 0xf78 <sethsv+0x120>
     eec:	65 30       	cpi	r22, 0x05	; 5
     eee:	71 05       	cpc	r23, r1
     ef0:	09 f0       	breq	.+2      	; 0xef4 <sethsv+0x9c>
     ef2:	89 c0       	rjmp	.+274    	; 0x1006 <sethsv+0x1ae>
     ef4:	70 c0       	rjmp	.+224    	; 0xfd6 <sethsv+0x17e>
		case 0:
			r = val;
			g = (((val - base)*hue) / 60) + base;
     ef6:	e0 1b       	sub	r30, r16
     ef8:	f1 09       	sbc	r31, r1
     efa:	ec 9f       	mul	r30, r28
     efc:	c0 01       	movw	r24, r0
     efe:	ed 9f       	mul	r30, r29
     f00:	90 0d       	add	r25, r0
     f02:	fc 9f       	mul	r31, r28
     f04:	90 0d       	add	r25, r0
     f06:	11 24       	eor	r1, r1
     f08:	6c e3       	ldi	r22, 0x3C	; 60
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     f10:	96 2f       	mov	r25, r22
     f12:	90 0f       	add	r25, r16
     f14:	6e 2d       	mov	r22, r14
     f16:	16 c0       	rjmp	.+44     	; 0xf44 <sethsv+0xec>
			b = base;
			break;

		case 1:
			r = (((val - base)*(60 - (hue % 60))) / 60) + base;
     f18:	e0 1b       	sub	r30, r16
     f1a:	f1 09       	sbc	r31, r1
     f1c:	ce 01       	movw	r24, r28
     f1e:	6c e3       	ldi	r22, 0x3C	; 60
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     f26:	28 1b       	sub	r18, r24
     f28:	39 0b       	sbc	r19, r25
     f2a:	e2 9f       	mul	r30, r18
     f2c:	c0 01       	movw	r24, r0
     f2e:	e3 9f       	mul	r30, r19
     f30:	90 0d       	add	r25, r0
     f32:	f2 9f       	mul	r31, r18
     f34:	90 0d       	add	r25, r0
     f36:	11 24       	eor	r1, r1
     f38:	6c e3       	ldi	r22, 0x3C	; 60
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     f40:	60 0f       	add	r22, r16
     f42:	9e 2d       	mov	r25, r14
     f44:	40 2f       	mov	r20, r16
     f46:	5f c0       	rjmp	.+190    	; 0x1006 <sethsv+0x1ae>
			break;

		case 2:
			r = base;
			g = val;
			b = (((val - base)*(hue % 60)) / 60) + base;
     f48:	e0 1b       	sub	r30, r16
     f4a:	f1 09       	sbc	r31, r1
     f4c:	ce 01       	movw	r24, r28
     f4e:	6c e3       	ldi	r22, 0x3C	; 60
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     f56:	9c 01       	movw	r18, r24
     f58:	e2 9f       	mul	r30, r18
     f5a:	c0 01       	movw	r24, r0
     f5c:	e3 9f       	mul	r30, r19
     f5e:	90 0d       	add	r25, r0
     f60:	f2 9f       	mul	r31, r18
     f62:	90 0d       	add	r25, r0
     f64:	11 24       	eor	r1, r1
     f66:	6c e3       	ldi	r22, 0x3C	; 60
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     f6e:	46 2f       	mov	r20, r22
     f70:	40 0f       	add	r20, r16
     f72:	60 2f       	mov	r22, r16
     f74:	9e 2d       	mov	r25, r14
     f76:	47 c0       	rjmp	.+142    	; 0x1006 <sethsv+0x1ae>
			break;

		case 3:
			r = base;
			g = (((val - base)*(60 - (hue % 60))) / 60) + base;
     f78:	e0 1b       	sub	r30, r16
     f7a:	f1 09       	sbc	r31, r1
     f7c:	ce 01       	movw	r24, r28
     f7e:	6c e3       	ldi	r22, 0x3C	; 60
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     f86:	28 1b       	sub	r18, r24
     f88:	39 0b       	sbc	r19, r25
     f8a:	e2 9f       	mul	r30, r18
     f8c:	c0 01       	movw	r24, r0
     f8e:	e3 9f       	mul	r30, r19
     f90:	90 0d       	add	r25, r0
     f92:	f2 9f       	mul	r31, r18
     f94:	90 0d       	add	r25, r0
     f96:	11 24       	eor	r1, r1
     f98:	6c e3       	ldi	r22, 0x3C	; 60
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     fa0:	96 2f       	mov	r25, r22
     fa2:	90 0f       	add	r25, r16
     fa4:	60 2f       	mov	r22, r16
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <sethsv+0x17a>
			b = val;
			break;

		case 4:
			r = (((val - base)*(hue % 60)) / 60) + base;
     fa8:	e0 1b       	sub	r30, r16
     faa:	f1 09       	sbc	r31, r1
     fac:	ce 01       	movw	r24, r28
     fae:	6c e3       	ldi	r22, 0x3C	; 60
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     fb6:	9c 01       	movw	r18, r24
     fb8:	e2 9f       	mul	r30, r18
     fba:	c0 01       	movw	r24, r0
     fbc:	e3 9f       	mul	r30, r19
     fbe:	90 0d       	add	r25, r0
     fc0:	f2 9f       	mul	r31, r18
     fc2:	90 0d       	add	r25, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	6c e3       	ldi	r22, 0x3C	; 60
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     fce:	60 0f       	add	r22, r16
     fd0:	90 2f       	mov	r25, r16
     fd2:	4e 2d       	mov	r20, r14
     fd4:	18 c0       	rjmp	.+48     	; 0x1006 <sethsv+0x1ae>
			break;

		case 5:
			r = val;
			g = base;
			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
     fd6:	e0 1b       	sub	r30, r16
     fd8:	f1 09       	sbc	r31, r1
     fda:	ce 01       	movw	r24, r28
     fdc:	6c e3       	ldi	r22, 0x3C	; 60
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     fe4:	28 1b       	sub	r18, r24
     fe6:	39 0b       	sbc	r19, r25
     fe8:	e2 9f       	mul	r30, r18
     fea:	c0 01       	movw	r24, r0
     fec:	e3 9f       	mul	r30, r19
     fee:	90 0d       	add	r25, r0
     ff0:	f2 9f       	mul	r31, r18
     ff2:	90 0d       	add	r25, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	6c e3       	ldi	r22, 0x3C	; 60
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
     ffe:	46 2f       	mov	r20, r22
    1000:	40 0f       	add	r20, r16
    1002:	6e 2d       	mov	r22, r14
    1004:	90 2f       	mov	r25, r16
			break;
		}
	}
  setrgb(r,g,b, led1);
    1006:	86 2f       	mov	r24, r22
    1008:	69 2f       	mov	r22, r25
    100a:	96 01       	movw	r18, r12
    100c:	0e 94 27 07 	call	0xe4e	; 0xe4e <setrgb>
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	08 95       	ret

00001022 <rgblight_timer_init>:
}

// Animation timer -- AVR Timer3
void rgblight_timer_init(void) {
	static uint8_t rgblight_timer_is_init = 0;
	if (rgblight_timer_is_init) {
    1022:	80 91 3f 01 	lds	r24, 0x013F
    1026:	88 23       	and	r24, r24
    1028:	79 f4       	brne	.+30     	; 0x1048 <rgblight_timer_init+0x26>
		return;
	}
	rgblight_timer_is_init = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 3f 01 	sts	0x013F, r24
	/* Timer 3 setup */
	TCCR3B = _BV(WGM32) //CTC mode OCR3A as TOP
    1030:	89 e0       	ldi	r24, 0x09	; 9
    1032:	80 93 91 00 	sts	0x0091, r24
	      | _BV(CS30); //Clock selelct: clk/1
	/* Set TOP value */
	uint8_t sreg = SREG;
    1036:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1038:	f8 94       	cli
	OCR3AH = (RGBLED_TIMER_TOP>>8)&0xff;
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = RGBLED_TIMER_TOP&0xff;
    1040:	80 ed       	ldi	r24, 0xD0	; 208
    1042:	80 93 98 00 	sts	0x0098, r24
	SREG = sreg;
    1046:	9f bf       	out	0x3f, r25	; 63
    1048:	08 95       	ret

0000104a <rgblight_timer_enable>:
}
void rgblight_timer_enable(void) {
	TIMSK3 |= _BV(OCIE3A);
    104a:	e1 e7       	ldi	r30, 0x71	; 113
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	82 60       	ori	r24, 0x02	; 2
    1052:	80 83       	st	Z, r24
	dprintf("TIMER3 enabled.\n");
}
    1054:	08 95       	ret

00001056 <rgblight_timer_disable>:
void rgblight_timer_disable(void) {
	TIMSK3 &= ~_BV(OCIE3A);
    1056:	e1 e7       	ldi	r30, 0x71	; 113
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	80 83       	st	Z, r24
	dprintf("TIMER3 disabled.\n");
}
    1060:	08 95       	ret

00001062 <rgblight_set>:
  rgblight_set();

}

void rgblight_set(void) {
	if (rgblight_config.enable) {
    1062:	80 91 c3 01 	lds	r24, 0x01C3
    1066:	80 ff       	sbrs	r24, 0
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <rgblight_set+0xe>
		ws2812_setleds(led, RGBLED_NUM);
    106a:	8b ec       	ldi	r24, 0xCB	; 203
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	0c c0       	rjmp	.+24     	; 0x1088 <rgblight_set+0x26>
    1070:	eb ec       	ldi	r30, 0xCB	; 203
    1072:	f1 e0       	ldi	r31, 0x01	; 1
	} else {
		for (uint8_t i=0;i<RGBLED_NUM;i++) {
	    led[i].r = 0;
    1074:	11 82       	std	Z+1, r1	; 0x01
	    led[i].g = 0;
    1076:	10 82       	st	Z, r1
	    led[i].b = 0;
    1078:	12 82       	std	Z+2, r1	; 0x02
    107a:	33 96       	adiw	r30, 0x03	; 3

void rgblight_set(void) {
	if (rgblight_config.enable) {
		ws2812_setleds(led, RGBLED_NUM);
	} else {
		for (uint8_t i=0;i<RGBLED_NUM;i++) {
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	ef 3e       	cpi	r30, 0xEF	; 239
    1080:	f8 07       	cpc	r31, r24
    1082:	c1 f7       	brne	.-16     	; 0x1074 <rgblight_set+0x12>
	    led[i].r = 0;
	    led[i].g = 0;
	    led[i].b = 0;
	  }
		ws2812_setleds(led, RGBLED_NUM);
    1084:	cf 01       	movw	r24, r30
    1086:	84 97       	sbiw	r24, 0x24	; 36
    1088:	6c e0       	ldi	r22, 0x0C	; 12
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	0e 94 23 07 	call	0xe46	; 0xe46 <ws2812_setleds>
    1090:	08 95       	ret

00001092 <rgblight_effect_knight>:
		pos = (pos+1)%RGBLED_NUM;
	}

}

void rgblight_effect_knight(uint8_t interval) {
    1092:	7f 92       	push	r7
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	a4 97       	sbiw	r28, 0x24	; 36
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	18 2f       	mov	r17, r24
	static uint16_t last_timer = 0;
	uint8_t i,j,cur;
	int8_t k;
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
    10be:	80 91 2e 01 	lds	r24, 0x012E
    10c2:	90 91 2f 01 	lds	r25, 0x012F
    10c6:	0e 94 1d 18 	call	0x303a	; 0x303a <timer_elapsed>
    10ca:	e1 2f       	mov	r30, r17
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	e3 51       	subi	r30, 0x13	; 19
    10d0:	fc 4f       	sbci	r31, 0xFC	; 252
    10d2:	24 91       	lpm	r18, Z+
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	82 17       	cp	r24, r18
    10d8:	93 07       	cpc	r25, r19
    10da:	08 f4       	brcc	.+2      	; 0x10de <rgblight_effect_knight+0x4c>
    10dc:	92 c0       	rjmp	.+292    	; 0x1202 <rgblight_effect_knight+0x170>
	last_timer = timer_read();
    10de:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    10e2:	90 93 2f 01 	sts	0x012F, r25
    10e6:	80 93 2e 01 	sts	0x012E, r24
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
		preled[i].g=0;
		preled[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
			k = pos+j*increament;
    10ea:	70 90 30 01 	lds	r7, 0x0130
    10ee:	80 91 02 01 	lds	r24, 0x0102
    10f2:	a8 2e       	mov	r10, r24
    10f4:	bb 24       	eor	r11, r11
    10f6:	a7 fc       	sbrc	r10, 7
    10f8:	b0 94       	com	r11
    10fa:	8e 01       	movw	r16, r28
    10fc:	0f 5f       	subi	r16, 0xFF	; 255
    10fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1100:	ee 24       	eor	r14, r14
    1102:	ff 24       	eor	r15, r15
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
    1104:	d8 01       	movw	r26, r16
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	1c 92       	st	X, r1
    110a:	11 97       	sbiw	r26, 0x01	; 1
		preled[i].g=0;
    110c:	1c 92       	st	X, r1
		preled[i].b=0;
    110e:	12 96       	adiw	r26, 0x02	; 2
    1110:	1c 92       	st	X, r1
    1112:	48 01       	movw	r8, r16
    1114:	cc 24       	eor	r12, r12
    1116:	57 e0       	ldi	r21, 0x07	; 7
    1118:	d5 2e       	mov	r13, r21
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
			k = pos+j*increament;
    111a:	ca 9c       	mul	r12, r10
    111c:	80 2d       	mov	r24, r0
    111e:	11 24       	eor	r1, r1
    1120:	87 0d       	add	r24, r7
			if (k<0) k = 0;
    1122:	87 ff       	sbrs	r24, 7
    1124:	02 c0       	rjmp	.+4      	; 0x112a <rgblight_effect_knight+0x98>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <rgblight_effect_knight+0x9e>
			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
    112a:	8c 30       	cpi	r24, 0x0C	; 12
    112c:	0c f0       	brlt	.+2      	; 0x1130 <rgblight_effect_knight+0x9e>
    112e:	8b e0       	ldi	r24, 0x0B	; 11
			if (i==k) {
    1130:	99 27       	eor	r25, r25
    1132:	87 fd       	sbrc	r24, 7
    1134:	90 95       	com	r25
    1136:	e8 16       	cp	r14, r24
    1138:	f9 06       	cpc	r15, r25
    113a:	a1 f4       	brne	.+40     	; 0x1164 <rgblight_effect_knight+0xd2>
				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
    113c:	20 91 c3 01 	lds	r18, 0x01C3
    1140:	22 1f       	adc	r18, r18
    1142:	22 27       	eor	r18, r18
    1144:	22 1f       	adc	r18, r18
    1146:	90 91 c4 01 	lds	r25, 0x01C4
    114a:	89 2f       	mov	r24, r25
    114c:	88 0f       	add	r24, r24
    114e:	82 2b       	or	r24, r18
    1150:	99 1f       	adc	r25, r25
    1152:	99 27       	eor	r25, r25
    1154:	99 1f       	adc	r25, r25
    1156:	60 91 c5 01 	lds	r22, 0x01C5
    115a:	40 91 c6 01 	lds	r20, 0x01C6
    115e:	94 01       	movw	r18, r8
    1160:	0e 94 2c 07 	call	0xe58	; 0xe58 <sethsv>
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
		preled[i].g=0;
		preled[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
    1164:	c3 94       	inc	r12
    1166:	da 94       	dec	r13
    1168:	c1 f6       	brne	.-80     	; 0x111a <rgblight_effect_knight+0x88>
    116a:	08 94       	sec
    116c:	e1 1c       	adc	r14, r1
    116e:	f1 1c       	adc	r15, r1
    1170:	0d 5f       	subi	r16, 0xFD	; 253
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
	int8_t k;
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
    1174:	bc e0       	ldi	r27, 0x0C	; 12
    1176:	eb 16       	cp	r14, r27
    1178:	f1 04       	cpc	r15, r1
    117a:	21 f6       	brne	.-120    	; 0x1104 <rgblight_effect_knight+0x72>
    117c:	2b ec       	ldi	r18, 0xCB	; 203
    117e:	31 e0       	ldi	r19, 0x01	; 1
    1180:	0b e0       	ldi	r16, 0x0B	; 11
    1182:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
			cur = (i+RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
			led[i].r = preled[cur].r;
    1184:	7e 01       	movw	r14, r28
    1186:	08 94       	sec
    1188:	e1 1c       	adc	r14, r1
    118a:	f1 1c       	adc	r15, r1
    118c:	c8 01       	movw	r24, r16
    118e:	6c e0       	ldi	r22, 0x0C	; 12
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	0e 94 b5 22 	call	0x456a	; 0x456a <__divmodhi4>
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	fc 01       	movw	r30, r24
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	e8 0f       	add	r30, r24
    11a0:	f9 1f       	adc	r31, r25
    11a2:	ee 0d       	add	r30, r14
    11a4:	ff 1d       	adc	r31, r15
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	d9 01       	movw	r26, r18
    11aa:	11 96       	adiw	r26, 0x01	; 1
    11ac:	8c 93       	st	X, r24
    11ae:	11 97       	sbiw	r26, 0x01	; 1
			led[i].g = preled[cur].g;
    11b0:	80 81       	ld	r24, Z
    11b2:	8c 93       	st	X, r24
			led[i].b = preled[cur].b;
    11b4:	82 81       	ldd	r24, Z+2	; 0x02
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	8c 93       	st	X, r24
    11ba:	0f 5f       	subi	r16, 0xFF	; 255
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	2d 5f       	subi	r18, 0xFD	; 253
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
			}
		}
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
    11c2:	07 31       	cpi	r16, 0x17	; 23
    11c4:	11 05       	cpc	r17, r1
    11c6:	11 f7       	brne	.-60     	; 0x118c <rgblight_effect_knight+0xfa>
			led[i].r = preled[cur].r;
			led[i].g = preled[cur].g;
			led[i].b = preled[cur].b;
		}
	}
	rgblight_set();
    11c8:	0e 94 31 08 	call	0x1062	; 0x1062 <rgblight_set>
	if (increament == 1) {
    11cc:	80 91 02 01 	lds	r24, 0x0102
    11d0:	90 91 30 01 	lds	r25, 0x0130
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	49 f4       	brne	.+18     	; 0x11ea <rgblight_effect_knight+0x158>
		if (pos - 1 < 0 - RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
    11d8:	9a 3f       	cpi	r25, 0xFA	; 250
    11da:	2c f4       	brge	.+10     	; 0x11e6 <rgblight_effect_knight+0x154>
			pos = 0- RGBLIGHT_EFFECT_KNIGHT_LENGTH;
    11dc:	89 ef       	ldi	r24, 0xF9	; 249
    11de:	80 93 30 01 	sts	0x0130, r24
			increament = -1;
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <rgblight_effect_knight+0x164>
		} else {
			pos -= 1;
    11e6:	91 50       	subi	r25, 0x01	; 1
    11e8:	0a c0       	rjmp	.+20     	; 0x11fe <rgblight_effect_knight+0x16c>
		}
	} else {
		if (pos+1>RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
    11ea:	93 31       	cpi	r25, 0x13	; 19
    11ec:	3c f0       	brlt	.+14     	; 0x11fc <rgblight_effect_knight+0x16a>
			pos = RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH-1;
    11ee:	82 e1       	ldi	r24, 0x12	; 18
    11f0:	80 93 30 01 	sts	0x0130, r24
			increament = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 02 01 	sts	0x0102, r24
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <rgblight_effect_knight+0x170>
		} else {
			pos += 1;
    11fc:	9f 5f       	subi	r25, 0xFF	; 255
    11fe:	90 93 30 01 	sts	0x0130, r25
		}
	}

}
    1202:	a4 96       	adiw	r28, 0x24	; 36
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	df 90       	pop	r13
    121c:	cf 90       	pop	r12
    121e:	bf 90       	pop	r11
    1220:	af 90       	pop	r10
    1222:	9f 90       	pop	r9
    1224:	8f 90       	pop	r8
    1226:	7f 90       	pop	r7
    1228:	08 95       	ret

0000122a <rgblight_effect_snake>:
			current_hue = current_hue - 1;
		}

	}
}
void rgblight_effect_snake(uint8_t interval) {
    122a:	9f 92       	push	r9
    122c:	af 92       	push	r10
    122e:	bf 92       	push	r11
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	18 2f       	mov	r17, r24
	static uint8_t pos=0;
	static uint16_t last_timer = 0;
	uint8_t i,j;
	int8_t k;
	int8_t increament = 1;
	if (interval%2) increament = -1;
    1242:	80 fd       	sbrc	r24, 0
    1244:	03 c0       	rjmp	.+6      	; 0x124c <rgblight_effect_snake+0x22>
    1246:	cc 24       	eor	r12, r12
    1248:	c3 94       	inc	r12
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <rgblight_effect_snake+0x26>
    124c:	cc 24       	eor	r12, r12
    124e:	ca 94       	dec	r12
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
    1250:	80 91 31 01 	lds	r24, 0x0131
    1254:	90 91 32 01 	lds	r25, 0x0132
    1258:	0e 94 1d 18 	call	0x303a	; 0x303a <timer_elapsed>
    125c:	16 95       	lsr	r17
    125e:	e1 2f       	mov	r30, r17
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	e6 51       	subi	r30, 0x16	; 22
    1264:	fc 4f       	sbci	r31, 0xFC	; 252
    1266:	e4 91       	lpm	r30, Z+
    1268:	2e 2f       	mov	r18, r30
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	82 17       	cp	r24, r18
    126e:	93 07       	cpc	r25, r19
    1270:	08 f4       	brcc	.+2      	; 0x1274 <rgblight_effect_snake+0x4a>
    1272:	63 c0       	rjmp	.+198    	; 0x133a <rgblight_effect_snake+0x110>
	last_timer = timer_read();
    1274:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    1278:	90 93 32 01 	sts	0x0132, r25
    127c:	80 93 31 01 	sts	0x0131, r24
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
		led[i].g=0;
		led[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
			k = pos+j*increament;
    1280:	90 90 33 01 	lds	r9, 0x0133
    1284:	cb ec       	ldi	r28, 0xCB	; 203
    1286:	d1 e0       	ldi	r29, 0x01	; 1
    1288:	ee 24       	eor	r14, r14
    128a:	ff 24       	eor	r15, r15
	int8_t increament = 1;
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
    128c:	19 82       	std	Y+1, r1	; 0x01
		led[i].g=0;
    128e:	18 82       	st	Y, r1
		led[i].b=0;
    1290:	1a 82       	std	Y+2, r1	; 0x02
    1292:	5e 01       	movw	r10, r28
    1294:	d9 2c       	mov	r13, r9
    1296:	07 e0       	ldi	r16, 0x07	; 7
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	8d 2d       	mov	r24, r13
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
			k = pos+j*increament;
			if (k<0) k = k+RGBLED_NUM;
    129c:	d7 fc       	sbrc	r13, 7
    129e:	84 5f       	subi	r24, 0xF4	; 244
			if (i==k) {
    12a0:	99 27       	eor	r25, r25
    12a2:	87 fd       	sbrc	r24, 7
    12a4:	90 95       	com	r25
    12a6:	e8 16       	cp	r14, r24
    12a8:	f9 06       	cpc	r15, r25
    12aa:	21 f5       	brne	.+72     	; 0x12f4 <rgblight_effect_snake+0xca>
				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE_LENGTH), &led[i]);
    12ac:	20 91 c3 01 	lds	r18, 0x01C3
    12b0:	22 1f       	adc	r18, r18
    12b2:	22 27       	eor	r18, r18
    12b4:	22 1f       	adc	r18, r18
    12b6:	30 91 c4 01 	lds	r19, 0x01C4
    12ba:	e3 2f       	mov	r30, r19
    12bc:	ee 0f       	add	r30, r30
    12be:	80 91 c6 01 	lds	r24, 0x01C6
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	ac 01       	movw	r20, r24
    12c6:	04 9f       	mul	r16, r20
    12c8:	c0 01       	movw	r24, r0
    12ca:	05 9f       	mul	r16, r21
    12cc:	90 0d       	add	r25, r0
    12ce:	14 9f       	mul	r17, r20
    12d0:	90 0d       	add	r25, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	67 e0       	ldi	r22, 0x07	; 7
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	0e 94 b5 22 	call	0x456a	; 0x456a <__divmodhi4>
    12dc:	46 2f       	mov	r20, r22
    12de:	8e 2f       	mov	r24, r30
    12e0:	82 2b       	or	r24, r18
    12e2:	93 2f       	mov	r25, r19
    12e4:	99 1f       	adc	r25, r25
    12e6:	99 27       	eor	r25, r25
    12e8:	99 1f       	adc	r25, r25
    12ea:	60 91 c5 01 	lds	r22, 0x01C5
    12ee:	95 01       	movw	r18, r10
    12f0:	0e 94 2c 07 	call	0xe58	; 0xe58 <sethsv>
    12f4:	dc 0c       	add	r13, r12
    12f6:	01 50       	subi	r16, 0x01	; 1
    12f8:	10 40       	sbci	r17, 0x00	; 0
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
		led[i].g=0;
		led[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
    12fa:	00 23       	and	r16, r16
    12fc:	71 f6       	brne	.-100    	; 0x129a <rgblight_effect_snake+0x70>
    12fe:	08 94       	sec
    1300:	e1 1c       	adc	r14, r1
    1302:	f1 1c       	adc	r15, r1
    1304:	23 96       	adiw	r28, 0x03	; 3
	int8_t k;
	int8_t increament = 1;
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
    1306:	5c e0       	ldi	r21, 0x0C	; 12
    1308:	e5 16       	cp	r14, r21
    130a:	f1 04       	cpc	r15, r1
    130c:	09 f0       	breq	.+2      	; 0x1310 <rgblight_effect_snake+0xe6>
    130e:	be cf       	rjmp	.-132    	; 0x128c <rgblight_effect_snake+0x62>
			if (i==k) {
				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE_LENGTH), &led[i]);
			}
		}
	}
	rgblight_set();
    1310:	0e 94 31 08 	call	0x1062	; 0x1062 <rgblight_set>
    1314:	80 91 33 01 	lds	r24, 0x0133
	if (increament == 1) {
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	c9 16       	cp	r12, r25
    131c:	31 f4       	brne	.+12     	; 0x132a <rgblight_effect_snake+0x100>
		if (pos - 1 < 0) {
    131e:	88 23       	and	r24, r24
    1320:	11 f4       	brne	.+4      	; 0x1326 <rgblight_effect_snake+0xfc>
			pos = 13;
    1322:	8d e0       	ldi	r24, 0x0D	; 13
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <rgblight_effect_snake+0x10c>
		} else {
			pos -= 1;
    1326:	81 50       	subi	r24, 0x01	; 1
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <rgblight_effect_snake+0x10c>
		}
	} else {
		pos = (pos+1)%RGBLED_NUM;
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	6c e0       	ldi	r22, 0x0C	; 12
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	0e 94 b5 22 	call	0x456a	; 0x456a <__divmodhi4>
    1336:	80 93 33 01 	sts	0x0133, r24
	}

}
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	bf 90       	pop	r11
    134c:	af 90       	pop	r10
    134e:	9f 90       	pop	r9
    1350:	08 95       	ret

00001352 <rgblight_effect_rainbow_swirl>:
	last_timer = timer_read();
	rgblight_sethsv_noeeprom(current_hue, rgblight_config.sat, rgblight_config.val);
	current_hue = (current_hue+1) % 360;
}

void rgblight_effect_rainbow_swirl(uint8_t interval) {
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	f8 2e       	mov	r15, r24
	static uint16_t current_hue=0;
	static uint16_t last_timer = 0;
	uint16_t hue;
	uint8_t i;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
    135e:	80 91 34 01 	lds	r24, 0x0134
    1362:	90 91 35 01 	lds	r25, 0x0135
    1366:	0e 94 1d 18 	call	0x303a	; 0x303a <timer_elapsed>
    136a:	ef 2d       	mov	r30, r15
    136c:	e6 95       	lsr	r30
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	ec 51       	subi	r30, 0x1C	; 28
    1372:	fc 4f       	sbci	r31, 0xFC	; 252
    1374:	e4 91       	lpm	r30, Z+
    1376:	2e 2f       	mov	r18, r30
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	82 17       	cp	r24, r18
    137c:	93 07       	cpc	r25, r19
    137e:	90 f1       	brcs	.+100    	; 0x13e4 <rgblight_effect_rainbow_swirl+0x92>
	last_timer = timer_read();
    1380:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    1384:	90 93 35 01 	sts	0x0135, r25
    1388:	80 93 34 01 	sts	0x0134, r24
	for (i=0; i<RGBLED_NUM; i++) {
		hue = (360/RGBLED_NUM*i+current_hue)%360;
    138c:	00 91 36 01 	lds	r16, 0x0136
    1390:	10 91 37 01 	lds	r17, 0x0137
    1394:	cb ec       	ldi	r28, 0xCB	; 203
    1396:	d1 e0       	ldi	r29, 0x01	; 1
		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
    1398:	c8 01       	movw	r24, r16
    139a:	68 e6       	ldi	r22, 0x68	; 104
    139c:	71 e0       	ldi	r23, 0x01	; 1
    139e:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
    13a2:	60 91 c5 01 	lds	r22, 0x01C5
    13a6:	40 91 c6 01 	lds	r20, 0x01C6
    13aa:	9e 01       	movw	r18, r28
    13ac:	0e 94 2c 07 	call	0xe58	; 0xe58 <sethsv>
    13b0:	02 5e       	subi	r16, 0xE2	; 226
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	23 96       	adiw	r28, 0x03	; 3
	static uint16_t last_timer = 0;
	uint16_t hue;
	uint8_t i;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0; i<RGBLED_NUM; i++) {
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	cf 3e       	cpi	r28, 0xEF	; 239
    13ba:	d8 07       	cpc	r29, r24
    13bc:	69 f7       	brne	.-38     	; 0x1398 <rgblight_effect_rainbow_swirl+0x46>
		hue = (360/RGBLED_NUM*i+current_hue)%360;
		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
	}
	rgblight_set();
    13be:	0e 94 31 08 	call	0x1062	; 0x1062 <rgblight_set>
    13c2:	80 91 36 01 	lds	r24, 0x0136
    13c6:	90 91 37 01 	lds	r25, 0x0137

	if (interval % 2) {
    13ca:	f0 fe       	sbrs	r15, 0
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <rgblight_effect_rainbow_swirl+0x88>
		current_hue = (current_hue+1) % 360;
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	68 e6       	ldi	r22, 0x68	; 104
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <rgblight_effect_rainbow_swirl+0x8a>
	} else {
		if (current_hue -1 < 0) {
			current_hue = 359;
		} else {
			current_hue = current_hue - 1;
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	90 93 37 01 	sts	0x0137, r25
    13e0:	80 93 36 01 	sts	0x0136, r24
		}

	}
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	08 95       	ret

000013f0 <rgblight_setrgb>:
		eeconfig_write_rgblight(rgblight_config.raw);
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}

void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
    13f0:	eb ec       	ldi	r30, 0xCB	; 203
    13f2:	f1 e0       	ldi	r31, 0x01	; 1
  // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
  for (uint8_t i=0;i<RGBLED_NUM;i++) {
    led[i].r = r;
    13f4:	81 83       	std	Z+1, r24	; 0x01
    led[i].g = g;
    13f6:	60 83       	st	Z, r22
    led[i].b = b;
    13f8:	42 83       	std	Z+2, r20	; 0x02
    13fa:	33 96       	adiw	r30, 0x03	; 3
  }
}

void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
  // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
  for (uint8_t i=0;i<RGBLED_NUM;i++) {
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	ef 3e       	cpi	r30, 0xEF	; 239
    1400:	f9 07       	cpc	r31, r25
    1402:	c1 f7       	brne	.-16     	; 0x13f4 <rgblight_setrgb+0x4>
    led[i].r = r;
    led[i].g = g;
    led[i].b = b;
  }
  rgblight_set();
    1404:	0e 94 31 08 	call	0x1062	; 0x1062 <rgblight_set>

}
    1408:	08 95       	ret

0000140a <rgblight_sethsv_noeeprom>:
    val = rgblight_config.val-RGBLIGHT_VAL_STEP;
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
}

void rgblight_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val){
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <rgblight_sethsv_noeeprom+0xe>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	18 2f       	mov	r17, r24
    1420:	09 2f       	mov	r16, r25
    1422:	f6 2e       	mov	r15, r22
    1424:	e4 2e       	mov	r14, r20
	inmem_config.raw = rgblight_config.raw;
    1426:	80 91 c3 01 	lds	r24, 0x01C3
    142a:	90 91 c4 01 	lds	r25, 0x01C4
    142e:	a0 91 c5 01 	lds	r26, 0x01C5
    1432:	b0 91 c6 01 	lds	r27, 0x01C6
    1436:	80 93 c7 01 	sts	0x01C7, r24
    143a:	90 93 c8 01 	sts	0x01C8, r25
    143e:	a0 93 c9 01 	sts	0x01C9, r26
    1442:	b0 93 ca 01 	sts	0x01CA, r27
  if (rgblight_config.enable) {
    1446:	80 91 c3 01 	lds	r24, 0x01C3
    144a:	80 ff       	sbrs	r24, 0
    144c:	21 c0       	rjmp	.+66     	; 0x1490 <rgblight_sethsv_noeeprom+0x86>
    struct cRGB tmp_led;
    sethsv(hue, sat, val, &tmp_led);
    144e:	81 2f       	mov	r24, r17
    1450:	90 2f       	mov	r25, r16
    1452:	9e 01       	movw	r18, r28
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	0e 94 2c 07 	call	0xe58	; 0xe58 <sethsv>
		inmem_config.hue = hue;
    145c:	91 2f       	mov	r25, r17
    145e:	97 95       	ror	r25
    1460:	99 27       	eor	r25, r25
    1462:	97 95       	ror	r25
    1464:	80 91 c7 01 	lds	r24, 0x01C7
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	89 2b       	or	r24, r25
    146c:	80 93 c7 01 	sts	0x01C7, r24
    1470:	07 95       	ror	r16
    1472:	00 27       	eor	r16, r16
    1474:	07 95       	ror	r16
    1476:	16 95       	lsr	r17
    1478:	10 2b       	or	r17, r16
    147a:	10 93 c8 01 	sts	0x01C8, r17
		inmem_config.sat = sat;
    147e:	f0 92 c9 01 	sts	0x01C9, r15
		inmem_config.val = val;
    1482:	e0 92 ca 01 	sts	0x01CA, r14
    // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_config.val);
    rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	69 81       	ldd	r22, Y+1	; 0x01
    148a:	4b 81       	ldd	r20, Y+3	; 0x03
    148c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <rgblight_setrgb>
  }
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	08 95       	ret

000014a4 <rgblight_effect_rainbow_mood>:

	rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, pgm_read_byte(&RGBLED_BREATHING_TABLE[pos]));
	pos = (pos+1) % 256;
}

void rgblight_effect_rainbow_mood(uint8_t interval) {
    14a4:	1f 93       	push	r17
    14a6:	18 2f       	mov	r17, r24
	static uint16_t current_hue=0;
	static uint16_t last_timer = 0;

	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval])) return;
    14a8:	80 91 38 01 	lds	r24, 0x0138
    14ac:	90 91 39 01 	lds	r25, 0x0139
    14b0:	0e 94 1d 18 	call	0x303a	; 0x303a <timer_elapsed>
    14b4:	e1 2f       	mov	r30, r17
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	ec 51       	subi	r30, 0x1C	; 28
    14ba:	fc 4f       	sbci	r31, 0xFC	; 252
    14bc:	24 91       	lpm	r18, Z+
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	82 17       	cp	r24, r18
    14c2:	93 07       	cpc	r25, r19
    14c4:	e8 f0       	brcs	.+58     	; 0x1500 <rgblight_effect_rainbow_mood+0x5c>
	last_timer = timer_read();
    14c6:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    14ca:	90 93 39 01 	sts	0x0139, r25
    14ce:	80 93 38 01 	sts	0x0138, r24
	rgblight_sethsv_noeeprom(current_hue, rgblight_config.sat, rgblight_config.val);
    14d2:	80 91 3a 01 	lds	r24, 0x013A
    14d6:	90 91 3b 01 	lds	r25, 0x013B
    14da:	60 91 c5 01 	lds	r22, 0x01C5
    14de:	40 91 c6 01 	lds	r20, 0x01C6
    14e2:	0e 94 05 0a 	call	0x140a	; 0x140a <rgblight_sethsv_noeeprom>
	current_hue = (current_hue+1) % 360;
    14e6:	80 91 3a 01 	lds	r24, 0x013A
    14ea:	90 91 3b 01 	lds	r25, 0x013B
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	68 e6       	ldi	r22, 0x68	; 104
    14f2:	71 e0       	ldi	r23, 0x01	; 1
    14f4:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodhi4>
    14f8:	90 93 3b 01 	sts	0x013B, r25
    14fc:	80 93 3a 01 	sts	0x013A, r24
}
    1500:	1f 91       	pop	r17
    1502:	08 95       	ret

00001504 <rgblight_effect_breathing>:
		rgblight_effect_knight(rgblight_config.mode-21);
	}
}

// effects
void rgblight_effect_breathing(uint8_t interval) {
    1504:	1f 93       	push	r17
    1506:	18 2f       	mov	r17, r24
	static uint8_t pos = 0;
	static uint16_t last_timer = 0;

	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_BREATHING_INTERVALS[interval])) return;
    1508:	80 91 3c 01 	lds	r24, 0x013C
    150c:	90 91 3d 01 	lds	r25, 0x013D
    1510:	0e 94 1d 18 	call	0x303a	; 0x303a <timer_elapsed>
    1514:	e1 2f       	mov	r30, r17
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	e0 52       	subi	r30, 0x20	; 32
    151a:	fc 4f       	sbci	r31, 0xFC	; 252
    151c:	24 91       	lpm	r18, Z+
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	82 17       	cp	r24, r18
    1522:	93 07       	cpc	r25, r19
    1524:	18 f1       	brcs	.+70     	; 0x156c <rgblight_effect_breathing+0x68>
	last_timer = timer_read();
    1526:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    152a:	90 93 3d 01 	sts	0x013D, r25
    152e:	80 93 3c 01 	sts	0x013C, r24

	rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, pgm_read_byte(&RGBLED_BREATHING_TABLE[pos]));
    1532:	e0 91 3e 01 	lds	r30, 0x013E
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	e0 52       	subi	r30, 0x20	; 32
    153a:	fd 4f       	sbci	r31, 0xFD	; 253
    153c:	e4 91       	lpm	r30, Z+
    153e:	20 91 c3 01 	lds	r18, 0x01C3
    1542:	22 1f       	adc	r18, r18
    1544:	22 27       	eor	r18, r18
    1546:	22 1f       	adc	r18, r18
    1548:	90 91 c4 01 	lds	r25, 0x01C4
    154c:	89 2f       	mov	r24, r25
    154e:	88 0f       	add	r24, r24
    1550:	82 2b       	or	r24, r18
    1552:	99 1f       	adc	r25, r25
    1554:	99 27       	eor	r25, r25
    1556:	99 1f       	adc	r25, r25
    1558:	60 91 c5 01 	lds	r22, 0x01C5
    155c:	4e 2f       	mov	r20, r30
    155e:	0e 94 05 0a 	call	0x140a	; 0x140a <rgblight_sethsv_noeeprom>
	pos = (pos+1) % 256;
    1562:	80 91 3e 01 	lds	r24, 0x013E
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	80 93 3e 01 	sts	0x013E, r24
}
    156c:	1f 91       	pop	r17
    156e:	08 95       	ret

00001570 <__vector_32>:
void rgblight_timer_toggle(void) {
	TIMSK3 ^= _BV(OCIE3A);
	dprintf("TIMER3 toggled.\n");
}

ISR(TIMER3_COMPA_vect) {
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	2f 93       	push	r18
    157c:	3f 93       	push	r19
    157e:	4f 93       	push	r20
    1580:	5f 93       	push	r21
    1582:	6f 93       	push	r22
    1584:	7f 93       	push	r23
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	af 93       	push	r26
    158c:	bf 93       	push	r27
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
	// Mode = 1, static light, do nothing here
	if (rgblight_config.mode>=2 && rgblight_config.mode<=5) {
    1592:	90 91 c3 01 	lds	r25, 0x01C3
    1596:	96 95       	lsr	r25
    1598:	9f 73       	andi	r25, 0x3F	; 63
    159a:	89 2f       	mov	r24, r25
    159c:	82 5c       	subi	r24, 0xC2	; 194
    159e:	8f 73       	andi	r24, 0x3F	; 63
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	28 f4       	brcc	.+10     	; 0x15ae <__vector_32+0x3e>
		// mode = 2 to 5, breathing mode
		rgblight_effect_breathing(rgblight_config.mode-2);
    15a4:	89 2f       	mov	r24, r25
    15a6:	82 50       	subi	r24, 0x02	; 2
    15a8:	0e 94 82 0a 	call	0x1504	; 0x1504 <rgblight_effect_breathing>
    15ac:	27 c0       	rjmp	.+78     	; 0x15fc <__vector_32+0x8c>

	} else if (rgblight_config.mode>=6 && rgblight_config.mode<=8) {
    15ae:	89 2f       	mov	r24, r25
    15b0:	86 5c       	subi	r24, 0xC6	; 198
    15b2:	8f 73       	andi	r24, 0x3F	; 63
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	28 f4       	brcc	.+10     	; 0x15c2 <__vector_32+0x52>
		rgblight_effect_rainbow_mood(rgblight_config.mode-6);
    15b8:	89 2f       	mov	r24, r25
    15ba:	86 50       	subi	r24, 0x06	; 6
    15bc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <rgblight_effect_rainbow_mood>
    15c0:	1d c0       	rjmp	.+58     	; 0x15fc <__vector_32+0x8c>
	} else if (rgblight_config.mode>=9 && rgblight_config.mode<=14) {
    15c2:	89 2f       	mov	r24, r25
    15c4:	89 5c       	subi	r24, 0xC9	; 201
    15c6:	8f 73       	andi	r24, 0x3F	; 63
    15c8:	86 30       	cpi	r24, 0x06	; 6
    15ca:	28 f4       	brcc	.+10     	; 0x15d6 <__vector_32+0x66>
		rgblight_effect_rainbow_swirl(rgblight_config.mode-9);
    15cc:	89 2f       	mov	r24, r25
    15ce:	89 50       	subi	r24, 0x09	; 9
    15d0:	0e 94 a9 09 	call	0x1352	; 0x1352 <rgblight_effect_rainbow_swirl>
    15d4:	13 c0       	rjmp	.+38     	; 0x15fc <__vector_32+0x8c>
	} else if (rgblight_config.mode>=15 && rgblight_config.mode<=20) {
    15d6:	89 2f       	mov	r24, r25
    15d8:	8f 5c       	subi	r24, 0xCF	; 207
    15da:	8f 73       	andi	r24, 0x3F	; 63
    15dc:	86 30       	cpi	r24, 0x06	; 6
    15de:	28 f4       	brcc	.+10     	; 0x15ea <__vector_32+0x7a>
		rgblight_effect_snake(rgblight_config.mode-15);
    15e0:	89 2f       	mov	r24, r25
    15e2:	8f 50       	subi	r24, 0x0F	; 15
    15e4:	0e 94 15 09 	call	0x122a	; 0x122a <rgblight_effect_snake>
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <__vector_32+0x8c>
	} else if (rgblight_config.mode>=21 && rgblight_config.mode<=23) {
    15ea:	89 2f       	mov	r24, r25
    15ec:	85 5d       	subi	r24, 0xD5	; 213
    15ee:	8f 73       	andi	r24, 0x3F	; 63
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	20 f4       	brcc	.+8      	; 0x15fc <__vector_32+0x8c>
		rgblight_effect_knight(rgblight_config.mode-21);
    15f4:	89 2f       	mov	r24, r25
    15f6:	85 51       	subi	r24, 0x15	; 21
    15f8:	0e 94 49 08 	call	0x1092	; 0x1092 <rgblight_effect_knight>
	}
}
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <eeconfig_write_rgblight>:


uint32_t eeconfig_read_rgblight(void) {
  return eeprom_read_dword(EECONFIG_RGBLIGHT);
}
void eeconfig_write_rgblight(uint32_t val) {
    161e:	ab 01       	movw	r20, r22
    1620:	bc 01       	movw	r22, r24
  eeprom_write_dword(EECONFIG_RGBLIGHT, val);
    1622:	87 e0       	ldi	r24, 0x07	; 7
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <__eewr_dword_m32u4>
}
    162a:	08 95       	ret

0000162c <rgblight_sethsv>:
		inmem_config.val = val;
    // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_config.val);
    rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
  }
}
void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val){
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	18 2f       	mov	r17, r24
    1636:	09 2f       	mov	r16, r25
    1638:	e6 2e       	mov	r14, r22
    163a:	f4 2e       	mov	r15, r20
  if (rgblight_config.enable) {
    163c:	20 91 c3 01 	lds	r18, 0x01C3
    1640:	20 ff       	sbrs	r18, 0
    1642:	42 c0       	rjmp	.+132    	; 0x16c8 <rgblight_sethsv+0x9c>
		if (rgblight_config.mode == 1) {
    1644:	82 2f       	mov	r24, r18
    1646:	8e 77       	andi	r24, 0x7E	; 126
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	21 f4       	brne	.+8      	; 0x1654 <rgblight_sethsv+0x28>
			// same static color
			rgblight_sethsv_noeeprom(hue, sat, val);
    164c:	81 2f       	mov	r24, r17
    164e:	0e 94 05 0a 	call	0x140a	; 0x140a <rgblight_sethsv_noeeprom>
    1652:	1b c0       	rjmp	.+54     	; 0x168a <rgblight_sethsv+0x5e>
		} else {
			// all LEDs in same color
			if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
    1654:	92 2f       	mov	r25, r18
    1656:	96 95       	lsr	r25
    1658:	9f 73       	andi	r25, 0x3F	; 63
    165a:	89 2f       	mov	r24, r25
    165c:	82 5c       	subi	r24, 0xC2	; 194
    165e:	8f 73       	andi	r24, 0x3F	; 63
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	18 f4       	brcc	.+6      	; 0x166a <rgblight_sethsv+0x3e>
				// breathing mode, ignore the change of val, use in memory value instead
				val = rgblight_config.val;
    1664:	f0 90 c6 01 	lds	r15, 0x01C6
    1668:	10 c0       	rjmp	.+32     	; 0x168a <rgblight_sethsv+0x5e>
			} else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
    166a:	96 5c       	subi	r25, 0xC6	; 198
    166c:	9f 73       	andi	r25, 0x3F	; 63
    166e:	99 30       	cpi	r25, 0x09	; 9
    1670:	60 f4       	brcc	.+24     	; 0x168a <rgblight_sethsv+0x5e>
				// rainbow mood and rainbow swirl, ignore the change of hue
				hue = rgblight_config.hue;
    1672:	22 1f       	adc	r18, r18
    1674:	22 27       	eor	r18, r18
    1676:	22 1f       	adc	r18, r18
    1678:	80 91 c4 01 	lds	r24, 0x01C4
    167c:	18 2f       	mov	r17, r24
    167e:	11 0f       	add	r17, r17
    1680:	12 2b       	or	r17, r18
    1682:	08 2f       	mov	r16, r24
    1684:	00 1f       	adc	r16, r16
    1686:	00 27       	eor	r16, r16
    1688:	00 1f       	adc	r16, r16
			}
		}
		rgblight_config.hue = hue;
    168a:	91 2f       	mov	r25, r17
    168c:	97 95       	ror	r25
    168e:	99 27       	eor	r25, r25
    1690:	97 95       	ror	r25
    1692:	80 91 c3 01 	lds	r24, 0x01C3
    1696:	8f 77       	andi	r24, 0x7F	; 127
    1698:	89 2b       	or	r24, r25
    169a:	80 93 c3 01 	sts	0x01C3, r24
    169e:	07 95       	ror	r16
    16a0:	00 27       	eor	r16, r16
    16a2:	07 95       	ror	r16
    16a4:	16 95       	lsr	r17
    16a6:	10 2b       	or	r17, r16
    16a8:	10 93 c4 01 	sts	0x01C4, r17
		rgblight_config.sat = sat;
    16ac:	e0 92 c5 01 	sts	0x01C5, r14
		rgblight_config.val = val;
    16b0:	f0 92 c6 01 	sts	0x01C6, r15
		eeconfig_write_rgblight(rgblight_config.raw);
    16b4:	60 91 c3 01 	lds	r22, 0x01C3
    16b8:	70 91 c4 01 	lds	r23, 0x01C4
    16bc:	80 91 c5 01 	lds	r24, 0x01C5
    16c0:	90 91 c6 01 	lds	r25, 0x01C6
    16c4:	0e 94 0f 0b 	call	0x161e	; 0x161e <eeconfig_write_rgblight>
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	08 95       	ret

000016d2 <rgblight_decrease_val>:
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
}
void rgblight_decrease_val(void) {
	uint8_t val;
  if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
    16d2:	40 91 c6 01 	lds	r20, 0x01C6
    16d6:	84 2f       	mov	r24, r20
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	41 97       	sbiw	r24, 0x11	; 17
    16dc:	14 f4       	brge	.+4      	; 0x16e2 <rgblight_decrease_val+0x10>
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <rgblight_decrease_val+0x12>
    val = 0;
  } else {
    val = rgblight_config.val-RGBLIGHT_VAL_STEP;
    16e2:	41 51       	subi	r20, 0x11	; 17
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
    16e4:	20 91 c3 01 	lds	r18, 0x01C3
    16e8:	22 1f       	adc	r18, r18
    16ea:	22 27       	eor	r18, r18
    16ec:	22 1f       	adc	r18, r18
    16ee:	90 91 c4 01 	lds	r25, 0x01C4
    16f2:	89 2f       	mov	r24, r25
    16f4:	88 0f       	add	r24, r24
    16f6:	82 2b       	or	r24, r18
    16f8:	99 1f       	adc	r25, r25
    16fa:	99 27       	eor	r25, r25
    16fc:	99 1f       	adc	r25, r25
    16fe:	60 91 c5 01 	lds	r22, 0x01C5
    1702:	0e 94 16 0b 	call	0x162c	; 0x162c <rgblight_sethsv>
}
    1706:	08 95       	ret

00001708 <rgblight_increase_val>:
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_increase_val(void){
	uint8_t val;
  if (rgblight_config.val + RGBLIGHT_VAL_STEP > 255) {
    1708:	40 91 c6 01 	lds	r20, 0x01C6
    170c:	84 2f       	mov	r24, r20
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	8f 3e       	cpi	r24, 0xEF	; 239
    1712:	91 05       	cpc	r25, r1
    1714:	14 f0       	brlt	.+4      	; 0x171a <rgblight_increase_val+0x12>
    1716:	4f ef       	ldi	r20, 0xFF	; 255
    1718:	01 c0       	rjmp	.+2      	; 0x171c <rgblight_increase_val+0x14>
    val = 255;
  } else {
    val = rgblight_config.val+RGBLIGHT_VAL_STEP;
    171a:	4f 5e       	subi	r20, 0xEF	; 239
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
    171c:	20 91 c3 01 	lds	r18, 0x01C3
    1720:	22 1f       	adc	r18, r18
    1722:	22 27       	eor	r18, r18
    1724:	22 1f       	adc	r18, r18
    1726:	90 91 c4 01 	lds	r25, 0x01C4
    172a:	89 2f       	mov	r24, r25
    172c:	88 0f       	add	r24, r24
    172e:	82 2b       	or	r24, r18
    1730:	99 1f       	adc	r25, r25
    1732:	99 27       	eor	r25, r25
    1734:	99 1f       	adc	r25, r25
    1736:	60 91 c5 01 	lds	r22, 0x01C5
    173a:	0e 94 16 0b 	call	0x162c	; 0x162c <rgblight_sethsv>
}
    173e:	08 95       	ret

00001740 <rgblight_decrease_sat>:
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_decrease_sat(void){
	uint8_t sat;
  if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
    1740:	60 91 c5 01 	lds	r22, 0x01C5
    1744:	86 2f       	mov	r24, r22
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	41 97       	sbiw	r24, 0x11	; 17
    174a:	14 f4       	brge	.+4      	; 0x1750 <rgblight_decrease_sat+0x10>
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <rgblight_decrease_sat+0x12>
    sat = 0;
  } else {
    sat = rgblight_config.sat-RGBLIGHT_SAT_STEP;
    1750:	61 51       	subi	r22, 0x11	; 17
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
    1752:	20 91 c3 01 	lds	r18, 0x01C3
    1756:	22 1f       	adc	r18, r18
    1758:	22 27       	eor	r18, r18
    175a:	22 1f       	adc	r18, r18
    175c:	90 91 c4 01 	lds	r25, 0x01C4
    1760:	89 2f       	mov	r24, r25
    1762:	88 0f       	add	r24, r24
    1764:	82 2b       	or	r24, r18
    1766:	99 1f       	adc	r25, r25
    1768:	99 27       	eor	r25, r25
    176a:	99 1f       	adc	r25, r25
    176c:	40 91 c6 01 	lds	r20, 0x01C6
    1770:	0e 94 16 0b 	call	0x162c	; 0x162c <rgblight_sethsv>
}
    1774:	08 95       	ret

00001776 <rgblight_increase_sat>:
	}
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
}
void rgblight_increase_sat(void) {
	uint8_t sat;
  if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
    1776:	60 91 c5 01 	lds	r22, 0x01C5
    177a:	86 2f       	mov	r24, r22
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	8f 3e       	cpi	r24, 0xEF	; 239
    1780:	91 05       	cpc	r25, r1
    1782:	14 f0       	brlt	.+4      	; 0x1788 <rgblight_increase_sat+0x12>
    1784:	6f ef       	ldi	r22, 0xFF	; 255
    1786:	01 c0       	rjmp	.+2      	; 0x178a <rgblight_increase_sat+0x14>
    sat = 255;
  } else {
    sat = rgblight_config.sat+RGBLIGHT_SAT_STEP;
    1788:	6f 5e       	subi	r22, 0xEF	; 239
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
    178a:	20 91 c3 01 	lds	r18, 0x01C3
    178e:	22 1f       	adc	r18, r18
    1790:	22 27       	eor	r18, r18
    1792:	22 1f       	adc	r18, r18
    1794:	90 91 c4 01 	lds	r25, 0x01C4
    1798:	89 2f       	mov	r24, r25
    179a:	88 0f       	add	r24, r24
    179c:	82 2b       	or	r24, r18
    179e:	99 1f       	adc	r25, r25
    17a0:	99 27       	eor	r25, r25
    17a2:	99 1f       	adc	r25, r25
    17a4:	40 91 c6 01 	lds	r20, 0x01C6
    17a8:	0e 94 16 0b 	call	0x162c	; 0x162c <rgblight_sethsv>
}
    17ac:	08 95       	ret

000017ae <rgblight_decrease_hue>:
  hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
}
void rgblight_decrease_hue(void){
	uint16_t hue;
	if (rgblight_config.hue-RGBLIGHT_HUE_STEP <0 ) {
    17ae:	80 91 c3 01 	lds	r24, 0x01C3
    17b2:	88 1f       	adc	r24, r24
    17b4:	88 27       	eor	r24, r24
    17b6:	88 1f       	adc	r24, r24
    17b8:	20 91 c4 01 	lds	r18, 0x01C4
    17bc:	92 2f       	mov	r25, r18
    17be:	99 0f       	add	r25, r25
    17c0:	89 2b       	or	r24, r25
    17c2:	92 2f       	mov	r25, r18
    17c4:	99 1f       	adc	r25, r25
    17c6:	99 27       	eor	r25, r25
    17c8:	99 1f       	adc	r25, r25
    17ca:	8a 30       	cpi	r24, 0x0A	; 10
    17cc:	91 05       	cpc	r25, r1
    17ce:	1c f4       	brge	.+6      	; 0x17d6 <rgblight_decrease_hue+0x28>
		hue = (rgblight_config.hue+360-RGBLIGHT_HUE_STEP) % 360;
    17d0:	82 5a       	subi	r24, 0xA2	; 162
    17d2:	9e 4f       	sbci	r25, 0xFE	; 254
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <rgblight_decrease_hue+0x2a>
	} else {
		hue = (rgblight_config.hue-RGBLIGHT_HUE_STEP) % 360;
    17d6:	0a 97       	sbiw	r24, 0x0a	; 10
    17d8:	68 e6       	ldi	r22, 0x68	; 104
    17da:	71 e0       	ldi	r23, 0x01	; 1
    17dc:	0e 94 b5 22 	call	0x456a	; 0x456a <__divmodhi4>
	}
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
    17e0:	60 91 c5 01 	lds	r22, 0x01C5
    17e4:	40 91 c6 01 	lds	r20, 0x01C6
    17e8:	0e 94 16 0b 	call	0x162c	; 0x162c <rgblight_sethsv>
}
    17ec:	08 95       	ret

000017ee <rgblight_increase_hue>:


void rgblight_increase_hue(void){
	uint16_t hue;
  hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
    17ee:	20 91 c3 01 	lds	r18, 0x01C3
    17f2:	22 1f       	adc	r18, r18
    17f4:	22 27       	eor	r18, r18
    17f6:	22 1f       	adc	r18, r18
    17f8:	40 91 c4 01 	lds	r20, 0x01C4
    17fc:	34 2f       	mov	r19, r20
    17fe:	33 0f       	add	r19, r19
    1800:	83 2f       	mov	r24, r19
    1802:	82 2b       	or	r24, r18
    1804:	94 2f       	mov	r25, r20
    1806:	99 1f       	adc	r25, r25
    1808:	99 27       	eor	r25, r25
    180a:	99 1f       	adc	r25, r25
    180c:	0a 96       	adiw	r24, 0x0a	; 10
    180e:	68 e6       	ldi	r22, 0x68	; 104
    1810:	71 e0       	ldi	r23, 0x01	; 1
    1812:	0e 94 b5 22 	call	0x456a	; 0x456a <__divmodhi4>
    1816:	60 91 c5 01 	lds	r22, 0x01C5
    181a:	40 91 c6 01 	lds	r20, 0x01C6
    181e:	0e 94 16 0b 	call	0x162c	; 0x162c <rgblight_sethsv>
}
    1822:	08 95       	ret

00001824 <rgblight_mode>:
  }
	rgblight_mode(mode);
}

void rgblight_mode(uint8_t mode) {
	if (!rgblight_config.enable) {
    1824:	90 91 c3 01 	lds	r25, 0x01C3
    1828:	90 ff       	sbrs	r25, 0
    182a:	3c c0       	rjmp	.+120    	; 0x18a4 <rgblight_mode+0x80>
		return;
	}
  if (mode<1) {
    182c:	88 23       	and	r24, r24
    182e:	19 f4       	brne	.+6      	; 0x1836 <rgblight_mode+0x12>
		rgblight_config.mode = 1;
    1830:	91 78       	andi	r25, 0x81	; 129
    1832:	92 60       	ori	r25, 0x02	; 2
    1834:	08 c0       	rjmp	.+16     	; 0x1846 <rgblight_mode+0x22>
    1836:	91 78       	andi	r25, 0x81	; 129
	} else if (mode > RGBLIGHT_MODES) {
    1838:	88 31       	cpi	r24, 0x18	; 24
    183a:	10 f0       	brcs	.+4      	; 0x1840 <rgblight_mode+0x1c>
		rgblight_config.mode = RGBLIGHT_MODES;
    183c:	9e 62       	ori	r25, 0x2E	; 46
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <rgblight_mode+0x22>
	} else {
		rgblight_config.mode = mode;
    1840:	8f 73       	andi	r24, 0x3F	; 63
    1842:	88 0f       	add	r24, r24
    1844:	98 2b       	or	r25, r24
    1846:	90 93 c3 01 	sts	0x01C3, r25
	}
  eeconfig_write_rgblight(rgblight_config.raw);
    184a:	60 91 c3 01 	lds	r22, 0x01C3
    184e:	70 91 c4 01 	lds	r23, 0x01C4
    1852:	80 91 c5 01 	lds	r24, 0x01C5
    1856:	90 91 c6 01 	lds	r25, 0x01C6
    185a:	0e 94 0f 0b 	call	0x161e	; 0x161e <eeconfig_write_rgblight>
  dprintf("rgblight mode: %u\n", rgblight_config.mode);
	if (rgblight_config.mode == 1) {
    185e:	90 91 c3 01 	lds	r25, 0x01C3
    1862:	89 2f       	mov	r24, r25
    1864:	8e 77       	andi	r24, 0x7E	; 126
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	19 f4       	brne	.+6      	; 0x1870 <rgblight_mode+0x4c>
		rgblight_timer_disable();
    186a:	0e 94 2b 08 	call	0x1056	; 0x1056 <rgblight_timer_disable>
    186e:	07 c0       	rjmp	.+14     	; 0x187e <rgblight_mode+0x5a>
	} else if (rgblight_config.mode >=2 && rgblight_config.mode <=23) {
    1870:	96 95       	lsr	r25
    1872:	92 5c       	subi	r25, 0xC2	; 194
    1874:	9f 73       	andi	r25, 0x3F	; 63
    1876:	96 31       	cpi	r25, 0x16	; 22
    1878:	10 f4       	brcc	.+4      	; 0x187e <rgblight_mode+0x5a>
		// MODE 2-5, breathing
		// MODE 6-8, rainbow mood
		// MODE 9-14, rainbow swirl
		// MODE 15-20, snake
		// MODE 21-23, knight
		rgblight_timer_enable();
    187a:	0e 94 25 08 	call	0x104a	; 0x104a <rgblight_timer_enable>
	}
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
    187e:	20 91 c3 01 	lds	r18, 0x01C3
    1882:	22 1f       	adc	r18, r18
    1884:	22 27       	eor	r18, r18
    1886:	22 1f       	adc	r18, r18
    1888:	90 91 c4 01 	lds	r25, 0x01C4
    188c:	89 2f       	mov	r24, r25
    188e:	88 0f       	add	r24, r24
    1890:	82 2b       	or	r24, r18
    1892:	99 1f       	adc	r25, r25
    1894:	99 27       	eor	r25, r25
    1896:	99 1f       	adc	r25, r25
    1898:	60 91 c5 01 	lds	r22, 0x01C5
    189c:	40 91 c6 01 	lds	r20, 0x01C6
    18a0:	0e 94 16 0b 	call	0x162c	; 0x162c <rgblight_sethsv>
    18a4:	08 95       	ret

000018a6 <rgblight_step>:
	rgblight_mode(mode);
}

void rgblight_step(void) {
	uint8_t mode;
  mode = rgblight_config.mode + 1;
    18a6:	80 91 c3 01 	lds	r24, 0x01C3
    18aa:	86 95       	lsr	r24
    18ac:	8f 73       	andi	r24, 0x3F	; 63
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
  if (mode > RGBLIGHT_MODES) {
    18b0:	88 31       	cpi	r24, 0x18	; 24
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <rgblight_step+0x10>
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    mode = 1;
  }
	rgblight_mode(mode);
    18b6:	0e 94 12 0c 	call	0x1824	; 0x1824 <rgblight_mode>
}
    18ba:	08 95       	ret

000018bc <rgblight_toggle>:
	}
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
}

void rgblight_toggle(void) {
  rgblight_config.enable ^= 1;
    18bc:	80 91 c3 01 	lds	r24, 0x01C3
    18c0:	98 2f       	mov	r25, r24
    18c2:	90 95       	com	r25
    18c4:	91 70       	andi	r25, 0x01	; 1
    18c6:	8e 7f       	andi	r24, 0xFE	; 254
    18c8:	89 2b       	or	r24, r25
    18ca:	80 93 c3 01 	sts	0x01C3, r24
  eeconfig_write_rgblight(rgblight_config.raw);
    18ce:	60 91 c3 01 	lds	r22, 0x01C3
    18d2:	70 91 c4 01 	lds	r23, 0x01C4
    18d6:	80 91 c5 01 	lds	r24, 0x01C5
    18da:	90 91 c6 01 	lds	r25, 0x01C6
    18de:	0e 94 0f 0b 	call	0x161e	; 0x161e <eeconfig_write_rgblight>
  dprintf("rgblight toggle: rgblight_config.enable = %u\n", rgblight_config.enable);
	if (rgblight_config.enable) {
    18e2:	80 91 c3 01 	lds	r24, 0x01C3
    18e6:	80 ff       	sbrs	r24, 0
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <rgblight_toggle+0x38>
		rgblight_mode(rgblight_config.mode);
    18ea:	86 95       	lsr	r24
    18ec:	8f 73       	andi	r24, 0x3F	; 63
    18ee:	0e 94 12 0c 	call	0x1824	; 0x1824 <rgblight_mode>
    18f2:	08 95       	ret
	} else {
		rgblight_timer_disable();
    18f4:	0e 94 2b 08 	call	0x1056	; 0x1056 <rgblight_timer_disable>
    18f8:	84 ef       	ldi	r24, 0xF4	; 244
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	20 e9       	ldi	r18, 0x90	; 144
    18fe:	31 e0       	ldi	r19, 0x01	; 1
    1900:	f9 01       	movw	r30, r18
    1902:	31 97       	sbiw	r30, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <rgblight_toggle+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1906:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	d9 f7       	brne	.-10     	; 0x1900 <rgblight_toggle+0x44>
		_delay_ms(50);
		rgblight_set();
    190a:	0e 94 31 08 	call	0x1062	; 0x1062 <rgblight_set>
    190e:	08 95       	ret

00001910 <eeconfig_write_rgblight_default>:
}
void eeconfig_write_rgblight_default(void) {
	dprintf("eeconfig_write_rgblight_default\n");
	rgblight_config.enable = 1;
	rgblight_config.mode = 1;
	rgblight_config.hue = 200;
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	80 93 c3 01 	sts	0x01C3, r24
    1916:	84 e6       	ldi	r24, 0x64	; 100
    1918:	80 93 c4 01 	sts	0x01C4, r24
	rgblight_config.sat = 204;
    191c:	8c ec       	ldi	r24, 0xCC	; 204
    191e:	80 93 c5 01 	sts	0x01C5, r24
	rgblight_config.val = 204;
    1922:	80 93 c6 01 	sts	0x01C6, r24
	eeconfig_write_rgblight(rgblight_config.raw);
    1926:	60 91 c3 01 	lds	r22, 0x01C3
    192a:	70 91 c4 01 	lds	r23, 0x01C4
    192e:	80 91 c5 01 	lds	r24, 0x01C5
    1932:	90 91 c6 01 	lds	r25, 0x01C6
    1936:	0e 94 0f 0b 	call	0x161e	; 0x161e <eeconfig_write_rgblight>
}
    193a:	08 95       	ret

0000193c <eeconfig_read_rgblight>:
  (*led1).b = b;
}


uint32_t eeconfig_read_rgblight(void) {
  return eeprom_read_dword(EECONFIG_RGBLIGHT);
    193c:	87 e0       	ldi	r24, 0x07	; 7
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__eerd_dword_m32u4>
}
    1944:	08 95       	ret

00001946 <rgblight_init>:
	dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
	dprintf("rgblight_config.val = %d\n", rgblight_config.val);
}

void rgblight_init(void) {
  debug_enable = 1; // Debug ON!
    1946:	80 91 9a 01 	lds	r24, 0x019A
    194a:	81 60       	ori	r24, 0x01	; 1
    194c:	80 93 9a 01 	sts	0x019A, r24
	dprintf("rgblight_init called.\n");
  rgblight_inited = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 2d 01 	sts	0x012D, r24
	dprintf("rgblight_init start!\n");
  if (!eeconfig_is_enabled()) {
    1956:	0e 94 92 1a 	call	0x3524	; 0x3524 <eeconfig_is_enabled>
    195a:	88 23       	and	r24, r24
    195c:	21 f4       	brne	.+8      	; 0x1966 <rgblight_init+0x20>
		dprintf("rgblight_init eeconfig is not enabled.\n");
    eeconfig_init();
    195e:	0e 94 9d 1a 	call	0x353a	; 0x353a <eeconfig_init>
		eeconfig_write_rgblight_default();
    1962:	0e 94 88 0c 	call	0x1910	; 0x1910 <eeconfig_write_rgblight_default>
  }
  rgblight_config.raw = eeconfig_read_rgblight();
    1966:	0e 94 9e 0c 	call	0x193c	; 0x193c <eeconfig_read_rgblight>
    196a:	60 93 c3 01 	sts	0x01C3, r22
    196e:	70 93 c4 01 	sts	0x01C4, r23
    1972:	80 93 c5 01 	sts	0x01C5, r24
    1976:	90 93 c6 01 	sts	0x01C6, r25
	if (!rgblight_config.mode) {
    197a:	6e 77       	andi	r22, 0x7E	; 126
    197c:	61 f4       	brne	.+24     	; 0x1996 <rgblight_init+0x50>
		dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
		eeconfig_write_rgblight_default();
    197e:	0e 94 88 0c 	call	0x1910	; 0x1910 <eeconfig_write_rgblight_default>
		rgblight_config.raw = eeconfig_read_rgblight();
    1982:	0e 94 9e 0c 	call	0x193c	; 0x193c <eeconfig_read_rgblight>
    1986:	60 93 c3 01 	sts	0x01C3, r22
    198a:	70 93 c4 01 	sts	0x01C4, r23
    198e:	80 93 c5 01 	sts	0x01C5, r24
    1992:	90 93 c6 01 	sts	0x01C6, r25
	}
	eeconfig_debug_rgblight(); // display current eeprom values

	rgblight_timer_init(); // setup the timer
    1996:	0e 94 11 08 	call	0x1022	; 0x1022 <rgblight_timer_init>

  if (rgblight_config.enable) {
    199a:	80 91 c3 01 	lds	r24, 0x01C3
    199e:	80 ff       	sbrs	r24, 0
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <rgblight_init+0x64>
    rgblight_mode(rgblight_config.mode);
    19a2:	86 95       	lsr	r24
    19a4:	8f 73       	andi	r24, 0x3F	; 63
    19a6:	0e 94 12 0c 	call	0x1824	; 0x1824 <rgblight_mode>
    19aa:	08 95       	ret

000019ac <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    19ac:	90 93 45 01 	sts	0x0145, r25
    19b0:	80 93 44 01 	sts	0x0144, r24
}
    19b4:	08 95       	ret

000019b6 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    19b6:	e0 91 44 01 	lds	r30, 0x0144
    19ba:	f0 91 45 01 	lds	r31, 0x0145
    19be:	30 97       	sbiw	r30, 0x00	; 0
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <host_keyboard_leds+0x10>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	08 95       	ret
    return (*driver->keyboard_leds)();
    19c6:	01 90       	ld	r0, Z+
    19c8:	f0 81       	ld	r31, Z
    19ca:	e0 2d       	mov	r30, r0
    19cc:	09 95       	icall
}
    19ce:	08 95       	ret

000019d0 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
    19d0:	e0 91 44 01 	lds	r30, 0x0144
    19d4:	f0 91 45 01 	lds	r31, 0x0145
    19d8:	30 97       	sbiw	r30, 0x00	; 0
    19da:	21 f0       	breq	.+8      	; 0x19e4 <host_keyboard_send+0x14>
    (*driver->send_keyboard)(report);
    19dc:	02 80       	ldd	r0, Z+2	; 0x02
    19de:	f3 81       	ldd	r31, Z+3	; 0x03
    19e0:	e0 2d       	mov	r30, r0
    19e2:	09 95       	icall
    19e4:	08 95       	ret

000019e6 <host_mouse_send>:
    }
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    19e6:	e0 91 44 01 	lds	r30, 0x0144
    19ea:	f0 91 45 01 	lds	r31, 0x0145
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	21 f0       	breq	.+8      	; 0x19fa <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    19f2:	04 80       	ldd	r0, Z+4	; 0x04
    19f4:	f5 81       	ldd	r31, Z+5	; 0x05
    19f6:	e0 2d       	mov	r30, r0
    19f8:	09 95       	icall
    19fa:	08 95       	ret

000019fc <host_system_send>:
}

void host_system_send(uint16_t report)
{
    19fc:	9c 01       	movw	r18, r24
    if (report == last_system_report) return;
    19fe:	80 91 42 01 	lds	r24, 0x0142
    1a02:	90 91 43 01 	lds	r25, 0x0143
    1a06:	28 17       	cp	r18, r24
    1a08:	39 07       	cpc	r19, r25
    1a0a:	79 f0       	breq	.+30     	; 0x1a2a <host_system_send+0x2e>
    last_system_report = report;
    1a0c:	30 93 43 01 	sts	0x0143, r19
    1a10:	20 93 42 01 	sts	0x0142, r18

    if (!driver) return;
    1a14:	e0 91 44 01 	lds	r30, 0x0144
    1a18:	f0 91 45 01 	lds	r31, 0x0145
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	29 f0       	breq	.+10     	; 0x1a2a <host_system_send+0x2e>
    (*driver->send_system)(report);
    1a20:	06 80       	ldd	r0, Z+6	; 0x06
    1a22:	f7 81       	ldd	r31, Z+7	; 0x07
    1a24:	e0 2d       	mov	r30, r0
    1a26:	c9 01       	movw	r24, r18
    1a28:	09 95       	icall
    1a2a:	08 95       	ret

00001a2c <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    1a2c:	9c 01       	movw	r18, r24
    if (report == last_consumer_report) return;
    1a2e:	80 91 40 01 	lds	r24, 0x0140
    1a32:	90 91 41 01 	lds	r25, 0x0141
    1a36:	28 17       	cp	r18, r24
    1a38:	39 07       	cpc	r19, r25
    1a3a:	79 f0       	breq	.+30     	; 0x1a5a <host_consumer_send+0x2e>
    last_consumer_report = report;
    1a3c:	30 93 41 01 	sts	0x0141, r19
    1a40:	20 93 40 01 	sts	0x0140, r18

    if (!driver) return;
    1a44:	e0 91 44 01 	lds	r30, 0x0144
    1a48:	f0 91 45 01 	lds	r31, 0x0145
    1a4c:	30 97       	sbiw	r30, 0x00	; 0
    1a4e:	29 f0       	breq	.+10     	; 0x1a5a <host_consumer_send+0x2e>
    (*driver->send_consumer)(report);
    1a50:	00 84       	ldd	r0, Z+8	; 0x08
    1a52:	f1 85       	ldd	r31, Z+9	; 0x09
    1a54:	e0 2d       	mov	r30, r0
    1a56:	c9 01       	movw	r24, r18
    1a58:	09 95       	icall
    1a5a:	08 95       	ret

00001a5c <keyboard_set_leds>:
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    1a5c:	0e 94 f2 06 	call	0xde4	; 0xde4 <led_set>
}
    1a60:	08 95       	ret

00001a62 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	2a 97       	sbiw	r28, 0x0a	; 10
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1a84:	0e 94 0b 05 	call	0xa16	; 0xa16 <matrix_scan>
    1a88:	ee 24       	eor	r14, r14
    1a8a:	ff 24       	eor	r15, r15
    1a8c:	be 2c       	mov	r11, r14
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1a8e:	8e 2d       	mov	r24, r14
    1a90:	0e 94 47 04 	call	0x88e	; 0x88e <matrix_get_row>
    1a94:	c8 2e       	mov	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1a96:	f7 01       	movw	r30, r14
    1a98:	e9 5b       	subi	r30, 0xB9	; 185
    1a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9c:	d0 80       	ld	r13, Z
    1a9e:	d8 26       	eor	r13, r24
        if (matrix_change) {
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <keyboard_task+0x42>
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <keyboard_task+0xc0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1aa4:	80 91 9a 01 	lds	r24, 0x019A
    1aa8:	81 ff       	sbrs	r24, 1
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <keyboard_task+0x4e>
    1aac:	0e 94 4d 04 	call	0x89a	; 0x89a <matrix_print>
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1ab4:	ed 2d       	mov	r30, r13
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	cf 01       	movw	r24, r30
    1aba:	00 2e       	mov	r0, r16
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <keyboard_task+0x60>
    1abe:	95 95       	asr	r25
    1ac0:	87 95       	ror	r24
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <keyboard_task+0x5c>
    1ac6:	80 ff       	sbrs	r24, 0
    1ac8:	27 c0       	rjmp	.+78     	; 0x1b18 <keyboard_task+0xb6>
                    action_exec((keyevent_t){
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
    1aca:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    1ace:	09 83       	std	Y+1, r16	; 0x01
    1ad0:	ba 82       	std	Y+2, r11	; 0x02
    1ad2:	6c 2d       	mov	r22, r12
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	00 2e       	mov	r0, r16
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <keyboard_task+0x7c>
    1ada:	75 95       	asr	r23
    1adc:	67 95       	ror	r22
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <keyboard_task+0x78>
    1ae2:	61 70       	andi	r22, 0x01	; 1
    1ae4:	70 70       	andi	r23, 0x00	; 0
    1ae6:	6b 83       	std	Y+3, r22	; 0x03
    1ae8:	81 60       	ori	r24, 0x01	; 1
    1aea:	9d 83       	std	Y+5, r25	; 0x05
    1aec:	8c 83       	std	Y+4, r24	; 0x04
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1aee:	40 2f       	mov	r20, r16
    1af0:	5b 2d       	mov	r21, r11
    1af2:	78 2f       	mov	r23, r24
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	0e 94 96 11 	call	0x232c	; 0x232c <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1afa:	f7 01       	movw	r30, r14
    1afc:	e9 5b       	subi	r30, 0xB9	; 185
    1afe:	fe 4f       	sbci	r31, 0xFE	; 254
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	00 2e       	mov	r0, r16
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <keyboard_task+0xaa>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <keyboard_task+0xa6>
    1b10:	20 81       	ld	r18, Z
    1b12:	28 27       	eor	r18, r24
    1b14:	20 83       	st	Z, r18
    1b16:	1d c0       	rjmp	.+58     	; 0x1b52 <keyboard_task+0xf0>
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    1b18:	0f 5f       	subi	r16, 0xFF	; 255
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1b1c:	06 30       	cpi	r16, 0x06	; 6
    1b1e:	11 05       	cpc	r17, r1
    1b20:	59 f6       	brne	.-106    	; 0x1ab8 <keyboard_task+0x56>
    1b22:	08 94       	sec
    1b24:	e1 1c       	adc	r14, r1
    1b26:	f1 1c       	adc	r15, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1b28:	88 e0       	ldi	r24, 0x08	; 8
    1b2a:	e8 16       	cp	r14, r24
    1b2c:	f1 04       	cpc	r15, r1
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <keyboard_task+0xd0>
    1b30:	ad cf       	rjmp	.-166    	; 0x1a8c <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1b32:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    1b36:	2f ef       	ldi	r18, 0xFF	; 255
    1b38:	2e 83       	std	Y+6, r18	; 0x06
    1b3a:	2f 83       	std	Y+7, r18	; 0x07
    1b3c:	18 86       	std	Y+8, r1	; 0x08
    1b3e:	81 60       	ori	r24, 0x01	; 1
    1b40:	78 2f       	mov	r23, r24
    1b42:	9a 87       	std	Y+10, r25	; 0x0a
    1b44:	89 87       	std	Y+9, r24	; 0x09
    1b46:	4f ef       	ldi	r20, 0xFF	; 255
    1b48:	5f ef       	ldi	r21, 0xFF	; 255
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b4e:	0e 94 96 11 	call	0x232c	; 0x232c <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    1b52:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1b56:	10 91 46 01 	lds	r17, 0x0146
    1b5a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1b5e:	18 17       	cp	r17, r24
    1b60:	31 f0       	breq	.+12     	; 0x1b6e <keyboard_task+0x10c>
        led_status = host_keyboard_leds();
    1b62:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1b66:	80 93 46 01 	sts	0x0146, r24
        keyboard_set_leds(led_status);
    1b6a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <keyboard_set_leds>
    }
}
    1b6e:	2a 96       	adiw	r28, 0x0a	; 10
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	08 95       	ret

00001b8e <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    1b8e:	0e 94 07 18 	call	0x300e	; 0x300e <timer_init>
    matrix_init();
    1b92:	0e 94 3e 05 	call	0xa7c	; 0xa7c <matrix_init>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    1b96:	08 95       	ret

00001b98 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <debug_event+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <debug_event+0x8>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <debug_record>:

void debug_record(keyrecord_t record)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <debug_record+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <debug_record+0x8>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <debug_record+0xa>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    1bc4:	26 96       	adiw	r28, 0x06	; 6
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    1bd6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <layer_switch_get_action>
    1bda:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    1bdc:	89 2f       	mov	r24, r25
    1bde:	82 95       	swap	r24
    1be0:	8f 70       	andi	r24, 0x0F	; 15
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	2c 30       	cpi	r18, 0x0C	; 12
    1be8:	31 05       	cpc	r19, r1
    1bea:	4c f4       	brge	.+18     	; 0x1bfe <is_tap_key+0x28>
    1bec:	2a 30       	cpi	r18, 0x0A	; 10
    1bee:	31 05       	cpc	r19, r1
    1bf0:	6c f4       	brge	.+26     	; 0x1c0c <is_tap_key+0x36>
    1bf2:	22 50       	subi	r18, 0x02	; 2
    1bf4:	30 40       	sbci	r19, 0x00	; 0
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	c0 f4       	brcc	.+48     	; 0x1c2c <is_tap_key+0x56>
    1bfc:	07 c0       	rjmp	.+14     	; 0x1c0c <is_tap_key+0x36>
    1bfe:	2c 30       	cpi	r18, 0x0C	; 12
    1c00:	31 05       	cpc	r19, r1
    1c02:	51 f0       	breq	.+20     	; 0x1c18 <is_tap_key+0x42>
    1c04:	2f 30       	cpi	r18, 0x0F	; 15
    1c06:	31 05       	cpc	r19, r1
    1c08:	89 f4       	brne	.+34     	; 0x1c2c <is_tap_key+0x56>
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <is_tap_key+0x42>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1c0c:	40 3e       	cpi	r20, 0xE0	; 224
    1c0e:	10 f0       	brcs	.+4      	; 0x1c14 <is_tap_key+0x3e>
    1c10:	40 3f       	cpi	r20, 0xF0	; 240
    1c12:	61 f4       	brne	.+24     	; 0x1c2c <is_tap_key+0x56>
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	08 95       	ret
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    1c18:	9f 70       	andi	r25, 0x0F	; 15
    1c1a:	89 2f       	mov	r24, r25
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	23 e0       	ldi	r18, 0x03	; 3
    1c20:	96 95       	lsr	r25
    1c22:	87 95       	ror	r24
    1c24:	2a 95       	dec	r18
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <is_tap_key+0x4a>
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	08 95       	ret
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return false;
}
    1c2e:	08 95       	ret

00001c30 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    1c30:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <clear_weak_mods>
    clear_keys();
    1c34:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <clear_keys>
    send_keyboard_report();
    1c38:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    1c3c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <mousekey_clear>
    mousekey_send();
    1c40:	0e 94 e6 19 	call	0x33cc	; 0x33cc <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <host_system_send>
    host_consumer_send(0);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <host_consumer_send>
#endif
}
    1c54:	08 95       	ret

00001c56 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    1c56:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <clear_mods>
    clear_keyboard_but_mods();
    1c5a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <clear_keyboard_but_mods>
}
    1c5e:	08 95       	ret

00001c60 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    1c60:	88 23       	and	r24, r24
    1c62:	21 f0       	breq	.+8      	; 0x1c6c <unregister_mods+0xc>
        del_mods(mods);
    1c64:	0e 94 84 17 	call	0x2f08	; 0x2f08 <del_mods>
        send_keyboard_report();
    1c68:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
    1c6c:	08 95       	ret

00001c6e <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    1c6e:	88 23       	and	r24, r24
    1c70:	21 f0       	breq	.+8      	; 0x1c7a <register_mods+0xc>
        add_mods(mods);
    1c72:	0e 94 7e 17 	call	0x2efc	; 0x2efc <add_mods>
        send_keyboard_report();
    1c76:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
    1c7a:	08 95       	ret

00001c7c <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
    1c7c:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <unregister_code+0x8>
    1c82:	4e c0       	rjmp	.+156    	; 0x1d20 <unregister_code+0xa4>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    1c84:	82 38       	cpi	r24, 0x82	; 130
    1c86:	59 f4       	brne	.+22     	; 0x1c9e <unregister_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    1c88:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1c8c:	81 ff       	sbrs	r24, 1
    1c8e:	48 c0       	rjmp	.+144    	; 0x1d20 <unregister_code+0xa4>
#endif
        add_key(KC_CAPSLOCK);
    1c90:	89 e3       	ldi	r24, 0x39	; 57
    1c92:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <add_key>
        send_keyboard_report();
    1c96:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    1c9a:	89 e3       	ldi	r24, 0x39	; 57
    1c9c:	0c c0       	rjmp	.+24     	; 0x1cb6 <unregister_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    1c9e:	83 38       	cpi	r24, 0x83	; 131
    1ca0:	69 f4       	brne	.+26     	; 0x1cbc <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    1ca2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1ca6:	80 ff       	sbrs	r24, 0
    1ca8:	3b c0       	rjmp	.+118    	; 0x1d20 <unregister_code+0xa4>
#endif
        add_key(KC_NUMLOCK);
    1caa:	83 e5       	ldi	r24, 0x53	; 83
    1cac:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <add_key>
        send_keyboard_report();
    1cb0:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    1cb4:	83 e5       	ldi	r24, 0x53	; 83
    1cb6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <del_key>
    1cba:	1f c0       	rjmp	.+62     	; 0x1cfa <unregister_code+0x7e>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    1cbc:	84 38       	cpi	r24, 0x84	; 132
    1cbe:	59 f4       	brne	.+22     	; 0x1cd6 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    1cc0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1cc4:	82 ff       	sbrs	r24, 2
    1cc6:	2c c0       	rjmp	.+88     	; 0x1d20 <unregister_code+0xa4>
#endif
        add_key(KC_SCROLLLOCK);
    1cc8:	87 e4       	ldi	r24, 0x47	; 71
    1cca:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <add_key>
        send_keyboard_report();
    1cce:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    1cd2:	87 e4       	ldi	r24, 0x47	; 71
    1cd4:	f0 cf       	rjmp	.-32     	; 0x1cb6 <unregister_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1cd6:	84 50       	subi	r24, 0x04	; 4
    1cd8:	81 3a       	cpi	r24, 0xA1	; 161
    1cda:	10 f4       	brcc	.+4      	; 0x1ce0 <unregister_code+0x64>
        del_key(code);
    1cdc:	82 2f       	mov	r24, r18
    1cde:	eb cf       	rjmp	.-42     	; 0x1cb6 <unregister_code+0x3a>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    1ce0:	82 2f       	mov	r24, r18
    1ce2:	80 5e       	subi	r24, 0xE0	; 224
    1ce4:	88 30       	cpi	r24, 0x08	; 8
    1ce6:	60 f4       	brcc	.+24     	; 0x1d00 <unregister_code+0x84>
        del_mods(MOD_BIT(code));
    1ce8:	27 70       	andi	r18, 0x07	; 7
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <unregister_code+0x76>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	2a 95       	dec	r18
    1cf4:	ea f7       	brpl	.-6      	; 0x1cf0 <unregister_code+0x74>
    1cf6:	0e 94 84 17 	call	0x2f08	; 0x2f08 <del_mods>
        send_keyboard_report();
    1cfa:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
    1cfe:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    1d00:	82 2f       	mov	r24, r18
    1d02:	85 5a       	subi	r24, 0xA5	; 165
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	28 f4       	brcc	.+10     	; 0x1d12 <unregister_code+0x96>
        host_system_send(0);
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <host_system_send>
    1d10:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    1d12:	28 5a       	subi	r18, 0xA8	; 168
    1d14:	23 31       	cpi	r18, 0x13	; 19
    1d16:	20 f4       	brcc	.+8      	; 0x1d20 <unregister_code+0xa4>
        host_consumer_send(0);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <host_consumer_send>
    1d20:	08 95       	ret

00001d22 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    1d22:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    1d24:	88 23       	and	r24, r24
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <register_code+0x8>
    1d28:	ca c0       	rjmp	.+404    	; 0x1ebe <register_code+0x19c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    1d2a:	82 38       	cpi	r24, 0x82	; 130
    1d2c:	59 f4       	brne	.+22     	; 0x1d44 <register_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    1d2e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1d32:	81 fd       	sbrc	r24, 1
    1d34:	c4 c0       	rjmp	.+392    	; 0x1ebe <register_code+0x19c>
#endif
        add_key(KC_CAPSLOCK);
    1d36:	89 e3       	ldi	r24, 0x39	; 57
    1d38:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <add_key>
        send_keyboard_report();
    1d3c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    1d40:	89 e3       	ldi	r24, 0x39	; 57
    1d42:	0c c0       	rjmp	.+24     	; 0x1d5c <register_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    1d44:	83 38       	cpi	r24, 0x83	; 131
    1d46:	69 f4       	brne	.+26     	; 0x1d62 <register_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    1d48:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1d4c:	80 fd       	sbrc	r24, 0
    1d4e:	b7 c0       	rjmp	.+366    	; 0x1ebe <register_code+0x19c>
#endif
        add_key(KC_NUMLOCK);
    1d50:	83 e5       	ldi	r24, 0x53	; 83
    1d52:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <add_key>
        send_keyboard_report();
    1d56:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    1d5a:	83 e5       	ldi	r24, 0x53	; 83
    1d5c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <del_key>
    1d60:	21 c0       	rjmp	.+66     	; 0x1da4 <register_code+0x82>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    1d62:	84 38       	cpi	r24, 0x84	; 132
    1d64:	59 f4       	brne	.+22     	; 0x1d7c <register_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    1d66:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <host_keyboard_leds>
    1d6a:	82 fd       	sbrc	r24, 2
    1d6c:	a8 c0       	rjmp	.+336    	; 0x1ebe <register_code+0x19c>
#endif
        add_key(KC_SCROLLLOCK);
    1d6e:	87 e4       	ldi	r24, 0x47	; 71
    1d70:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <add_key>
        send_keyboard_report();
    1d74:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    1d78:	87 e4       	ldi	r24, 0x47	; 71
    1d7a:	f0 cf       	rjmp	.-32     	; 0x1d5c <register_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1d7c:	84 50       	subi	r24, 0x04	; 4
    1d7e:	81 3a       	cpi	r24, 0xA1	; 161
    1d80:	20 f4       	brcc	.+8      	; 0x1d8a <register_code+0x68>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    1d82:	82 2f       	mov	r24, r18
    1d84:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <add_key>
    1d88:	0d c0       	rjmp	.+26     	; 0x1da4 <register_code+0x82>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    1d8a:	82 2f       	mov	r24, r18
    1d8c:	80 5e       	subi	r24, 0xE0	; 224
    1d8e:	88 30       	cpi	r24, 0x08	; 8
    1d90:	60 f4       	brcc	.+24     	; 0x1daa <register_code+0x88>
        add_mods(MOD_BIT(code));
    1d92:	27 70       	andi	r18, 0x07	; 7
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <register_code+0x7a>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	2a 95       	dec	r18
    1d9e:	ea f7       	brpl	.-6      	; 0x1d9a <register_code+0x78>
    1da0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <add_mods>
        send_keyboard_report();
    1da4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
    1da8:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    1daa:	82 2f       	mov	r24, r18
    1dac:	85 5a       	subi	r24, 0xA5	; 165
    1dae:	83 30       	cpi	r24, 0x03	; 3
    1db0:	a0 f4       	brcc	.+40     	; 0x1dda <register_code+0xb8>
        host_system_send(KEYCODE2SYSTEM(code));
    1db2:	25 3a       	cpi	r18, 0xA5	; 165
    1db4:	19 f4       	brne	.+6      	; 0x1dbc <register_code+0x9a>
    1db6:	81 e8       	ldi	r24, 0x81	; 129
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0c c0       	rjmp	.+24     	; 0x1dd4 <register_code+0xb2>
    1dbc:	26 3a       	cpi	r18, 0xA6	; 166
    1dbe:	19 f4       	brne	.+6      	; 0x1dc6 <register_code+0xa4>
    1dc0:	82 e8       	ldi	r24, 0x82	; 130
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	07 c0       	rjmp	.+14     	; 0x1dd4 <register_code+0xb2>
    1dc6:	27 3a       	cpi	r18, 0xA7	; 167
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <register_code+0xae>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <register_code+0xb2>
    1dd0:	83 e8       	ldi	r24, 0x83	; 131
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <host_system_send>
    1dd8:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    1dda:	82 2f       	mov	r24, r18
    1ddc:	88 5a       	subi	r24, 0xA8	; 168
    1dde:	83 31       	cpi	r24, 0x13	; 19
    1de0:	08 f0       	brcs	.+2      	; 0x1de4 <register_code+0xc2>
    1de2:	6d c0       	rjmp	.+218    	; 0x1ebe <register_code+0x19c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    1de4:	28 3a       	cpi	r18, 0xA8	; 168
    1de6:	19 f4       	brne	.+6      	; 0x1dee <register_code+0xcc>
    1de8:	82 ee       	ldi	r24, 0xE2	; 226
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	66 c0       	rjmp	.+204    	; 0x1eba <register_code+0x198>
    1dee:	29 3a       	cpi	r18, 0xA9	; 169
    1df0:	19 f4       	brne	.+6      	; 0x1df8 <register_code+0xd6>
    1df2:	89 ee       	ldi	r24, 0xE9	; 233
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	61 c0       	rjmp	.+194    	; 0x1eba <register_code+0x198>
    1df8:	2a 3a       	cpi	r18, 0xAA	; 170
    1dfa:	19 f4       	brne	.+6      	; 0x1e02 <register_code+0xe0>
    1dfc:	8a ee       	ldi	r24, 0xEA	; 234
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	5c c0       	rjmp	.+184    	; 0x1eba <register_code+0x198>
    1e02:	2b 3a       	cpi	r18, 0xAB	; 171
    1e04:	19 f4       	brne	.+6      	; 0x1e0c <register_code+0xea>
    1e06:	85 eb       	ldi	r24, 0xB5	; 181
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	57 c0       	rjmp	.+174    	; 0x1eba <register_code+0x198>
    1e0c:	2c 3a       	cpi	r18, 0xAC	; 172
    1e0e:	19 f4       	brne	.+6      	; 0x1e16 <register_code+0xf4>
    1e10:	86 eb       	ldi	r24, 0xB6	; 182
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	52 c0       	rjmp	.+164    	; 0x1eba <register_code+0x198>
    1e16:	2b 3b       	cpi	r18, 0xBB	; 187
    1e18:	19 f4       	brne	.+6      	; 0x1e20 <register_code+0xfe>
    1e1a:	83 eb       	ldi	r24, 0xB3	; 179
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	4d c0       	rjmp	.+154    	; 0x1eba <register_code+0x198>
    1e20:	2c 3b       	cpi	r18, 0xBC	; 188
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <register_code+0x108>
    1e24:	84 eb       	ldi	r24, 0xB4	; 180
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	48 c0       	rjmp	.+144    	; 0x1eba <register_code+0x198>
    1e2a:	2d 3a       	cpi	r18, 0xAD	; 173
    1e2c:	19 f4       	brne	.+6      	; 0x1e34 <register_code+0x112>
    1e2e:	87 eb       	ldi	r24, 0xB7	; 183
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	43 c0       	rjmp	.+134    	; 0x1eba <register_code+0x198>
    1e34:	20 3b       	cpi	r18, 0xB0	; 176
    1e36:	19 f4       	brne	.+6      	; 0x1e3e <register_code+0x11c>
    1e38:	8c ec       	ldi	r24, 0xCC	; 204
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	3e c0       	rjmp	.+124    	; 0x1eba <register_code+0x198>
    1e3e:	2e 3a       	cpi	r18, 0xAE	; 174
    1e40:	19 f4       	brne	.+6      	; 0x1e48 <register_code+0x126>
    1e42:	8d ec       	ldi	r24, 0xCD	; 205
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	39 c0       	rjmp	.+114    	; 0x1eba <register_code+0x198>
    1e48:	2f 3a       	cpi	r18, 0xAF	; 175
    1e4a:	19 f4       	brne	.+6      	; 0x1e52 <register_code+0x130>
    1e4c:	83 e8       	ldi	r24, 0x83	; 131
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	34 c0       	rjmp	.+104    	; 0x1eba <register_code+0x198>
    1e52:	21 3b       	cpi	r18, 0xB1	; 177
    1e54:	19 f4       	brne	.+6      	; 0x1e5c <register_code+0x13a>
    1e56:	8a e8       	ldi	r24, 0x8A	; 138
    1e58:	91 e0       	ldi	r25, 0x01	; 1
    1e5a:	2f c0       	rjmp	.+94     	; 0x1eba <register_code+0x198>
    1e5c:	22 3b       	cpi	r18, 0xB2	; 178
    1e5e:	19 f4       	brne	.+6      	; 0x1e66 <register_code+0x144>
    1e60:	82 e9       	ldi	r24, 0x92	; 146
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	2a c0       	rjmp	.+84     	; 0x1eba <register_code+0x198>
    1e66:	23 3b       	cpi	r18, 0xB3	; 179
    1e68:	19 f4       	brne	.+6      	; 0x1e70 <register_code+0x14e>
    1e6a:	84 e9       	ldi	r24, 0x94	; 148
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	25 c0       	rjmp	.+74     	; 0x1eba <register_code+0x198>
    1e70:	24 3b       	cpi	r18, 0xB4	; 180
    1e72:	19 f4       	brne	.+6      	; 0x1e7a <register_code+0x158>
    1e74:	81 e2       	ldi	r24, 0x21	; 33
    1e76:	92 e0       	ldi	r25, 0x02	; 2
    1e78:	20 c0       	rjmp	.+64     	; 0x1eba <register_code+0x198>
    1e7a:	25 3b       	cpi	r18, 0xB5	; 181
    1e7c:	19 f4       	brne	.+6      	; 0x1e84 <register_code+0x162>
    1e7e:	83 e2       	ldi	r24, 0x23	; 35
    1e80:	92 e0       	ldi	r25, 0x02	; 2
    1e82:	1b c0       	rjmp	.+54     	; 0x1eba <register_code+0x198>
    1e84:	26 3b       	cpi	r18, 0xB6	; 182
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <register_code+0x16c>
    1e88:	84 e2       	ldi	r24, 0x24	; 36
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	16 c0       	rjmp	.+44     	; 0x1eba <register_code+0x198>
    1e8e:	27 3b       	cpi	r18, 0xB7	; 183
    1e90:	19 f4       	brne	.+6      	; 0x1e98 <register_code+0x176>
    1e92:	85 e2       	ldi	r24, 0x25	; 37
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	11 c0       	rjmp	.+34     	; 0x1eba <register_code+0x198>
    1e98:	28 3b       	cpi	r18, 0xB8	; 184
    1e9a:	19 f4       	brne	.+6      	; 0x1ea2 <register_code+0x180>
    1e9c:	86 e2       	ldi	r24, 0x26	; 38
    1e9e:	92 e0       	ldi	r25, 0x02	; 2
    1ea0:	0c c0       	rjmp	.+24     	; 0x1eba <register_code+0x198>
    1ea2:	29 3b       	cpi	r18, 0xB9	; 185
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <register_code+0x18a>
    1ea6:	87 e2       	ldi	r24, 0x27	; 39
    1ea8:	92 e0       	ldi	r25, 0x02	; 2
    1eaa:	07 c0       	rjmp	.+14     	; 0x1eba <register_code+0x198>
    1eac:	2a 3b       	cpi	r18, 0xBA	; 186
    1eae:	19 f0       	breq	.+6      	; 0x1eb6 <register_code+0x194>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <register_code+0x198>
    1eb6:	8a e2       	ldi	r24, 0x2A	; 42
    1eb8:	92 e0       	ldi	r25, 0x02	; 2
    1eba:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <host_consumer_send>
    1ebe:	08 95       	ret

00001ec0 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    1ec0:	af 92       	push	r10
    1ec2:	bf 92       	push	r11
    1ec4:	cf 92       	push	r12
    1ec6:	df 92       	push	r13
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	2a 97       	sbiw	r28, 0x0a	; 10
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    1ee6:	de 01       	movw	r26, r28
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	fc 01       	movw	r30, r24
    1eec:	85 e0       	ldi	r24, 0x05	; 5
    1eee:	01 90       	ld	r0, Z+
    1ef0:	0d 92       	st	X+, r0
    1ef2:	81 50       	subi	r24, 0x01	; 1
    1ef4:	e1 f7       	brne	.-8      	; 0x1eee <process_action+0x2e>
    1ef6:	0b 81       	ldd	r16, Y+3	; 0x03
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    1ef8:	f5 01       	movw	r30, r10
    1efa:	f5 80       	ldd	r15, Z+5	; 0x05
    1efc:	f2 94       	swap	r15
    1efe:	4f e0       	ldi	r20, 0x0F	; 15
    1f00:	f4 22       	and	r15, r20
#endif

    if (IS_NOEVENT(event)) { return; }
    1f02:	de 01       	movw	r26, r28
    1f04:	16 96       	adiw	r26, 0x06	; 6
    1f06:	fe 01       	movw	r30, r28
    1f08:	31 96       	adiw	r30, 0x01	; 1
    1f0a:	85 e0       	ldi	r24, 0x05	; 5
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	0d 92       	st	X+, r0
    1f10:	81 50       	subi	r24, 0x01	; 1
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <process_action+0x4c>
    1f14:	3e 81       	ldd	r19, Y+6	; 0x06
    1f16:	2f 81       	ldd	r18, Y+7	; 0x07

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	89 2b       	or	r24, r25
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <process_action+0x62>
    1f20:	f4 c1       	rjmp	.+1000   	; 0x230a <process_action+0x44a>
    1f22:	2f 3f       	cpi	r18, 0xFF	; 255
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <process_action+0x68>
    1f26:	c4 c1       	rjmp	.+904    	; 0x22b0 <process_action+0x3f0>
    1f28:	3f 3f       	cpi	r19, 0xFF	; 255
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <process_action+0x6e>
    1f2c:	c1 c1       	rjmp	.+898    	; 0x22b0 <process_action+0x3f0>
    1f2e:	ed c1       	rjmp	.+986    	; 0x230a <process_action+0x44a>
    1f30:	8d 2d       	mov	r24, r13
    1f32:	8f 70       	andi	r24, 0x0F	; 15
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
    1f34:	22 23       	and	r18, r18
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <process_action+0x7c>
    1f38:	18 2f       	mov	r17, r24
    1f3a:	03 c0       	rjmp	.+6      	; 0x1f42 <process_action+0x82>
    1f3c:	18 2f       	mov	r17, r24
    1f3e:	12 95       	swap	r17
    1f40:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    1f42:	00 23       	and	r16, r16
    1f44:	49 f0       	breq	.+18     	; 0x1f58 <process_action+0x98>
                    if (mods) {
    1f46:	11 23       	and	r17, r17
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <process_action+0x8c>
    1f4a:	8c c1       	rjmp	.+792    	; 0x2264 <process_action+0x3a4>
                        add_weak_mods(mods);
    1f4c:	81 2f       	mov	r24, r17
    1f4e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <add_weak_mods>
                        send_keyboard_report();
    1f52:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
    1f56:	86 c1       	rjmp	.+780    	; 0x2264 <process_action+0x3a4>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    1f58:	8c 2d       	mov	r24, r12
    1f5a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <unregister_code>
                    if (mods) {
    1f5e:	11 23       	and	r17, r17
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <process_action+0xa4>
    1f62:	d3 c1       	rjmp	.+934    	; 0x230a <process_action+0x44a>
                        del_weak_mods(mods);
    1f64:	81 2f       	mov	r24, r17
    1f66:	0e 94 94 17 	call	0x2f28	; 0x2f28 <del_weak_mods>
                        send_keyboard_report();
    1f6a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <send_keyboard_report>
    1f6e:	cd c1       	rjmp	.+922    	; 0x230a <process_action+0x44a>
    1f70:	8d 2d       	mov	r24, r13
    1f72:	8f 70       	andi	r24, 0x0F	; 15
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
                                                                    action.key.mods<<4;
    1f74:	20 32       	cpi	r18, 0x20	; 32
    1f76:	11 f4       	brne	.+4      	; 0x1f7c <process_action+0xbc>
    1f78:	18 2f       	mov	r17, r24
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <process_action+0xc2>
    1f7c:	18 2f       	mov	r17, r24
    1f7e:	12 95       	swap	r17
    1f80:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.layer_tap.code) {
    1f82:	cc 20       	and	r12, r12
    1f84:	21 f0       	breq	.+8      	; 0x1f8e <process_action+0xce>
    1f86:	f1 e0       	ldi	r31, 0x01	; 1
    1f88:	cf 16       	cp	r12, r31
    1f8a:	09 f5       	brne	.+66     	; 0x1fce <process_action+0x10e>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <process_action+0xf6>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    1f8e:	00 23       	and	r16, r16
    1f90:	49 f0       	breq	.+18     	; 0x1fa4 <process_action+0xe4>
                            if (tap_count == 0) {
    1f92:	ff 20       	and	r15, r15
    1f94:	31 f1       	breq	.+76     	; 0x1fe2 <process_action+0x122>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1f96:	21 e0       	ldi	r18, 0x01	; 1
    1f98:	f2 16       	cp	r15, r18
    1f9a:	19 f5       	brne	.+70     	; 0x1fe2 <process_action+0x122>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1f9c:	81 2f       	mov	r24, r17
    1f9e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <set_oneshot_mods>
    1fa2:	b3 c1       	rjmp	.+870    	; 0x230a <process_action+0x44a>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1fa4:	ff 20       	and	r15, r15
    1fa6:	21 f0       	breq	.+8      	; 0x1fb0 <process_action+0xf0>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	f8 16       	cp	r15, r24
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <process_action+0xf0>
    1fae:	ad c1       	rjmp	.+858    	; 0x230a <process_action+0x44a>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    1fb0:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <clear_oneshot_mods>
    1fb4:	2b c1       	rjmp	.+598    	; 0x220c <process_action+0x34c>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    1fb6:	00 23       	and	r16, r16
    1fb8:	29 f0       	breq	.+10     	; 0x1fc4 <process_action+0x104>
                            if (tap_count <= TAPPING_TOGGLE) {
    1fba:	e5 e0       	ldi	r30, 0x05	; 5
    1fbc:	ef 15       	cp	r30, r15
    1fbe:	08 f4       	brcc	.+2      	; 0x1fc2 <process_action+0x102>
    1fc0:	a4 c1       	rjmp	.+840    	; 0x230a <process_action+0x44a>
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <process_action+0x122>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    1fc4:	f4 e0       	ldi	r31, 0x04	; 4
    1fc6:	ff 15       	cp	r31, r15
    1fc8:	08 f4       	brcc	.+2      	; 0x1fcc <process_action+0x10c>
    1fca:	9f c1       	rjmp	.+830    	; 0x230a <process_action+0x44a>
    1fcc:	1f c1       	rjmp	.+574    	; 0x220c <process_action+0x34c>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    1fce:	00 23       	and	r16, r16
    1fd0:	61 f0       	breq	.+24     	; 0x1fea <process_action+0x12a>
                            if (tap_count > 0) {
    1fd2:	ff 20       	and	r15, r15
    1fd4:	31 f0       	breq	.+12     	; 0x1fe2 <process_action+0x122>
                                if (record->tap.interrupted) {
    1fd6:	f5 01       	movw	r30, r10
    1fd8:	85 81       	ldd	r24, Z+5	; 0x05
    1fda:	80 ff       	sbrs	r24, 0
    1fdc:	43 c1       	rjmp	.+646    	; 0x2264 <process_action+0x3a4>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    1fde:	8f 70       	andi	r24, 0x0F	; 15
    1fe0:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    1fe2:	81 2f       	mov	r24, r17
    1fe4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <register_mods>
    1fe8:	90 c1       	rjmp	.+800    	; 0x230a <process_action+0x44a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    1fea:	ff 20       	and	r15, r15
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <process_action+0x130>
    1fee:	0e c1       	rjmp	.+540    	; 0x220c <process_action+0x34c>
    1ff0:	44 c1       	rjmp	.+648    	; 0x227a <process_action+0x3ba>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    1ff2:	8d 2d       	mov	r24, r13
    1ff4:	86 95       	lsr	r24
    1ff6:	86 95       	lsr	r24
    1ff8:	83 70       	andi	r24, 0x03	; 3
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	21 f0       	breq	.+8      	; 0x2008 <process_action+0x148>
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	09 f0       	breq	.+2      	; 0x2006 <process_action+0x146>
    2004:	82 c1       	rjmp	.+772    	; 0x230a <process_action+0x44a>
    2006:	0a c0       	rjmp	.+20     	; 0x201c <process_action+0x15c>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2008:	00 23       	and	r16, r16
    200a:	19 f0       	breq	.+6      	; 0x2012 <process_action+0x152>
                        host_system_send(action.usage.code);
    200c:	c6 01       	movw	r24, r12
    200e:	93 70       	andi	r25, 0x03	; 3
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <process_action+0x156>
                    } else {
                        host_system_send(0);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <host_system_send>
    201a:	77 c1       	rjmp	.+750    	; 0x230a <process_action+0x44a>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    201c:	00 23       	and	r16, r16
    201e:	19 f0       	breq	.+6      	; 0x2026 <process_action+0x166>
                        host_consumer_send(action.usage.code);
    2020:	c6 01       	movw	r24, r12
    2022:	93 70       	andi	r25, 0x03	; 3
    2024:	02 c0       	rjmp	.+4      	; 0x202a <process_action+0x16a>
                    } else {
                        host_consumer_send(0);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <host_consumer_send>
    202e:	6d c1       	rjmp	.+730    	; 0x230a <process_action+0x44a>
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2030:	00 23       	and	r16, r16
    2032:	21 f0       	breq	.+8      	; 0x203c <process_action+0x17c>
                mousekey_on(action.key.code);
    2034:	8c 2d       	mov	r24, r12
    2036:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <mousekey_on>
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <process_action+0x182>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    203c:	8c 2d       	mov	r24, r12
    203e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mousekey_off>
                mousekey_send();
    2042:	0e 94 e6 19 	call	0x33cc	; 0x33cc <mousekey_send>
    2046:	61 c1       	rjmp	.+706    	; 0x230a <process_action+0x44a>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2048:	8d 2d       	mov	r24, r13
    204a:	83 70       	andi	r24, 0x03	; 3
    204c:	09 f0       	breq	.+2      	; 0x2050 <process_action+0x190>
    204e:	5e c0       	rjmp	.+188    	; 0x210c <process_action+0x24c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2050:	00 23       	and	r16, r16
    2052:	09 f0       	breq	.+2      	; 0x2056 <process_action+0x196>
    2054:	5a c1       	rjmp	.+692    	; 0x230a <process_action+0x44a>
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2056:	2c 2d       	mov	r18, r12
    2058:	22 95       	swap	r18
    205a:	26 95       	lsr	r18
    205c:	27 70       	andi	r18, 0x07	; 7
    205e:	22 0f       	add	r18, r18
    2060:	22 0f       	add	r18, r18
    2062:	8c 2d       	mov	r24, r12
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	e8 2e       	mov	r14, r24
    2068:	ff 24       	eor	r15, r15
    206a:	00 e0       	ldi	r16, 0x00	; 0
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	04 c0       	rjmp	.+8      	; 0x207a <process_action+0x1ba>
    2072:	ee 0c       	add	r14, r14
    2074:	ff 1c       	adc	r15, r15
    2076:	00 1f       	adc	r16, r16
    2078:	11 1f       	adc	r17, r17
    207a:	0a 94       	dec	r0
    207c:	d2 f7       	brpl	.-12     	; 0x2072 <process_action+0x1b2>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    207e:	c4 fc       	sbrc	r12, 4
    2080:	05 c0       	rjmp	.+10     	; 0x208c <process_action+0x1cc>
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <process_action+0x1ea>
    208c:	6f e0       	ldi	r22, 0x0F	; 15
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	04 c0       	rjmp	.+8      	; 0x209e <process_action+0x1de>
    2096:	66 0f       	add	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	2a 95       	dec	r18
    20a0:	d2 f7       	brpl	.-12     	; 0x2096 <process_action+0x1d6>
    20a2:	60 95       	com	r22
    20a4:	70 95       	com	r23
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    20aa:	d6 94       	lsr	r13
    20ac:	d6 94       	lsr	r13
    20ae:	f3 e0       	ldi	r31, 0x03	; 3
    20b0:	df 22       	and	r13, r31
    20b2:	4d 2d       	mov	r20, r13
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	41 30       	cpi	r20, 0x01	; 1
    20b8:	51 05       	cpc	r21, r1
    20ba:	a9 f0       	breq	.+42     	; 0x20e6 <process_action+0x226>
    20bc:	42 30       	cpi	r20, 0x02	; 2
    20be:	51 05       	cpc	r21, r1
    20c0:	1c f4       	brge	.+6      	; 0x20c8 <process_action+0x208>
    20c2:	45 2b       	or	r20, r21
    20c4:	49 f0       	breq	.+18     	; 0x20d8 <process_action+0x218>
    20c6:	21 c1       	rjmp	.+578    	; 0x230a <process_action+0x44a>
    20c8:	42 30       	cpi	r20, 0x02	; 2
    20ca:	51 05       	cpc	r21, r1
    20cc:	89 f0       	breq	.+34     	; 0x20f0 <process_action+0x230>
    20ce:	43 30       	cpi	r20, 0x03	; 3
    20d0:	51 05       	cpc	r21, r1
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <process_action+0x216>
    20d4:	1a c1       	rjmp	.+564    	; 0x230a <process_action+0x44a>
    20d6:	13 c0       	rjmp	.+38     	; 0x20fe <process_action+0x23e>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    20d8:	6e 29       	or	r22, r14
    20da:	7f 29       	or	r23, r15
    20dc:	80 2b       	or	r24, r16
    20de:	91 2b       	or	r25, r17
    20e0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <default_layer_and>
    20e4:	12 c1       	rjmp	.+548    	; 0x230a <process_action+0x44a>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    20e6:	6e 29       	or	r22, r14
    20e8:	7f 29       	or	r23, r15
    20ea:	80 2b       	or	r24, r16
    20ec:	91 2b       	or	r25, r17
    20ee:	0b c0       	rjmp	.+22     	; 0x2106 <process_action+0x246>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    20f0:	6e 29       	or	r22, r14
    20f2:	7f 29       	or	r23, r15
    20f4:	80 2b       	or	r24, r16
    20f6:	91 2b       	or	r25, r17
    20f8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <default_layer_xor>
    20fc:	06 c1       	rjmp	.+524    	; 0x230a <process_action+0x44a>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    20fe:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <default_layer_and>
    2102:	c8 01       	movw	r24, r16
    2104:	b7 01       	movw	r22, r14
    2106:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <default_layer_or>
    210a:	ff c0       	rjmp	.+510    	; 0x230a <process_action+0x44a>
    210c:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    210e:	00 23       	and	r16, r16
    2110:	11 f4       	brne	.+4      	; 0x2116 <process_action+0x256>
    2112:	96 95       	lsr	r25
    2114:	87 95       	ror	r24
    2116:	81 70       	andi	r24, 0x01	; 1
    2118:	09 f4       	brne	.+2      	; 0x211c <process_action+0x25c>
    211a:	f7 c0       	rjmp	.+494    	; 0x230a <process_action+0x44a>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    211c:	2c 2d       	mov	r18, r12
    211e:	22 95       	swap	r18
    2120:	26 95       	lsr	r18
    2122:	27 70       	andi	r18, 0x07	; 7
    2124:	22 0f       	add	r18, r18
    2126:	22 0f       	add	r18, r18
    2128:	8c 2d       	mov	r24, r12
    212a:	8f 70       	andi	r24, 0x0F	; 15
    212c:	e8 2e       	mov	r14, r24
    212e:	ff 24       	eor	r15, r15
    2130:	00 e0       	ldi	r16, 0x00	; 0
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	02 2e       	mov	r0, r18
    2136:	04 c0       	rjmp	.+8      	; 0x2140 <process_action+0x280>
    2138:	ee 0c       	add	r14, r14
    213a:	ff 1c       	adc	r15, r15
    213c:	00 1f       	adc	r16, r16
    213e:	11 1f       	adc	r17, r17
    2140:	0a 94       	dec	r0
    2142:	d2 f7       	brpl	.-12     	; 0x2138 <process_action+0x278>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2144:	c4 fc       	sbrc	r12, 4
    2146:	05 c0       	rjmp	.+10     	; 0x2152 <process_action+0x292>
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <process_action+0x2b0>
    2152:	6f e0       	ldi	r22, 0x0F	; 15
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <process_action+0x2a4>
    215c:	66 0f       	add	r22, r22
    215e:	77 1f       	adc	r23, r23
    2160:	88 1f       	adc	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	2a 95       	dec	r18
    2166:	d2 f7       	brpl	.-12     	; 0x215c <process_action+0x29c>
    2168:	60 95       	com	r22
    216a:	70 95       	com	r23
    216c:	80 95       	com	r24
    216e:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2170:	d6 94       	lsr	r13
    2172:	d6 94       	lsr	r13
    2174:	23 e0       	ldi	r18, 0x03	; 3
    2176:	d2 22       	and	r13, r18
    2178:	4d 2d       	mov	r20, r13
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	41 30       	cpi	r20, 0x01	; 1
    217e:	51 05       	cpc	r21, r1
    2180:	a9 f0       	breq	.+42     	; 0x21ac <process_action+0x2ec>
    2182:	42 30       	cpi	r20, 0x02	; 2
    2184:	51 05       	cpc	r21, r1
    2186:	1c f4       	brge	.+6      	; 0x218e <process_action+0x2ce>
    2188:	45 2b       	or	r20, r21
    218a:	49 f0       	breq	.+18     	; 0x219e <process_action+0x2de>
    218c:	be c0       	rjmp	.+380    	; 0x230a <process_action+0x44a>
    218e:	42 30       	cpi	r20, 0x02	; 2
    2190:	51 05       	cpc	r21, r1
    2192:	89 f0       	breq	.+34     	; 0x21b6 <process_action+0x2f6>
    2194:	43 30       	cpi	r20, 0x03	; 3
    2196:	51 05       	cpc	r21, r1
    2198:	09 f0       	breq	.+2      	; 0x219c <process_action+0x2dc>
    219a:	b7 c0       	rjmp	.+366    	; 0x230a <process_action+0x44a>
    219c:	13 c0       	rjmp	.+38     	; 0x21c4 <process_action+0x304>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    219e:	6e 29       	or	r22, r14
    21a0:	7f 29       	or	r23, r15
    21a2:	80 2b       	or	r24, r16
    21a4:	91 2b       	or	r25, r17
    21a6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <layer_and>
    21aa:	af c0       	rjmp	.+350    	; 0x230a <process_action+0x44a>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    21ac:	6e 29       	or	r22, r14
    21ae:	7f 29       	or	r23, r15
    21b0:	80 2b       	or	r24, r16
    21b2:	91 2b       	or	r25, r17
    21b4:	0b c0       	rjmp	.+22     	; 0x21cc <process_action+0x30c>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    21b6:	6e 29       	or	r22, r14
    21b8:	7f 29       	or	r23, r15
    21ba:	80 2b       	or	r24, r16
    21bc:	91 2b       	or	r25, r17
    21be:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_xor>
    21c2:	a3 c0       	rjmp	.+326    	; 0x230a <process_action+0x44a>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    21c4:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <layer_and>
    21c8:	c8 01       	movw	r24, r16
    21ca:	b7 01       	movw	r22, r14
    21cc:	0e 94 81 16 	call	0x2d02	; 0x2d02 <layer_or>
    21d0:	9c c0       	rjmp	.+312    	; 0x230a <process_action+0x44a>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    21d2:	80 ef       	ldi	r24, 0xF0	; 240
    21d4:	c8 16       	cp	r12, r24
    21d6:	f1 f0       	breq	.+60     	; 0x2214 <process_action+0x354>
    21d8:	8c 15       	cp	r24, r12
    21da:	20 f0       	brcs	.+8      	; 0x21e4 <process_action+0x324>
    21dc:	e0 ee       	ldi	r30, 0xE0	; 224
    21de:	ce 16       	cp	r12, r30
    21e0:	e8 f1       	brcs	.+122    	; 0x225c <process_action+0x39c>
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <process_action+0x336>
    21e4:	f2 ef       	ldi	r31, 0xF2	; 242
    21e6:	cf 16       	cp	r12, r31
    21e8:	51 f1       	breq	.+84     	; 0x223e <process_action+0x37e>
    21ea:	cf 16       	cp	r12, r31
    21ec:	18 f1       	brcs	.+70     	; 0x2234 <process_action+0x374>
    21ee:	23 ef       	ldi	r18, 0xF3	; 243
    21f0:	c2 16       	cp	r12, r18
    21f2:	a1 f5       	brne	.+104    	; 0x225c <process_action+0x39c>
    21f4:	29 c0       	rjmp	.+82     	; 0x2248 <process_action+0x388>
    21f6:	1c 2d       	mov	r17, r12
    21f8:	1f 70       	andi	r17, 0x0F	; 15
    21fa:	8d 2d       	mov	r24, r13
    21fc:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    21fe:	00 23       	and	r16, r16
    2200:	19 f0       	breq	.+6      	; 0x2208 <process_action+0x348>
                        layer_on(action.layer_tap.val);
    2202:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <layer_on>
    2206:	ed ce       	rjmp	.-550    	; 0x1fe2 <process_action+0x122>
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
    2208:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    220c:	81 2f       	mov	r24, r17
    220e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <unregister_mods>
    2212:	7b c0       	rjmp	.+246    	; 0x230a <process_action+0x44a>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2214:	00 23       	and	r16, r16
    2216:	29 f0       	breq	.+10     	; 0x2222 <process_action+0x362>
                        if (tap_count < TAPPING_TOGGLE) {
    2218:	84 e0       	ldi	r24, 0x04	; 4
    221a:	8f 15       	cp	r24, r15
    221c:	08 f4       	brcc	.+2      	; 0x2220 <process_action+0x360>
    221e:	75 c0       	rjmp	.+234    	; 0x230a <process_action+0x44a>
    2220:	04 c0       	rjmp	.+8      	; 0x222a <process_action+0x36a>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2222:	e5 e0       	ldi	r30, 0x05	; 5
    2224:	ef 15       	cp	r30, r15
    2226:	08 f4       	brcc	.+2      	; 0x222a <process_action+0x36a>
    2228:	70 c0       	rjmp	.+224    	; 0x230a <process_action+0x44a>
                            layer_invert(action.layer_tap.val);
    222a:	8d 2d       	mov	r24, r13
    222c:	8f 71       	andi	r24, 0x1F	; 31
    222e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <layer_invert>
    2232:	6b c0       	rjmp	.+214    	; 0x230a <process_action+0x44a>
    2234:	8d 2d       	mov	r24, r13
    2236:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2238:	00 23       	and	r16, r16
    223a:	29 f1       	breq	.+74     	; 0x2286 <process_action+0x3c6>
    223c:	19 c0       	rjmp	.+50     	; 0x2270 <process_action+0x3b0>
    223e:	8d 2d       	mov	r24, r13
    2240:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2242:	00 23       	and	r16, r16
    2244:	a9 f0       	breq	.+42     	; 0x2270 <process_action+0x3b0>
    2246:	1f c0       	rjmp	.+62     	; 0x2286 <process_action+0x3c6>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2248:	00 23       	and	r16, r16
    224a:	29 f0       	breq	.+10     	; 0x2256 <process_action+0x396>
    224c:	8d 2d       	mov	r24, r13
    224e:	8f 71       	andi	r24, 0x1F	; 31
    2250:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <layer_move>
    2254:	5a c0       	rjmp	.+180    	; 0x230a <process_action+0x44a>
    2256:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <layer_clear>
    225a:	57 c0       	rjmp	.+174    	; 0x230a <process_action+0x44a>
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    225c:	00 23       	and	r16, r16
    225e:	59 f0       	breq	.+22     	; 0x2276 <process_action+0x3b6>
                        if (tap_count > 0) {
    2260:	ff 20       	and	r15, r15
    2262:	21 f0       	breq	.+8      	; 0x226c <process_action+0x3ac>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2264:	8c 2d       	mov	r24, r12
    2266:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <register_code>
    226a:	4f c0       	rjmp	.+158    	; 0x230a <process_action+0x44a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    226c:	8d 2d       	mov	r24, r13
    226e:	8f 71       	andi	r24, 0x1F	; 31
    2270:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <layer_on>
    2274:	4a c0       	rjmp	.+148    	; 0x230a <process_action+0x44a>
                        }
                    } else {
                        if (tap_count > 0) {
    2276:	ff 20       	and	r15, r15
    2278:	21 f0       	breq	.+8      	; 0x2282 <process_action+0x3c2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    227a:	8c 2d       	mov	r24, r12
    227c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <unregister_code>
    2280:	44 c0       	rjmp	.+136    	; 0x230a <process_action+0x44a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    2282:	8d 2d       	mov	r24, r13
    2284:	8f 71       	andi	r24, 0x1F	; 31
    2286:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <layer_off>
    228a:	3f c0       	rjmp	.+126    	; 0x230a <process_action+0x44a>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    228c:	ff e0       	ldi	r31, 0x0F	; 15
    228e:	df 22       	and	r13, r31
    2290:	c5 01       	movw	r24, r10
    2292:	6c 2d       	mov	r22, r12
    2294:	4d 2d       	mov	r20, r13
    2296:	0e 94 2d 03 	call	0x65a	; 0x65a <action_get_macro>
    229a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <action_macro_play>
    229e:	35 c0       	rjmp	.+106    	; 0x230a <process_action+0x44a>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    22a0:	2f e0       	ldi	r18, 0x0F	; 15
    22a2:	d2 22       	and	r13, r18
    22a4:	c5 01       	movw	r24, r10
    22a6:	6c 2d       	mov	r22, r12
    22a8:	4d 2d       	mov	r20, r13
    22aa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <action_function>
    22ae:	2d c0       	rjmp	.+90     	; 0x230a <process_action+0x44a>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	9a 81       	ldd	r25, Y+2	; 0x02
    22b4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <layer_switch_get_action>
    22b8:	6c 01       	movw	r12, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    22ba:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    22be:	0e 94 09 16 	call	0x2c12	; 0x2c12 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    22c2:	8d 2d       	mov	r24, r13
    22c4:	82 95       	swap	r24
    22c6:	8f 70       	andi	r24, 0x0F	; 15
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	85 30       	cpi	r24, 0x05	; 5
    22cc:	91 05       	cpc	r25, r1
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <process_action+0x412>
    22d0:	af ce       	rjmp	.-674    	; 0x2030 <process_action+0x170>
    22d2:	86 30       	cpi	r24, 0x06	; 6
    22d4:	91 05       	cpc	r25, r1
    22d6:	54 f4       	brge	.+20     	; 0x22ec <process_action+0x42c>
    22d8:	84 30       	cpi	r24, 0x04	; 4
    22da:	91 05       	cpc	r25, r1
    22dc:	0c f0       	brlt	.+2      	; 0x22e0 <process_action+0x420>
    22de:	89 ce       	rjmp	.-750    	; 0x1ff2 <process_action+0x132>
    22e0:	2d 2d       	mov	r18, r13
    22e2:	20 7f       	andi	r18, 0xF0	; 240
    22e4:	02 97       	sbiw	r24, 0x02	; 2
    22e6:	0c f0       	brlt	.+2      	; 0x22ea <process_action+0x42a>
    22e8:	43 ce       	rjmp	.-890    	; 0x1f70 <process_action+0xb0>
    22ea:	22 ce       	rjmp	.-956    	; 0x1f30 <process_action+0x70>
    22ec:	8c 30       	cpi	r24, 0x0C	; 12
    22ee:	91 05       	cpc	r25, r1
    22f0:	3c f4       	brge	.+14     	; 0x2300 <process_action+0x440>
    22f2:	8a 30       	cpi	r24, 0x0A	; 10
    22f4:	91 05       	cpc	r25, r1
    22f6:	0c f0       	brlt	.+2      	; 0x22fa <process_action+0x43a>
    22f8:	6c cf       	rjmp	.-296    	; 0x21d2 <process_action+0x312>
    22fa:	08 97       	sbiw	r24, 0x08	; 8
    22fc:	31 f4       	brne	.+12     	; 0x230a <process_action+0x44a>
    22fe:	a4 ce       	rjmp	.-696    	; 0x2048 <process_action+0x188>
    2300:	8c 30       	cpi	r24, 0x0C	; 12
    2302:	91 05       	cpc	r25, r1
    2304:	19 f2       	breq	.-122    	; 0x228c <process_action+0x3cc>
    2306:	0f 97       	sbiw	r24, 0x0f	; 15
    2308:	59 f2       	breq	.-106    	; 0x22a0 <process_action+0x3e0>
            break;
#endif
        default:
            break;
    }
}
    230a:	2a 96       	adiw	r28, 0x0a	; 10
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	df 90       	pop	r13
    2324:	cf 90       	pop	r12
    2326:	bf 90       	pop	r11
    2328:	af 90       	pop	r10
    232a:	08 95       	ret

0000232c <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	2b 97       	sbiw	r28, 0x0b	; 11
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	34 2f       	mov	r19, r20
    2342:	4f 83       	std	Y+7, r20	; 0x07
    2344:	25 2f       	mov	r18, r21
    2346:	58 87       	std	Y+8, r21	; 0x08
    2348:	69 87       	std	Y+9, r22	; 0x09
    234a:	7a 87       	std	Y+10, r23	; 0x0a
    234c:	8b 87       	std	Y+11, r24	; 0x0b
    234e:	47 2f       	mov	r20, r23
    2350:	58 2f       	mov	r21, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2352:	fe 01       	movw	r30, r28
    2354:	31 96       	adiw	r30, 0x01	; 1
    2356:	86 e0       	ldi	r24, 0x06	; 6
    2358:	df 01       	movw	r26, r30
    235a:	1d 92       	st	X+, r1
    235c:	8a 95       	dec	r24
    235e:	e9 f7       	brne	.-6      	; 0x235a <action_exec+0x2e>
    2360:	6b 83       	std	Y+3, r22	; 0x03
    2362:	39 83       	std	Y+1, r19	; 0x01
    2364:	2a 83       	std	Y+2, r18	; 0x02
    2366:	4c 83       	std	Y+4, r20	; 0x04
    2368:	5d 83       	std	Y+5, r21	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    236a:	43 2f       	mov	r20, r19
    236c:	52 2f       	mov	r21, r18
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2376:	2b 96       	adiw	r28, 0x0b	; 11
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    238c:	00 91 56 01 	lds	r16, 0x0156
    2390:	15 c0       	rjmp	.+42     	; 0x23bc <debug_waiting_buffer+0x34>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2392:	10 e0       	ldi	r17, 0x00	; 0
    2394:	f8 01       	movw	r30, r16
    2396:	ee 0f       	add	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	e0 0f       	add	r30, r16
    239c:	f1 1f       	adc	r31, r17
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	e9 5a       	subi	r30, 0xA9	; 169
    23a4:	fe 4f       	sbci	r31, 0xFE	; 254
    23a6:	40 81       	ld	r20, Z
    23a8:	51 81       	ldd	r21, Z+1	; 0x01
    23aa:	62 81       	ldd	r22, Z+2	; 0x02
    23ac:	73 81       	ldd	r23, Z+3	; 0x03
    23ae:	84 81       	ldd	r24, Z+4	; 0x04
    23b0:	95 81       	ldd	r25, Z+5	; 0x05
    23b2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    23b6:	0f 5f       	subi	r16, 0xFF	; 255
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	07 70       	andi	r16, 0x07	; 7
    23bc:	80 91 55 01 	lds	r24, 0x0155
    23c0:	08 17       	cp	r16, r24
    23c2:	39 f7       	brne	.-50     	; 0x2392 <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    23ca:	40 91 4f 01 	lds	r20, 0x014F
    23ce:	50 91 50 01 	lds	r21, 0x0150
    23d2:	60 91 51 01 	lds	r22, 0x0151
    23d6:	70 91 52 01 	lds	r23, 0x0152
    23da:	80 91 53 01 	lds	r24, 0x0153
    23de:	90 91 54 01 	lds	r25, 0x0154
    23e2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <debug_record>
}
    23e6:	08 95       	ret

000023e8 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    23f0:	80 91 54 01 	lds	r24, 0x0154
    23f4:	82 95       	swap	r24
    23f6:	8f 70       	andi	r24, 0x0F	; 15
    23f8:	09 f0       	breq	.+2      	; 0x23fc <waiting_buffer_scan_tap+0x14>
    23fa:	6d c0       	rjmp	.+218    	; 0x24d6 <waiting_buffer_scan_tap+0xee>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    23fc:	80 91 51 01 	lds	r24, 0x0151
    2400:	88 23       	and	r24, r24
    2402:	09 f4       	brne	.+2      	; 0x2406 <waiting_buffer_scan_tap+0x1e>
    2404:	68 c0       	rjmp	.+208    	; 0x24d6 <waiting_buffer_scan_tap+0xee>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2406:	60 91 56 01 	lds	r22, 0x0156
    240a:	00 91 55 01 	lds	r16, 0x0155
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    240e:	40 91 52 01 	lds	r20, 0x0152
    2412:	50 91 53 01 	lds	r21, 0x0153
    2416:	10 91 50 01 	lds	r17, 0x0150
    241a:	70 91 4f 01 	lds	r23, 0x014F
    241e:	ea 01       	movw	r28, r20
    2420:	c0 95       	com	r28
    2422:	d0 95       	com	r29
    2424:	55 c0       	rjmp	.+170    	; 0x24d0 <waiting_buffer_scan_tap+0xe8>
    2426:	41 15       	cp	r20, r1
    2428:	51 05       	cpc	r21, r1
    242a:	09 f4       	brne	.+2      	; 0x242e <waiting_buffer_scan_tap+0x46>
    242c:	4f c0       	rjmp	.+158    	; 0x24cc <waiting_buffer_scan_tap+0xe4>
    242e:	1f 3f       	cpi	r17, 0xFF	; 255
    2430:	49 f4       	brne	.+18     	; 0x2444 <waiting_buffer_scan_tap+0x5c>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	7f 3f       	cpi	r23, 0xFF	; 255
    2438:	11 f4       	brne	.+4      	; 0x243e <waiting_buffer_scan_tap+0x56>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	88 23       	and	r24, r24
    2440:	09 f0       	breq	.+2      	; 0x2444 <waiting_buffer_scan_tap+0x5c>
    2442:	44 c0       	rjmp	.+136    	; 0x24cc <waiting_buffer_scan_tap+0xe4>
    2444:	26 2f       	mov	r18, r22
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	f9 01       	movw	r30, r18
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	e2 0f       	add	r30, r18
    2450:	f3 1f       	adc	r31, r19
    2452:	df 01       	movw	r26, r30
    2454:	aa 0f       	add	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	a9 5a       	subi	r26, 0xA9	; 169
    245a:	be 4f       	sbci	r27, 0xFE	; 254
    245c:	11 96       	adiw	r26, 0x01	; 1
    245e:	8c 91       	ld	r24, X
    2460:	11 97       	sbiw	r26, 0x01	; 1
    2462:	18 17       	cp	r17, r24
    2464:	99 f5       	brne	.+102    	; 0x24cc <waiting_buffer_scan_tap+0xe4>
    2466:	8c 91       	ld	r24, X
    2468:	78 17       	cp	r23, r24
    246a:	81 f5       	brne	.+96     	; 0x24cc <waiting_buffer_scan_tap+0xe4>
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	e7 5a       	subi	r30, 0xA7	; 167
    2472:	fe 4f       	sbci	r31, 0xFE	; 254
    2474:	80 81       	ld	r24, Z
    2476:	88 23       	and	r24, r24
    2478:	49 f5       	brne	.+82     	; 0x24cc <waiting_buffer_scan_tap+0xe4>
    247a:	13 96       	adiw	r26, 0x03	; 3
    247c:	8d 91       	ld	r24, X+
    247e:	9c 91       	ld	r25, X
    2480:	14 97       	sbiw	r26, 0x04	; 4
    2482:	84 17       	cp	r24, r20
    2484:	95 07       	cpc	r25, r21
    2486:	18 f0       	brcs	.+6      	; 0x248e <waiting_buffer_scan_tap+0xa6>
    2488:	84 1b       	sub	r24, r20
    248a:	95 0b       	sbc	r25, r21
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <waiting_buffer_scan_tap+0xaa>
    248e:	8c 0f       	add	r24, r28
    2490:	9d 1f       	adc	r25, r29
    2492:	88 3c       	cpi	r24, 0xC8	; 200
    2494:	91 05       	cpc	r25, r1
    2496:	d0 f4       	brcc	.+52     	; 0x24cc <waiting_buffer_scan_tap+0xe4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
    2498:	80 91 54 01 	lds	r24, 0x0154
    249c:	8f 70       	andi	r24, 0x0F	; 15
    249e:	80 61       	ori	r24, 0x10	; 16
    24a0:	80 93 54 01 	sts	0x0154, r24
            waiting_buffer[i].tap.count = 1;
    24a4:	f9 01       	movw	r30, r18
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	e2 0f       	add	r30, r18
    24ac:	f3 1f       	adc	r31, r19
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	e4 5a       	subi	r30, 0xA4	; 164
    24b4:	fe 4f       	sbci	r31, 0xFE	; 254
    24b6:	80 81       	ld	r24, Z
    24b8:	8f 70       	andi	r24, 0x0F	; 15
    24ba:	80 61       	ori	r24, 0x10	; 16
    24bc:	80 83       	st	Z, r24
            process_action(&tapping_key);
    24be:	8f e4       	ldi	r24, 0x4F	; 79
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    24c6:	0e 94 c4 11 	call	0x2388	; 0x2388 <debug_waiting_buffer>
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <waiting_buffer_scan_tap+0xee>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    24cc:	6f 5f       	subi	r22, 0xFF	; 255
    24ce:	67 70       	andi	r22, 0x07	; 7
    24d0:	60 17       	cp	r22, r16
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <waiting_buffer_scan_tap+0xee>
    24d4:	a8 cf       	rjmp	.-176    	; 0x2426 <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    24e0:	df 92       	push	r13
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	6b 97       	sbiw	r28, 0x1b	; 27
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2500:	dc 01       	movw	r26, r24
    2502:	12 96       	adiw	r26, 0x02	; 2
    2504:	dc 90       	ld	r13, X
    2506:	12 97       	sbiw	r26, 0x02	; 2
    2508:	4c 91       	ld	r20, X
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	5c 91       	ld	r21, X
    250e:	11 97       	sbiw	r26, 0x01	; 1
    2510:	13 96       	adiw	r26, 0x03	; 3
    2512:	ed 90       	ld	r14, X+
    2514:	fc 90       	ld	r15, X
    2516:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2518:	20 91 52 01 	lds	r18, 0x0152
    251c:	30 91 53 01 	lds	r19, 0x0153
    2520:	60 91 50 01 	lds	r22, 0x0150
    2524:	70 91 4f 01 	lds	r23, 0x014F
    2528:	21 15       	cp	r18, r1
    252a:	31 05       	cpc	r19, r1
    252c:	09 f4       	brne	.+2      	; 0x2530 <process_tapping+0x50>
    252e:	db c1       	rjmp	.+950    	; 0x28e6 <process_tapping+0x406>
    2530:	6f 3f       	cpi	r22, 0xFF	; 255
    2532:	09 f0       	breq	.+2      	; 0x2536 <process_tapping+0x56>
    2534:	03 c2       	rjmp	.+1030   	; 0x293c <process_tapping+0x45c>
    2536:	7f 3f       	cpi	r23, 0xFF	; 255
    2538:	09 f0       	breq	.+2      	; 0x253c <process_tapping+0x5c>
    253a:	00 c2       	rjmp	.+1024   	; 0x293c <process_tapping+0x45c>
    253c:	d4 c1       	rjmp	.+936    	; 0x28e6 <process_tapping+0x406>
        if (WITHIN_TAPPING_TERM(event)) {
    253e:	e2 16       	cp	r14, r18
    2540:	f3 06       	cpc	r15, r19
    2542:	40 f0       	brcs	.+16     	; 0x2554 <process_tapping+0x74>
    2544:	c7 01       	movw	r24, r14
    2546:	82 1b       	sub	r24, r18
    2548:	93 0b       	sbc	r25, r19
    254a:	88 3c       	cpi	r24, 0xC8	; 200
    254c:	91 05       	cpc	r25, r1
    254e:	08 f0       	brcs	.+2      	; 0x2552 <process_tapping+0x72>
    2550:	ee c0       	rjmp	.+476    	; 0x272e <process_tapping+0x24e>
    2552:	08 c0       	rjmp	.+16     	; 0x2564 <process_tapping+0x84>
    2554:	20 95       	com	r18
    2556:	30 95       	com	r19
    2558:	2e 0d       	add	r18, r14
    255a:	3f 1d       	adc	r19, r15
    255c:	28 3c       	cpi	r18, 0xC8	; 200
    255e:	31 05       	cpc	r19, r1
    2560:	08 f0       	brcs	.+2      	; 0x2564 <process_tapping+0x84>
    2562:	e5 c0       	rjmp	.+458    	; 0x272e <process_tapping+0x24e>
            if (tapping_key.tap.count == 0) {
    2564:	80 91 54 01 	lds	r24, 0x0154
    2568:	80 7f       	andi	r24, 0xF0	; 240
    256a:	09 f0       	breq	.+2      	; 0x256e <process_tapping+0x8e>
    256c:	95 c0       	rjmp	.+298    	; 0x2698 <process_tapping+0x1b8>
    256e:	6f 3f       	cpi	r22, 0xFF	; 255
    2570:	09 f0       	breq	.+2      	; 0x2574 <process_tapping+0x94>
    2572:	ea c1       	rjmp	.+980    	; 0x2948 <process_tapping+0x468>
    2574:	7f 3f       	cpi	r23, 0xFF	; 255
    2576:	09 f0       	breq	.+2      	; 0x257a <process_tapping+0x9a>
    2578:	e7 c1       	rjmp	.+974    	; 0x2948 <process_tapping+0x468>
    257a:	15 c0       	rjmp	.+42     	; 0x25a6 <process_tapping+0xc6>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    257c:	74 17       	cp	r23, r20
    257e:	99 f4       	brne	.+38     	; 0x25a6 <process_tapping+0xc6>
    2580:	dd 20       	and	r13, r13
    2582:	89 f4       	brne	.+34     	; 0x25a6 <process_tapping+0xc6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2584:	80 91 54 01 	lds	r24, 0x0154
    2588:	8f 70       	andi	r24, 0x0F	; 15
    258a:	80 61       	ori	r24, 0x10	; 16
    258c:	80 93 54 01 	sts	0x0154, r24
                    debug_tapping_key();
    2590:	0e 94 e5 11 	call	0x23ca	; 0x23ca <debug_tapping_key>
                    process_action(&tapping_key);
    2594:	8f e4       	ldi	r24, 0x4F	; 79
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    259c:	80 91 54 01 	lds	r24, 0x0154
    25a0:	f8 01       	movw	r30, r16
    25a2:	85 83       	std	Z+5, r24	; 0x05
    25a4:	bc c1       	rjmp	.+888    	; 0x291e <process_tapping+0x43e>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    25a6:	fd 82       	std	Y+5, r15	; 0x05
    25a8:	ec 82       	std	Y+4, r14	; 0x04
    25aa:	5a 83       	std	Y+2, r21	; 0x02
    25ac:	49 83       	std	Y+1, r20	; 0x01
    25ae:	db 82       	std	Y+3, r13	; 0x03
    25b0:	de 01       	movw	r26, r28
    25b2:	16 96       	adiw	r26, 0x06	; 6
    25b4:	fe 01       	movw	r30, r28
    25b6:	31 96       	adiw	r30, 0x01	; 1
    25b8:	85 e0       	ldi	r24, 0x05	; 5
    25ba:	01 90       	ld	r0, Z+
    25bc:	0d 92       	st	X+, r0
    25be:	81 50       	subi	r24, 0x01	; 1
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <process_tapping+0xda>
    25c2:	68 85       	ldd	r22, Y+8	; 0x08
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    25c4:	de 01       	movw	r26, r28
    25c6:	1b 96       	adiw	r26, 0x0b	; 11
    25c8:	fe 01       	movw	r30, r28
    25ca:	36 96       	adiw	r30, 0x06	; 6
    25cc:	85 e0       	ldi	r24, 0x05	; 5
    25ce:	01 90       	ld	r0, Z+
    25d0:	0d 92       	st	X+, r0
    25d2:	81 50       	subi	r24, 0x01	; 1
    25d4:	e1 f7       	brne	.-8      	; 0x25ce <process_tapping+0xee>
    25d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    25d8:	3b 85       	ldd	r19, Y+11	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    25da:	8e 85       	ldd	r24, Y+14	; 0x0e
    25dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    25de:	89 2b       	or	r24, r25
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <process_tapping+0x104>
    25e2:	51 c0       	rjmp	.+162    	; 0x2686 <process_tapping+0x1a6>
    25e4:	2f 3f       	cpi	r18, 0xFF	; 255
    25e6:	09 f0       	breq	.+2      	; 0x25ea <process_tapping+0x10a>
    25e8:	b3 c1       	rjmp	.+870    	; 0x2950 <process_tapping+0x470>
    25ea:	3f 3f       	cpi	r19, 0xFF	; 255
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <process_tapping+0x110>
    25ee:	b0 c1       	rjmp	.+864    	; 0x2950 <process_tapping+0x470>
    25f0:	4a c0       	rjmp	.+148    	; 0x2686 <process_tapping+0x1a6>
    25f2:	fd 82       	std	Y+5, r15	; 0x05
    25f4:	ec 82       	std	Y+4, r14	; 0x04
    25f6:	5a 83       	std	Y+2, r21	; 0x02
    25f8:	49 83       	std	Y+1, r20	; 0x01
    25fa:	db 82       	std	Y+3, r13	; 0x03
    25fc:	de 01       	movw	r26, r28
    25fe:	1b 96       	adiw	r26, 0x0b	; 11
    2600:	fe 01       	movw	r30, r28
    2602:	31 96       	adiw	r30, 0x01	; 1
    2604:	85 e0       	ldi	r24, 0x05	; 5
    2606:	01 90       	ld	r0, Z+
    2608:	0d 92       	st	X+, r0
    260a:	81 50       	subi	r24, 0x01	; 1
    260c:	e1 f7       	brne	.-8      	; 0x2606 <process_tapping+0x126>
    260e:	fc 84       	ldd	r15, Y+12	; 0x0c
    2610:	7b 85       	ldd	r23, Y+11	; 0x0b
    2612:	6d 85       	ldd	r22, Y+13	; 0x0d
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2614:	80 91 56 01 	lds	r24, 0x0156
    2618:	90 91 55 01 	lds	r25, 0x0155
    261c:	1f c0       	rjmp	.+62     	; 0x265c <process_tapping+0x17c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	f9 01       	movw	r30, r18
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	e2 0f       	add	r30, r18
    262a:	f3 1f       	adc	r31, r19
    262c:	df 01       	movw	r26, r30
    262e:	aa 0f       	add	r26, r26
    2630:	bb 1f       	adc	r27, r27
    2632:	a9 5a       	subi	r26, 0xA9	; 169
    2634:	be 4f       	sbci	r27, 0xFE	; 254
    2636:	11 96       	adiw	r26, 0x01	; 1
    2638:	8c 91       	ld	r24, X
    263a:	11 97       	sbiw	r26, 0x01	; 1
    263c:	f8 16       	cp	r15, r24
    263e:	51 f4       	brne	.+20     	; 0x2654 <process_tapping+0x174>
    2640:	8c 91       	ld	r24, X
    2642:	78 17       	cp	r23, r24
    2644:	39 f4       	brne	.+14     	; 0x2654 <process_tapping+0x174>
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	e7 5a       	subi	r30, 0xA7	; 167
    264c:	fe 4f       	sbci	r31, 0xFE	; 254
    264e:	80 81       	ld	r24, Z
    2650:	68 17       	cp	r22, r24
    2652:	c9 f4       	brne	.+50     	; 0x2686 <process_tapping+0x1a6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2654:	2f 5f       	subi	r18, 0xFF	; 255
    2656:	3f 4f       	sbci	r19, 0xFF	; 255
    2658:	82 2f       	mov	r24, r18
    265a:	87 70       	andi	r24, 0x07	; 7
    265c:	89 17       	cp	r24, r25
    265e:	f9 f6       	brne	.-66     	; 0x261e <process_tapping+0x13e>
    2660:	8d c1       	rjmp	.+794    	; 0x297c <process_tapping+0x49c>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2662:	9f 70       	andi	r25, 0x0F	; 15
    2664:	59 f0       	breq	.+22     	; 0x267c <process_tapping+0x19c>
    2666:	44 23       	and	r20, r20
    2668:	49 f4       	brne	.+18     	; 0x267c <process_tapping+0x19c>
    266a:	59 c1       	rjmp	.+690    	; 0x291e <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    266c:	9f 70       	andi	r25, 0x0F	; 15
    266e:	31 f0       	breq	.+12     	; 0x267c <process_tapping+0x19c>
    2670:	d8 01       	movw	r26, r16
    2672:	15 96       	adiw	r26, 0x05	; 5
    2674:	8c 91       	ld	r24, X
    2676:	80 7f       	andi	r24, 0xF0	; 240
    2678:	09 f4       	brne	.+2      	; 0x267c <process_tapping+0x19c>
    267a:	51 c1       	rjmp	.+674    	; 0x291e <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
    267c:	40 5e       	subi	r20, 0xE0	; 224
    267e:	48 30       	cpi	r20, 0x08	; 8
    2680:	08 f4       	brcc	.+2      	; 0x2684 <process_tapping+0x1a4>
    2682:	4d c1       	rjmp	.+666    	; 0x291e <process_tapping+0x43e>
    2684:	48 c1       	rjmp	.+656    	; 0x2916 <process_tapping+0x436>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2686:	dd 20       	and	r13, r13
    2688:	09 f4       	brne	.+2      	; 0x268c <process_tapping+0x1ac>
    268a:	49 c1       	rjmp	.+658    	; 0x291e <process_tapping+0x43e>
                        tapping_key.tap.interrupted = true;
    268c:	80 91 54 01 	lds	r24, 0x0154
    2690:	81 60       	ori	r24, 0x01	; 1
    2692:	80 93 54 01 	sts	0x0154, r24
    2696:	43 c1       	rjmp	.+646    	; 0x291e <process_tapping+0x43e>
    2698:	6f 3f       	cpi	r22, 0xFF	; 255
    269a:	09 f0       	breq	.+2      	; 0x269e <process_tapping+0x1be>
    269c:	5d c1       	rjmp	.+698    	; 0x2958 <process_tapping+0x478>
    269e:	7f 3f       	cpi	r23, 0xFF	; 255
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <process_tapping+0x1c4>
    26a2:	5a c1       	rjmp	.+692    	; 0x2958 <process_tapping+0x478>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <process_tapping+0x1ee>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    26a6:	74 17       	cp	r23, r20
    26a8:	91 f4       	brne	.+36     	; 0x26ce <process_tapping+0x1ee>
    26aa:	dd 20       	and	r13, r13
    26ac:	81 f4       	brne	.+32     	; 0x26ce <process_tapping+0x1ee>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    26ae:	80 91 54 01 	lds	r24, 0x0154
    26b2:	f8 01       	movw	r30, r16
    26b4:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    26b6:	c8 01       	movw	r24, r16
    26b8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>
                    tapping_key = *keyp;
    26bc:	af e4       	ldi	r26, 0x4F	; 79
    26be:	b1 e0       	ldi	r27, 0x01	; 1
    26c0:	f8 01       	movw	r30, r16
    26c2:	86 e0       	ldi	r24, 0x06	; 6
    26c4:	01 90       	ld	r0, Z+
    26c6:	0d 92       	st	X+, r0
    26c8:	81 50       	subi	r24, 0x01	; 1
    26ca:	e1 f7       	brne	.-8      	; 0x26c4 <process_tapping+0x1e4>
    26cc:	20 c1       	rjmp	.+576    	; 0x290e <process_tapping+0x42e>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    26ce:	5a 83       	std	Y+2, r21	; 0x02
    26d0:	49 83       	std	Y+1, r20	; 0x01
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <is_tap_key>
    26da:	88 23       	and	r24, r24
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <process_tapping+0x200>
    26de:	1b c1       	rjmp	.+566    	; 0x2916 <process_tapping+0x436>
    26e0:	dd 20       	and	r13, r13
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <process_tapping+0x206>
    26e4:	18 c1       	rjmp	.+560    	; 0x2916 <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    26e6:	30 91 54 01 	lds	r19, 0x0154
    26ea:	83 2f       	mov	r24, r19
    26ec:	82 95       	swap	r24
    26ee:	8f 70       	andi	r24, 0x0F	; 15
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	02 97       	sbiw	r24, 0x02	; 2
    26f4:	9c f0       	brlt	.+38     	; 0x271c <process_tapping+0x23c>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    26f6:	90 91 50 01 	lds	r25, 0x0150
    26fa:	20 91 4f 01 	lds	r18, 0x014F
    26fe:	fe 01       	movw	r30, r28
    2700:	70 96       	adiw	r30, 0x10	; 16
    2702:	86 e0       	ldi	r24, 0x06	; 6
    2704:	df 01       	movw	r26, r30
    2706:	1d 92       	st	X+, r1
    2708:	8a 95       	dec	r24
    270a:	e9 f7       	brne	.-6      	; 0x2706 <process_tapping+0x226>
    270c:	99 8b       	std	Y+17, r25	; 0x11
    270e:	28 8b       	std	Y+16, r18	; 0x10
    2710:	fc 8a       	std	Y+20, r15	; 0x14
    2712:	eb 8a       	std	Y+19, r14	; 0x13
    2714:	3d 8b       	std	Y+21, r19	; 0x15
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2716:	cf 01       	movw	r24, r30
    2718:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    271c:	af e4       	ldi	r26, 0x4F	; 79
    271e:	b1 e0       	ldi	r27, 0x01	; 1
    2720:	f8 01       	movw	r30, r16
    2722:	86 e0       	ldi	r24, 0x06	; 6
    2724:	01 90       	ld	r0, Z+
    2726:	0d 92       	st	X+, r0
    2728:	81 50       	subi	r24, 0x01	; 1
    272a:	e1 f7       	brne	.-8      	; 0x2724 <process_tapping+0x244>
    272c:	ee c0       	rjmp	.+476    	; 0x290a <process_tapping+0x42a>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    272e:	80 91 54 01 	lds	r24, 0x0154
    2732:	80 7f       	andi	r24, 0xF0	; 240
    2734:	a9 f4       	brne	.+42     	; 0x2760 <process_tapping+0x280>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2736:	7e 2d       	mov	r23, r14
    2738:	fd 82       	std	Y+5, r15	; 0x05
    273a:	ec 82       	std	Y+4, r14	; 0x04
    273c:	5a 83       	std	Y+2, r21	; 0x02
    273e:	49 83       	std	Y+1, r20	; 0x01
    2740:	db 82       	std	Y+3, r13	; 0x03
    2742:	6d 2d       	mov	r22, r13
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <debug_event>
                process_action(&tapping_key);
    274a:	0f e4       	ldi	r16, 0x4F	; 79
    274c:	11 e0       	ldi	r17, 0x01	; 1
    274e:	c8 01       	movw	r24, r16
    2750:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>
                tapping_key = (keyrecord_t){};
    2754:	86 e0       	ldi	r24, 0x06	; 6
    2756:	f8 01       	movw	r30, r16
    2758:	11 92       	st	Z+, r1
    275a:	8a 95       	dec	r24
    275c:	e9 f7       	brne	.-6      	; 0x2758 <process_tapping+0x278>
    275e:	c0 c0       	rjmp	.+384    	; 0x28e0 <process_tapping+0x400>
    2760:	6f 3f       	cpi	r22, 0xFF	; 255
    2762:	09 f0       	breq	.+2      	; 0x2766 <process_tapping+0x286>
    2764:	fd c0       	rjmp	.+506    	; 0x2960 <process_tapping+0x480>
    2766:	7f 3f       	cpi	r23, 0xFF	; 255
    2768:	09 f0       	breq	.+2      	; 0x276c <process_tapping+0x28c>
    276a:	fa c0       	rjmp	.+500    	; 0x2960 <process_tapping+0x480>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <process_tapping+0x2b6>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    276e:	74 17       	cp	r23, r20
    2770:	91 f4       	brne	.+36     	; 0x2796 <process_tapping+0x2b6>
    2772:	dd 20       	and	r13, r13
    2774:	81 f4       	brne	.+32     	; 0x2796 <process_tapping+0x2b6>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2776:	80 91 54 01 	lds	r24, 0x0154
    277a:	d8 01       	movw	r26, r16
    277c:	15 96       	adiw	r26, 0x05	; 5
    277e:	8c 93       	st	X, r24
                    process_action(keyp);
    2780:	c8 01       	movw	r24, r16
    2782:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>
                    tapping_key = (keyrecord_t){};
    2786:	ef e4       	ldi	r30, 0x4F	; 79
    2788:	f1 e0       	ldi	r31, 0x01	; 1
    278a:	86 e0       	ldi	r24, 0x06	; 6
    278c:	df 01       	movw	r26, r30
    278e:	1d 92       	st	X+, r1
    2790:	8a 95       	dec	r24
    2792:	e9 f7       	brne	.-6      	; 0x278e <process_tapping+0x2ae>
    2794:	be c0       	rjmp	.+380    	; 0x2912 <process_tapping+0x432>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2796:	5a 83       	std	Y+2, r21	; 0x02
    2798:	49 83       	std	Y+1, r20	; 0x01
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <is_tap_key>
    27a2:	88 23       	and	r24, r24
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <process_tapping+0x2c8>
    27a6:	b7 c0       	rjmp	.+366    	; 0x2916 <process_tapping+0x436>
    27a8:	dd 20       	and	r13, r13
    27aa:	09 f4       	brne	.+2      	; 0x27ae <process_tapping+0x2ce>
    27ac:	b4 c0       	rjmp	.+360    	; 0x2916 <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    27ae:	30 91 54 01 	lds	r19, 0x0154
    27b2:	83 2f       	mov	r24, r19
    27b4:	82 95       	swap	r24
    27b6:	8f 70       	andi	r24, 0x0F	; 15
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 97       	sbiw	r24, 0x02	; 2
    27bc:	9c f0       	brlt	.+38     	; 0x27e4 <process_tapping+0x304>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    27be:	90 91 50 01 	lds	r25, 0x0150
    27c2:	20 91 4f 01 	lds	r18, 0x014F
    27c6:	fe 01       	movw	r30, r28
    27c8:	76 96       	adiw	r30, 0x16	; 22
    27ca:	86 e0       	ldi	r24, 0x06	; 6
    27cc:	df 01       	movw	r26, r30
    27ce:	1d 92       	st	X+, r1
    27d0:	8a 95       	dec	r24
    27d2:	e9 f7       	brne	.-6      	; 0x27ce <process_tapping+0x2ee>
    27d4:	9f 8b       	std	Y+23, r25	; 0x17
    27d6:	2e 8b       	std	Y+22, r18	; 0x16
    27d8:	fa 8e       	std	Y+26, r15	; 0x1a
    27da:	e9 8e       	std	Y+25, r14	; 0x19
    27dc:	3b 8f       	std	Y+27, r19	; 0x1b
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    27de:	cf 01       	movw	r24, r30
    27e0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    27e4:	af e4       	ldi	r26, 0x4F	; 79
    27e6:	b1 e0       	ldi	r27, 0x01	; 1
    27e8:	f8 01       	movw	r30, r16
    27ea:	86 e0       	ldi	r24, 0x06	; 6
    27ec:	01 90       	ld	r0, Z+
    27ee:	0d 92       	st	X+, r0
    27f0:	81 50       	subi	r24, 0x01	; 1
    27f2:	e1 f7       	brne	.-8      	; 0x27ec <process_tapping+0x30c>
    27f4:	8a c0       	rjmp	.+276    	; 0x290a <process_tapping+0x42a>
    27f6:	6f 3f       	cpi	r22, 0xFF	; 255
    27f8:	09 f0       	breq	.+2      	; 0x27fc <process_tapping+0x31c>
    27fa:	b6 c0       	rjmp	.+364    	; 0x2968 <process_tapping+0x488>
    27fc:	7f 3f       	cpi	r23, 0xFF	; 255
    27fe:	09 f0       	breq	.+2      	; 0x2802 <process_tapping+0x322>
    2800:	b3 c0       	rjmp	.+358    	; 0x2968 <process_tapping+0x488>
    2802:	71 c0       	rjmp	.+226    	; 0x28e6 <process_tapping+0x406>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2804:	e2 16       	cp	r14, r18
    2806:	f3 06       	cpc	r15, r19
    2808:	40 f0       	brcs	.+16     	; 0x281a <process_tapping+0x33a>
    280a:	c7 01       	movw	r24, r14
    280c:	82 1b       	sub	r24, r18
    280e:	93 0b       	sbc	r25, r19
    2810:	88 3c       	cpi	r24, 0xC8	; 200
    2812:	91 05       	cpc	r25, r1
    2814:	08 f0       	brcs	.+2      	; 0x2818 <process_tapping+0x338>
    2816:	53 c0       	rjmp	.+166    	; 0x28be <process_tapping+0x3de>
    2818:	08 c0       	rjmp	.+16     	; 0x282a <process_tapping+0x34a>
    281a:	20 95       	com	r18
    281c:	30 95       	com	r19
    281e:	2e 0d       	add	r18, r14
    2820:	3f 1d       	adc	r19, r15
    2822:	28 3c       	cpi	r18, 0xC8	; 200
    2824:	31 05       	cpc	r19, r1
    2826:	08 f0       	brcs	.+2      	; 0x282a <process_tapping+0x34a>
    2828:	4a c0       	rjmp	.+148    	; 0x28be <process_tapping+0x3de>
            if (event.pressed) {
    282a:	dd 20       	and	r13, r13
    282c:	09 f4       	brne	.+2      	; 0x2830 <process_tapping+0x350>
    282e:	73 c0       	rjmp	.+230    	; 0x2916 <process_tapping+0x436>
    2830:	6f 3f       	cpi	r22, 0xFF	; 255
    2832:	09 f0       	breq	.+2      	; 0x2836 <process_tapping+0x356>
    2834:	9f c0       	rjmp	.+318    	; 0x2974 <process_tapping+0x494>
    2836:	7f 3f       	cpi	r23, 0xFF	; 255
    2838:	09 f0       	breq	.+2      	; 0x283c <process_tapping+0x35c>
    283a:	9c c0       	rjmp	.+312    	; 0x2974 <process_tapping+0x494>
    283c:	29 c0       	rjmp	.+82     	; 0x2890 <process_tapping+0x3b0>
                if (IS_TAPPING_KEY(event.key)) {
    283e:	74 17       	cp	r23, r20
    2840:	39 f5       	brne	.+78     	; 0x2890 <process_tapping+0x3b0>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2842:	90 91 54 01 	lds	r25, 0x0154
    2846:	90 fd       	sbrc	r25, 0
    2848:	1a c0       	rjmp	.+52     	; 0x287e <process_tapping+0x39e>
    284a:	89 2f       	mov	r24, r25
    284c:	82 95       	swap	r24
    284e:	8f 70       	andi	r24, 0x0F	; 15
    2850:	b1 f0       	breq	.+44     	; 0x287e <process_tapping+0x39e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2852:	f8 01       	movw	r30, r16
    2854:	95 83       	std	Z+5, r25	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2856:	8f 30       	cpi	r24, 0x0F	; 15
    2858:	31 f0       	breq	.+12     	; 0x2866 <process_tapping+0x386>
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	82 95       	swap	r24
    285e:	80 7f       	andi	r24, 0xF0	; 240
    2860:	9f 70       	andi	r25, 0x0F	; 15
    2862:	98 2b       	or	r25, r24
    2864:	95 83       	std	Z+5, r25	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2866:	c8 01       	movw	r24, r16
    2868:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>
                        tapping_key = *keyp;
    286c:	af e4       	ldi	r26, 0x4F	; 79
    286e:	b1 e0       	ldi	r27, 0x01	; 1
    2870:	f8 01       	movw	r30, r16
    2872:	86 e0       	ldi	r24, 0x06	; 6
    2874:	01 90       	ld	r0, Z+
    2876:	0d 92       	st	X+, r0
    2878:	81 50       	subi	r24, 0x01	; 1
    287a:	e1 f7       	brne	.-8      	; 0x2874 <process_tapping+0x394>
    287c:	48 c0       	rjmp	.+144    	; 0x290e <process_tapping+0x42e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    287e:	af e4       	ldi	r26, 0x4F	; 79
    2880:	b1 e0       	ldi	r27, 0x01	; 1
    2882:	f8 01       	movw	r30, r16
    2884:	86 e0       	ldi	r24, 0x06	; 6
    2886:	01 90       	ld	r0, Z+
    2888:	0d 92       	st	X+, r0
    288a:	81 50       	subi	r24, 0x01	; 1
    288c:	e1 f7       	brne	.-8      	; 0x2886 <process_tapping+0x3a6>
    288e:	41 c0       	rjmp	.+130    	; 0x2912 <process_tapping+0x432>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    2890:	5a 83       	std	Y+2, r21	; 0x02
    2892:	49 83       	std	Y+1, r20	; 0x01
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <is_tap_key>
    289c:	88 23       	and	r24, r24
    289e:	49 f0       	breq	.+18     	; 0x28b2 <process_tapping+0x3d2>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    28a0:	af e4       	ldi	r26, 0x4F	; 79
    28a2:	b1 e0       	ldi	r27, 0x01	; 1
    28a4:	f8 01       	movw	r30, r16
    28a6:	86 e0       	ldi	r24, 0x06	; 6
    28a8:	01 90       	ld	r0, Z+
    28aa:	0d 92       	st	X+, r0
    28ac:	81 50       	subi	r24, 0x01	; 1
    28ae:	e1 f7       	brne	.-8      	; 0x28a8 <process_tapping+0x3c8>
    28b0:	2c c0       	rjmp	.+88     	; 0x290a <process_tapping+0x42a>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    28b2:	80 91 54 01 	lds	r24, 0x0154
    28b6:	81 60       	ori	r24, 0x01	; 1
    28b8:	80 93 54 01 	sts	0x0154, r24
    28bc:	2c c0       	rjmp	.+88     	; 0x2916 <process_tapping+0x436>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    28be:	7e 2d       	mov	r23, r14
    28c0:	fd 82       	std	Y+5, r15	; 0x05
    28c2:	ec 82       	std	Y+4, r14	; 0x04
    28c4:	5a 83       	std	Y+2, r21	; 0x02
    28c6:	49 83       	std	Y+1, r20	; 0x01
    28c8:	db 82       	std	Y+3, r13	; 0x03
    28ca:	6d 2d       	mov	r22, r13
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <debug_event>
            tapping_key = (keyrecord_t){};
    28d2:	ef e4       	ldi	r30, 0x4F	; 79
    28d4:	f1 e0       	ldi	r31, 0x01	; 1
    28d6:	86 e0       	ldi	r24, 0x06	; 6
    28d8:	df 01       	movw	r26, r30
    28da:	1d 92       	st	X+, r1
    28dc:	8a 95       	dec	r24
    28de:	e9 f7       	brne	.-6      	; 0x28da <process_tapping+0x3fa>
            debug_tapping_key();
    28e0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <debug_tapping_key>
    28e4:	1c c0       	rjmp	.+56     	; 0x291e <process_tapping+0x43e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    28e6:	dd 20       	and	r13, r13
    28e8:	b1 f0       	breq	.+44     	; 0x2916 <process_tapping+0x436>
    28ea:	5a 83       	std	Y+2, r21	; 0x02
    28ec:	49 83       	std	Y+1, r20	; 0x01
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <is_tap_key>
    28f6:	88 23       	and	r24, r24
    28f8:	71 f0       	breq	.+28     	; 0x2916 <process_tapping+0x436>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    28fa:	af e4       	ldi	r26, 0x4F	; 79
    28fc:	b1 e0       	ldi	r27, 0x01	; 1
    28fe:	f8 01       	movw	r30, r16
    2900:	86 e0       	ldi	r24, 0x06	; 6
    2902:	01 90       	ld	r0, Z+
    2904:	0d 92       	st	X+, r0
    2906:	81 50       	subi	r24, 0x01	; 1
    2908:	e1 f7       	brne	.-8      	; 0x2902 <process_tapping+0x422>
            waiting_buffer_scan_tap();
    290a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <waiting_buffer_scan_tap>
            debug_tapping_key();
    290e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <debug_tapping_key>
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	05 c0       	rjmp	.+10     	; 0x2920 <process_tapping+0x440>
            return true;
        } else {
            process_action(keyp);
    2916:	c8 01       	movw	r24, r16
    2918:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <process_action>
    291c:	fa cf       	rjmp	.-12     	; 0x2912 <process_tapping+0x432>
            return true;
    291e:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    2920:	6b 96       	adiw	r28, 0x1b	; 27
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	df 90       	pop	r13
    293a:	08 95       	ret
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    293c:	80 91 51 01 	lds	r24, 0x0151
    2940:	88 23       	and	r24, r24
    2942:	09 f4       	brne	.+2      	; 0x2946 <process_tapping+0x466>
    2944:	58 cf       	rjmp	.-336    	; 0x27f6 <process_tapping+0x316>
    2946:	fb cd       	rjmp	.-1034   	; 0x253e <process_tapping+0x5e>
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2948:	65 17       	cp	r22, r21
    294a:	09 f0       	breq	.+2      	; 0x294e <process_tapping+0x46e>
    294c:	2c ce       	rjmp	.-936    	; 0x25a6 <process_tapping+0xc6>
    294e:	16 ce       	rjmp	.-980    	; 0x257c <process_tapping+0x9c>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2950:	61 30       	cpi	r22, 0x01	; 1
    2952:	09 f4       	brne	.+2      	; 0x2956 <process_tapping+0x476>
    2954:	98 ce       	rjmp	.-720    	; 0x2686 <process_tapping+0x1a6>
    2956:	4d ce       	rjmp	.-870    	; 0x25f2 <process_tapping+0x112>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2958:	65 17       	cp	r22, r21
    295a:	09 f0       	breq	.+2      	; 0x295e <process_tapping+0x47e>
    295c:	b8 ce       	rjmp	.-656    	; 0x26ce <process_tapping+0x1ee>
    295e:	a3 ce       	rjmp	.-698    	; 0x26a6 <process_tapping+0x1c6>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2960:	65 17       	cp	r22, r21
    2962:	09 f0       	breq	.+2      	; 0x2966 <process_tapping+0x486>
    2964:	18 cf       	rjmp	.-464    	; 0x2796 <process_tapping+0x2b6>
    2966:	03 cf       	rjmp	.-506    	; 0x276e <process_tapping+0x28e>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
    2968:	80 91 51 01 	lds	r24, 0x0151
    296c:	88 23       	and	r24, r24
    296e:	09 f0       	breq	.+2      	; 0x2972 <process_tapping+0x492>
    2970:	ba cf       	rjmp	.-140    	; 0x28e6 <process_tapping+0x406>
    2972:	48 cf       	rjmp	.-368    	; 0x2804 <process_tapping+0x324>
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
    2974:	65 17       	cp	r22, r21
    2976:	09 f0       	breq	.+2      	; 0x297a <process_tapping+0x49a>
    2978:	8b cf       	rjmp	.-234    	; 0x2890 <process_tapping+0x3b0>
    297a:	61 cf       	rjmp	.-318    	; 0x283e <process_tapping+0x35e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    297c:	5a 83       	std	Y+2, r21	; 0x02
    297e:	49 83       	std	Y+1, r20	; 0x01
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <layer_switch_get_action>
    2988:	48 2f       	mov	r20, r24
                    switch (action.kind.id) {
    298a:	89 2f       	mov	r24, r25
    298c:	82 95       	swap	r24
    298e:	8f 70       	andi	r24, 0x0F	; 15
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	22 30       	cpi	r18, 0x02	; 2
    2996:	31 05       	cpc	r19, r1
    2998:	0c f4       	brge	.+2      	; 0x299c <process_tapping+0x4bc>
    299a:	63 ce       	rjmp	.-826    	; 0x2662 <process_tapping+0x182>
    299c:	24 30       	cpi	r18, 0x04	; 4
    299e:	31 05       	cpc	r19, r1
    29a0:	0c f0       	brlt	.+2      	; 0x29a4 <process_tapping+0x4c4>
    29a2:	b9 cf       	rjmp	.-142    	; 0x2916 <process_tapping+0x436>
    29a4:	63 ce       	rjmp	.-826    	; 0x266c <process_tapping+0x18c>

000029a6 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	2c 97       	sbiw	r28, 0x0c	; 12
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	4f 83       	std	Y+7, r20	; 0x07
    29c0:	58 87       	std	Y+8, r21	; 0x08
    29c2:	69 87       	std	Y+9, r22	; 0x09
    29c4:	7a 87       	std	Y+10, r23	; 0x0a
    29c6:	8b 87       	std	Y+11, r24	; 0x0b
    29c8:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    29ca:	8e 01       	movw	r16, r28
    29cc:	09 5f       	subi	r16, 0xF9	; 249
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	c8 01       	movw	r24, r16
    29d2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <process_tapping>
    29d6:	88 23       	and	r24, r24
    29d8:	d9 f0       	breq	.+54     	; 0x2a10 <action_tapping_process+0x6a>
        if (!IS_NOEVENT(record.event)) {
    29da:	28 85       	ldd	r18, Y+8	; 0x08
    29dc:	3f 81       	ldd	r19, Y+7	; 0x07
    29de:	8a 85       	ldd	r24, Y+10	; 0x0a
    29e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29e2:	89 2b       	or	r24, r25
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <action_tapping_process+0x42>
    29e6:	6b c0       	rjmp	.+214    	; 0x2abe <action_tapping_process+0x118>
    29e8:	2f 3f       	cpi	r18, 0xFF	; 255
    29ea:	49 f4       	brne	.+18     	; 0x29fe <action_tapping_process+0x58>
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	3f 3f       	cpi	r19, 0xFF	; 255
    29f2:	11 f4       	brne	.+4      	; 0x29f8 <action_tapping_process+0x52>
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	88 23       	and	r24, r24
    29fa:	09 f0       	breq	.+2      	; 0x29fe <action_tapping_process+0x58>
    29fc:	60 c0       	rjmp	.+192    	; 0x2abe <action_tapping_process+0x118>
            debug("processed: "); debug_record(record); debug("\n");
    29fe:	4f 81       	ldd	r20, Y+7	; 0x07
    2a00:	58 85       	ldd	r21, Y+8	; 0x08
    2a02:	69 85       	ldd	r22, Y+9	; 0x09
    2a04:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a06:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a08:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a0a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <debug_record>
    2a0e:	57 c0       	rjmp	.+174    	; 0x2abe <action_tapping_process+0x118>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
    2a10:	de 01       	movw	r26, r28
    2a12:	11 96       	adiw	r26, 0x01	; 1
    2a14:	f8 01       	movw	r30, r16
    2a16:	86 e0       	ldi	r24, 0x06	; 6
    2a18:	01 90       	ld	r0, Z+
    2a1a:	0d 92       	st	X+, r0
    2a1c:	81 50       	subi	r24, 0x01	; 1
    2a1e:	e1 f7       	brne	.-8      	; 0x2a18 <action_tapping_process+0x72>
    2a20:	f9 81       	ldd	r31, Y+1	; 0x01
    2a22:	ea 81       	ldd	r30, Y+2	; 0x02
    2a24:	4c 81       	ldd	r20, Y+4	; 0x04
    2a26:	5d 81       	ldd	r21, Y+5	; 0x05
    2a28:	41 15       	cp	r20, r1
    2a2a:	51 05       	cpc	r21, r1
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <action_tapping_process+0x8a>
    2a2e:	47 c0       	rjmp	.+142    	; 0x2abe <action_tapping_process+0x118>
    2a30:	ef 3f       	cpi	r30, 0xFF	; 255
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <action_tapping_process+0x90>
    2a34:	4c c0       	rjmp	.+152    	; 0x2ace <action_tapping_process+0x128>
    2a36:	ff 3f       	cpi	r31, 0xFF	; 255
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <action_tapping_process+0x96>
    2a3a:	49 c0       	rjmp	.+146    	; 0x2ace <action_tapping_process+0x128>
    2a3c:	40 c0       	rjmp	.+128    	; 0x2abe <action_tapping_process+0x118>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2a3e:	f9 83       	std	Y+1, r31	; 0x01
    2a40:	ea 83       	std	Y+2, r30	; 0x02
    2a42:	5d 83       	std	Y+5, r21	; 0x05
    2a44:	4c 83       	std	Y+4, r20	; 0x04
    2a46:	f9 01       	movw	r30, r18
    2a48:	ee 0f       	add	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	e2 0f       	add	r30, r18
    2a4e:	f3 1f       	adc	r31, r19
    2a50:	ee 0f       	add	r30, r30
    2a52:	ff 1f       	adc	r31, r31
    2a54:	e9 5a       	subi	r30, 0xA9	; 169
    2a56:	fe 4f       	sbci	r31, 0xFE	; 254
    2a58:	de 01       	movw	r26, r28
    2a5a:	11 96       	adiw	r26, 0x01	; 1
    2a5c:	86 e0       	ldi	r24, 0x06	; 6
    2a5e:	0d 90       	ld	r0, X+
    2a60:	01 92       	st	Z+, r0
    2a62:	81 50       	subi	r24, 0x01	; 1
    2a64:	e1 f7       	brne	.-8      	; 0x2a5e <action_tapping_process+0xb8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2a66:	60 93 55 01 	sts	0x0155, r22

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2a6a:	0e 94 c4 11 	call	0x2388	; 0x2388 <debug_waiting_buffer>
    2a6e:	27 c0       	rjmp	.+78     	; 0x2abe <action_tapping_process+0x118>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2a70:	91 9f       	mul	r25, r17
    2a72:	c0 01       	movw	r24, r0
    2a74:	11 24       	eor	r1, r1
    2a76:	89 5a       	subi	r24, 0xA9	; 169
    2a78:	9e 4f       	sbci	r25, 0xFE	; 254
    2a7a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <process_tapping>
    2a7e:	88 23       	and	r24, r24
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <action_tapping_process+0xde>
    2a82:	45 c0       	rjmp	.+138    	; 0x2b0e <action_tapping_process+0x168>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2a84:	80 91 56 01 	lds	r24, 0x0156
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	ee 0f       	add	r30, r30
    2a8e:	ff 1f       	adc	r31, r31
    2a90:	e8 0f       	add	r30, r24
    2a92:	f9 1f       	adc	r31, r25
    2a94:	ee 0f       	add	r30, r30
    2a96:	ff 1f       	adc	r31, r31
    2a98:	e9 5a       	subi	r30, 0xA9	; 169
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	40 81       	ld	r20, Z
    2a9e:	51 81       	ldd	r21, Z+1	; 0x01
    2aa0:	62 81       	ldd	r22, Z+2	; 0x02
    2aa2:	73 81       	ldd	r23, Z+3	; 0x03
    2aa4:	84 81       	ldd	r24, Z+4	; 0x04
    2aa6:	95 81       	ldd	r25, Z+5	; 0x05
    2aa8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2aac:	80 91 56 01 	lds	r24, 0x0156
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	87 70       	andi	r24, 0x07	; 7
    2ab6:	90 70       	andi	r25, 0x00	; 0
    2ab8:	80 93 56 01 	sts	0x0156, r24
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <action_tapping_process+0x11a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2abe:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2ac0:	90 91 56 01 	lds	r25, 0x0156
    2ac4:	80 91 55 01 	lds	r24, 0x0155
    2ac8:	98 17       	cp	r25, r24
    2aca:	91 f6       	brne	.-92     	; 0x2a70 <action_tapping_process+0xca>
    2acc:	20 c0       	rjmp	.+64     	; 0x2b0e <action_tapping_process+0x168>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2ace:	80 91 55 01 	lds	r24, 0x0155
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	2f 5f       	subi	r18, 0xFF	; 255
    2ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ada:	b9 01       	movw	r22, r18
    2adc:	67 70       	andi	r22, 0x07	; 7
    2ade:	70 70       	andi	r23, 0x00	; 0
    2ae0:	21 50       	subi	r18, 0x01	; 1
    2ae2:	30 40       	sbci	r19, 0x00	; 0
    2ae4:	80 91 56 01 	lds	r24, 0x0156
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	68 17       	cp	r22, r24
    2aec:	79 07       	cpc	r23, r25
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <action_tapping_process+0x14c>
    2af0:	a6 cf       	rjmp	.-180    	; 0x2a3e <action_tapping_process+0x98>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2af2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2af6:	10 92 55 01 	sts	0x0155, r1
    waiting_buffer_tail = 0;
    2afa:	10 92 56 01 	sts	0x0156, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2afe:	ef e4       	ldi	r30, 0x4F	; 79
    2b00:	f1 e0       	ldi	r31, 0x01	; 1
    2b02:	86 e0       	ldi	r24, 0x06	; 6
    2b04:	df 01       	movw	r26, r30
    2b06:	1d 92       	st	X+, r1
    2b08:	8a 95       	dec	r24
    2b0a:	e9 f7       	brne	.-6      	; 0x2b06 <action_tapping_process+0x160>
    2b0c:	d8 cf       	rjmp	.-80     	; 0x2abe <action_tapping_process+0x118>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2b0e:	2c 96       	adiw	r28, 0x0c	; 12
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	08 95       	ret

00002b24 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2b24:	cf 92       	push	r12
    2b26:	df 92       	push	r13
    2b28:	ef 92       	push	r14
    2b2a:	ff 92       	push	r15
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <action_macro_play+0x16>
    2b38:	64 c0       	rjmp	.+200    	; 0x2c02 <action_macro_play+0xde>
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	90 ea       	ldi	r25, 0xA0	; 160
    2b3e:	c9 2e       	mov	r12, r25
    2b40:	9f e0       	ldi	r25, 0x0F	; 15
    2b42:	d9 2e       	mov	r13, r25
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	e8 2e       	mov	r14, r24
    2b48:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	21 96       	adiw	r28, 0x01	; 1
    2b4e:	94 91       	lpm	r25, Z+
    2b50:	94 37       	cpi	r25, 0x74	; 116
    2b52:	48 f4       	brcc	.+18     	; 0x2b66 <action_macro_play+0x42>
    2b54:	94 30       	cpi	r25, 0x04	; 4
    2b56:	08 f0       	brcs	.+2      	; 0x2b5a <action_macro_play+0x36>
    2b58:	42 c0       	rjmp	.+132    	; 0x2bde <action_macro_play+0xba>
    2b5a:	91 30       	cpi	r25, 0x01	; 1
    2b5c:	79 f0       	breq	.+30     	; 0x2b7c <action_macro_play+0x58>
    2b5e:	92 30       	cpi	r25, 0x02	; 2
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <action_macro_play+0x40>
    2b62:	4f c0       	rjmp	.+158    	; 0x2c02 <action_macro_play+0xde>
    2b64:	1b c0       	rjmp	.+54     	; 0x2b9c <action_macro_play+0x78>
    2b66:	95 37       	cpi	r25, 0x75	; 117
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <action_macro_play+0x48>
    2b6a:	35 c0       	rjmp	.+106    	; 0x2bd6 <action_macro_play+0xb2>
    2b6c:	95 37       	cpi	r25, 0x75	; 117
    2b6e:	40 f1       	brcs	.+80     	; 0x2bc0 <action_macro_play+0x9c>
    2b70:	89 2f       	mov	r24, r25
    2b72:	84 58       	subi	r24, 0x84	; 132
    2b74:	80 37       	cpi	r24, 0x70	; 112
    2b76:	08 f0       	brcs	.+2      	; 0x2b7a <action_macro_play+0x56>
    2b78:	44 c0       	rjmp	.+136    	; 0x2c02 <action_macro_play+0xde>
    2b7a:	35 c0       	rjmp	.+106    	; 0x2be6 <action_macro_play+0xc2>
            case KEY_DOWN:
                MACRO_READ();
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	21 96       	adiw	r28, 0x01	; 1
    2b80:	94 91       	lpm	r25, Z+
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2b82:	89 2f       	mov	r24, r25
    2b84:	80 5e       	subi	r24, 0xE0	; 224
    2b86:	88 30       	cpi	r24, 0x08	; 8
    2b88:	50 f5       	brcc	.+84     	; 0x2bde <action_macro_play+0xba>
                    add_weak_mods(MOD_BIT(macro));
    2b8a:	97 70       	andi	r25, 0x07	; 7
    2b8c:	8e 2d       	mov	r24, r14
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <action_macro_play+0x6e>
    2b90:	88 0f       	add	r24, r24
    2b92:	9a 95       	dec	r25
    2b94:	ea f7       	brpl	.-6      	; 0x2b90 <action_macro_play+0x6c>
    2b96:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <add_weak_mods>
    2b9a:	29 c0       	rjmp	.+82     	; 0x2bee <action_macro_play+0xca>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	21 96       	adiw	r28, 0x01	; 1
    2ba0:	94 91       	lpm	r25, Z+
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2ba2:	89 2f       	mov	r24, r25
    2ba4:	80 5e       	subi	r24, 0xE0	; 224
    2ba6:	88 30       	cpi	r24, 0x08	; 8
    2ba8:	48 f4       	brcc	.+18     	; 0x2bbc <action_macro_play+0x98>
                    del_weak_mods(MOD_BIT(macro));
    2baa:	97 70       	andi	r25, 0x07	; 7
    2bac:	8e 2d       	mov	r24, r14
    2bae:	01 c0       	rjmp	.+2      	; 0x2bb2 <action_macro_play+0x8e>
    2bb0:	88 0f       	add	r24, r24
    2bb2:	9a 95       	dec	r25
    2bb4:	ea f7       	brpl	.-6      	; 0x2bb0 <action_macro_play+0x8c>
    2bb6:	0e 94 94 17 	call	0x2f28	; 0x2f28 <del_weak_mods>
    2bba:	19 c0       	rjmp	.+50     	; 0x2bee <action_macro_play+0xca>
                } else {
                    unregister_code(macro);
    2bbc:	89 2f       	mov	r24, r25
    2bbe:	15 c0       	rjmp	.+42     	; 0x2bea <action_macro_play+0xc6>
                }
                break;
            case WAIT:
                MACRO_READ();
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	24 91       	lpm	r18, Z+
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <action_macro_play+0xaa>
    2bc6:	c6 01       	movw	r24, r12
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <action_macro_play+0xa4>
    2bcc:	21 50       	subi	r18, 0x01	; 1
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    2bce:	22 23       	and	r18, r18
    2bd0:	d1 f7       	brne	.-12     	; 0x2bc6 <action_macro_play+0xa2>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    2bd2:	21 96       	adiw	r28, 0x01	; 1
    2bd4:	0c c0       	rjmp	.+24     	; 0x2bee <action_macro_play+0xca>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	21 96       	adiw	r28, 0x01	; 1
    2bda:	14 91       	lpm	r17, Z+
    2bdc:	08 c0       	rjmp	.+16     	; 0x2bee <action_macro_play+0xca>
                dprintf("INTERVAL(%u)\n", interval);
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    2bde:	89 2f       	mov	r24, r25
    2be0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <register_code>
    2be4:	04 c0       	rjmp	.+8      	; 0x2bee <action_macro_play+0xca>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2be6:	89 2f       	mov	r24, r25
    2be8:	8f 77       	andi	r24, 0x7F	; 127
    2bea:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <unregister_code>
    2bee:	21 2f       	mov	r18, r17
    2bf0:	04 c0       	rjmp	.+8      	; 0x2bfa <action_macro_play+0xd6>
    2bf2:	c6 01       	movw	r24, r12
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <action_macro_play+0xd0>
    2bf8:	21 50       	subi	r18, 0x01	; 1
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    2bfa:	22 23       	and	r18, r18
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <action_macro_play+0xdc>
    2bfe:	a5 cf       	rjmp	.-182    	; 0x2b4a <action_macro_play+0x26>
    2c00:	f8 cf       	rjmp	.-16     	; 0x2bf2 <action_macro_play+0xce>
    }
}
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	df 90       	pop	r13
    2c0e:	cf 90       	pop	r12
    2c10:	08 95       	ret

00002c12 <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    2c12:	08 95       	ret

00002c14 <layer_debug>:
}

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    2c14:	08 95       	ret

00002c16 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    2c16:	cf 92       	push	r12
    2c18:	df 92       	push	r13
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    2c28:	e0 90 87 01 	lds	r14, 0x0187
    2c2c:	f0 90 88 01 	lds	r15, 0x0188
    2c30:	00 91 89 01 	lds	r16, 0x0189
    2c34:	10 91 8a 01 	lds	r17, 0x018A
    2c38:	80 91 8b 01 	lds	r24, 0x018B
    2c3c:	90 91 8c 01 	lds	r25, 0x018C
    2c40:	a0 91 8d 01 	lds	r26, 0x018D
    2c44:	b0 91 8e 01 	lds	r27, 0x018E
    2c48:	e8 2a       	or	r14, r24
    2c4a:	f9 2a       	or	r15, r25
    2c4c:	0a 2b       	or	r16, r26
    2c4e:	1b 2b       	or	r17, r27
    2c50:	cf e1       	ldi	r28, 0x1F	; 31
    2c52:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2c54:	d8 01       	movw	r26, r16
    2c56:	c7 01       	movw	r24, r14
    2c58:	0c 2e       	mov	r0, r28
    2c5a:	04 c0       	rjmp	.+8      	; 0x2c64 <layer_switch_get_action+0x4e>
    2c5c:	b6 95       	lsr	r27
    2c5e:	a7 95       	ror	r26
    2c60:	97 95       	ror	r25
    2c62:	87 95       	ror	r24
    2c64:	0a 94       	dec	r0
    2c66:	d2 f7       	brpl	.-12     	; 0x2c5c <layer_switch_get_action+0x46>
    2c68:	81 70       	andi	r24, 0x01	; 1
    2c6a:	90 70       	andi	r25, 0x00	; 0
    2c6c:	89 2b       	or	r24, r25
    2c6e:	41 f0       	breq	.+16     	; 0x2c80 <layer_switch_get_action+0x6a>
            action = action_for_key(i, key);
    2c70:	8c 2f       	mov	r24, r28
    2c72:	b6 01       	movw	r22, r12
    2c74:	0e 94 65 03 	call	0x6ca	; 0x6ca <action_for_key>
    2c78:	9c 01       	movw	r18, r24
            if (action.code != ACTION_TRANSPARENT) {
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	51 f4       	brne	.+20     	; 0x2c94 <layer_switch_get_action+0x7e>
                return action;
    2c80:	21 97       	sbiw	r28, 0x01	; 1
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
    2c84:	cf 3f       	cpi	r28, 0xFF	; 255
    2c86:	d8 07       	cpc	r29, r24
    2c88:	29 f7       	brne	.-54     	; 0x2c54 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	b6 01       	movw	r22, r12
    2c8e:	0e 94 65 03 	call	0x6ca	; 0x6ca <action_for_key>
    2c92:	9c 01       	movw	r18, r24
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    2c94:	82 2f       	mov	r24, r18
    2c96:	df 91       	pop	r29
    2c98:	cf 91       	pop	r28
    2c9a:	1f 91       	pop	r17
    2c9c:	0f 91       	pop	r16
    2c9e:	ff 90       	pop	r15
    2ca0:	ef 90       	pop	r14
    2ca2:	df 90       	pop	r13
    2ca4:	cf 90       	pop	r12
    2ca6:	08 95       	ret

00002ca8 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2ca8:	60 93 8b 01 	sts	0x018B, r22
    2cac:	70 93 8c 01 	sts	0x018C, r23
    2cb0:	80 93 8d 01 	sts	0x018D, r24
    2cb4:	90 93 8e 01 	sts	0x018E, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2cb8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <clear_keyboard_but_mods>
}
    2cbc:	08 95       	ret

00002cbe <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    2cbe:	9b 01       	movw	r18, r22
    2cc0:	ac 01       	movw	r20, r24
    layer_state_set(layer_state ^ state);
    2cc2:	60 91 8b 01 	lds	r22, 0x018B
    2cc6:	70 91 8c 01 	lds	r23, 0x018C
    2cca:	80 91 8d 01 	lds	r24, 0x018D
    2cce:	90 91 8e 01 	lds	r25, 0x018E
    2cd2:	62 27       	eor	r22, r18
    2cd4:	73 27       	eor	r23, r19
    2cd6:	84 27       	eor	r24, r20
    2cd8:	95 27       	eor	r25, r21
    2cda:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2cde:	08 95       	ret

00002ce0 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    2ce0:	9b 01       	movw	r18, r22
    2ce2:	ac 01       	movw	r20, r24
    layer_state_set(layer_state & state);
    2ce4:	60 91 8b 01 	lds	r22, 0x018B
    2ce8:	70 91 8c 01 	lds	r23, 0x018C
    2cec:	80 91 8d 01 	lds	r24, 0x018D
    2cf0:	90 91 8e 01 	lds	r25, 0x018E
    2cf4:	62 23       	and	r22, r18
    2cf6:	73 23       	and	r23, r19
    2cf8:	84 23       	and	r24, r20
    2cfa:	95 23       	and	r25, r21
    2cfc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2d00:	08 95       	ret

00002d02 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    2d02:	9b 01       	movw	r18, r22
    2d04:	ac 01       	movw	r20, r24
    layer_state_set(layer_state | state);
    2d06:	60 91 8b 01 	lds	r22, 0x018B
    2d0a:	70 91 8c 01 	lds	r23, 0x018C
    2d0e:	80 91 8d 01 	lds	r24, 0x018D
    2d12:	90 91 8e 01 	lds	r25, 0x018E
    2d16:	62 2b       	or	r22, r18
    2d18:	73 2b       	or	r23, r19
    2d1a:	84 2b       	or	r24, r20
    2d1c:	95 2b       	or	r25, r21
    2d1e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2d22:	08 95       	ret

00002d24 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    2d24:	21 e0       	ldi	r18, 0x01	; 1
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	04 c0       	rjmp	.+8      	; 0x2d36 <layer_invert+0x12>
    2d2e:	22 0f       	add	r18, r18
    2d30:	33 1f       	adc	r19, r19
    2d32:	44 1f       	adc	r20, r20
    2d34:	55 1f       	adc	r21, r21
    2d36:	8a 95       	dec	r24
    2d38:	d2 f7       	brpl	.-12     	; 0x2d2e <layer_invert+0xa>
    2d3a:	80 91 8b 01 	lds	r24, 0x018B
    2d3e:	90 91 8c 01 	lds	r25, 0x018C
    2d42:	a0 91 8d 01 	lds	r26, 0x018D
    2d46:	b0 91 8e 01 	lds	r27, 0x018E
    2d4a:	28 27       	eor	r18, r24
    2d4c:	39 27       	eor	r19, r25
    2d4e:	4a 27       	eor	r20, r26
    2d50:	5b 27       	eor	r21, r27
    2d52:	ca 01       	movw	r24, r20
    2d54:	b9 01       	movw	r22, r18
    2d56:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2d5a:	08 95       	ret

00002d5c <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2d5c:	21 e0       	ldi	r18, 0x01	; 1
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <layer_off+0x12>
    2d66:	22 0f       	add	r18, r18
    2d68:	33 1f       	adc	r19, r19
    2d6a:	44 1f       	adc	r20, r20
    2d6c:	55 1f       	adc	r21, r21
    2d6e:	8a 95       	dec	r24
    2d70:	d2 f7       	brpl	.-12     	; 0x2d66 <layer_off+0xa>
    2d72:	20 95       	com	r18
    2d74:	30 95       	com	r19
    2d76:	40 95       	com	r20
    2d78:	50 95       	com	r21
    2d7a:	80 91 8b 01 	lds	r24, 0x018B
    2d7e:	90 91 8c 01 	lds	r25, 0x018C
    2d82:	a0 91 8d 01 	lds	r26, 0x018D
    2d86:	b0 91 8e 01 	lds	r27, 0x018E
    2d8a:	28 23       	and	r18, r24
    2d8c:	39 23       	and	r19, r25
    2d8e:	4a 23       	and	r20, r26
    2d90:	5b 23       	and	r21, r27
    2d92:	ca 01       	movw	r24, r20
    2d94:	b9 01       	movw	r22, r18
    2d96:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2d9a:	08 95       	ret

00002d9c <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2d9c:	21 e0       	ldi	r18, 0x01	; 1
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <layer_on+0x12>
    2da6:	22 0f       	add	r18, r18
    2da8:	33 1f       	adc	r19, r19
    2daa:	44 1f       	adc	r20, r20
    2dac:	55 1f       	adc	r21, r21
    2dae:	8a 95       	dec	r24
    2db0:	d2 f7       	brpl	.-12     	; 0x2da6 <layer_on+0xa>
    2db2:	80 91 8b 01 	lds	r24, 0x018B
    2db6:	90 91 8c 01 	lds	r25, 0x018C
    2dba:	a0 91 8d 01 	lds	r26, 0x018D
    2dbe:	b0 91 8e 01 	lds	r27, 0x018E
    2dc2:	28 2b       	or	r18, r24
    2dc4:	39 2b       	or	r19, r25
    2dc6:	4a 2b       	or	r20, r26
    2dc8:	5b 2b       	or	r21, r27
    2dca:	ca 01       	movw	r24, r20
    2dcc:	b9 01       	movw	r22, r18
    2dce:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2dd2:	08 95       	ret

00002dd4 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2dd4:	21 e0       	ldi	r18, 0x01	; 1
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <layer_move+0x12>
    2dde:	22 0f       	add	r18, r18
    2de0:	33 1f       	adc	r19, r19
    2de2:	44 1f       	adc	r20, r20
    2de4:	55 1f       	adc	r21, r21
    2de6:	8a 95       	dec	r24
    2de8:	d2 f7       	brpl	.-12     	; 0x2dde <layer_move+0xa>
    2dea:	ca 01       	movw	r24, r20
    2dec:	b9 01       	movw	r22, r18
    2dee:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2df2:	08 95       	ret

00002df4 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    2df4:	60 e0       	ldi	r22, 0x00	; 0
    2df6:	70 e0       	ldi	r23, 0x00	; 0
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <layer_state_set>
}
    2e00:	08 95       	ret

00002e02 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2e02:	60 93 87 01 	sts	0x0187, r22
    2e06:	70 93 88 01 	sts	0x0188, r23
    2e0a:	80 93 89 01 	sts	0x0189, r24
    2e0e:	90 93 8a 01 	sts	0x018A, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2e12:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <clear_keyboard_but_mods>
}
    2e16:	08 95       	ret

00002e18 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    2e18:	9b 01       	movw	r18, r22
    2e1a:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state ^ state);
    2e1c:	60 91 87 01 	lds	r22, 0x0187
    2e20:	70 91 88 01 	lds	r23, 0x0188
    2e24:	80 91 89 01 	lds	r24, 0x0189
    2e28:	90 91 8a 01 	lds	r25, 0x018A
    2e2c:	62 27       	eor	r22, r18
    2e2e:	73 27       	eor	r23, r19
    2e30:	84 27       	eor	r24, r20
    2e32:	95 27       	eor	r25, r21
    2e34:	0e 94 01 17 	call	0x2e02	; 0x2e02 <default_layer_state_set>
}
    2e38:	08 95       	ret

00002e3a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    2e3a:	9b 01       	movw	r18, r22
    2e3c:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state & state);
    2e3e:	60 91 87 01 	lds	r22, 0x0187
    2e42:	70 91 88 01 	lds	r23, 0x0188
    2e46:	80 91 89 01 	lds	r24, 0x0189
    2e4a:	90 91 8a 01 	lds	r25, 0x018A
    2e4e:	62 23       	and	r22, r18
    2e50:	73 23       	and	r23, r19
    2e52:	84 23       	and	r24, r20
    2e54:	95 23       	and	r25, r21
    2e56:	0e 94 01 17 	call	0x2e02	; 0x2e02 <default_layer_state_set>
}
    2e5a:	08 95       	ret

00002e5c <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2e5c:	9b 01       	movw	r18, r22
    2e5e:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state | state);
    2e60:	60 91 87 01 	lds	r22, 0x0187
    2e64:	70 91 88 01 	lds	r23, 0x0188
    2e68:	80 91 89 01 	lds	r24, 0x0189
    2e6c:	90 91 8a 01 	lds	r25, 0x018A
    2e70:	62 2b       	or	r22, r18
    2e72:	73 2b       	or	r23, r19
    2e74:	84 2b       	or	r24, r20
    2e76:	95 2b       	or	r25, r21
    2e78:	0e 94 01 17 	call	0x2e02	; 0x2e02 <default_layer_state_set>
}
    2e7c:	08 95       	ret

00002e7e <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    2e7e:	38 2f       	mov	r19, r24
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2e80:	a0 91 03 01 	lds	r26, 0x0103
    2e84:	b0 91 04 01 	lds	r27, 0x0104
    2e88:	fd 01       	movw	r30, r26
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	8f ef       	ldi	r24, 0xFF	; 255
    2e8e:	92 81       	ldd	r25, Z+2	; 0x02
    2e90:	93 17       	cp	r25, r19
    2e92:	91 f0       	breq	.+36     	; 0x2eb8 <add_key+0x3a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    2e94:	8f 3f       	cpi	r24, 0xFF	; 255
    2e96:	19 f4       	brne	.+6      	; 0x2e9e <add_key+0x20>
    2e98:	99 23       	and	r25, r25
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <add_key+0x20>
    2e9c:	82 2f       	mov	r24, r18
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    2e9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ea0:	31 96       	adiw	r30, 0x01	; 1
    2ea2:	26 30       	cpi	r18, 0x06	; 6
    2ea4:	a1 f7       	brne	.-24     	; 0x2e8e <add_key+0x10>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    2ea6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ea8:	39 f0       	breq	.+14     	; 0x2eb8 <add_key+0x3a>
            keyboard_report->keys[empty] = code;
    2eaa:	99 27       	eor	r25, r25
    2eac:	87 fd       	sbrc	r24, 7
    2eae:	90 95       	com	r25
    2eb0:	a8 0f       	add	r26, r24
    2eb2:	b9 1f       	adc	r27, r25
    2eb4:	12 96       	adiw	r26, 0x02	; 2
    2eb6:	3c 93       	st	X, r19
    2eb8:	08 95       	ret

00002eba <del_key>:
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
{
    2eba:	98 2f       	mov	r25, r24
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2ec0:	e0 91 03 01 	lds	r30, 0x0103
    2ec4:	f0 91 04 01 	lds	r31, 0x0104
    2ec8:	e2 0f       	add	r30, r18
    2eca:	f3 1f       	adc	r31, r19
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	89 17       	cp	r24, r25
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    2ed2:	12 82       	std	Z+2, r1	; 0x02
    2ed4:	2f 5f       	subi	r18, 0xFF	; 255
    2ed6:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    2ed8:	26 30       	cpi	r18, 0x06	; 6
    2eda:	31 05       	cpc	r19, r1
    2edc:	89 f7       	brne	.-30     	; 0x2ec0 <del_key+0x6>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    2ede:	08 95       	ret

00002ee0 <clear_keys>:

void clear_keys(void)
{
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    2ee4:	e0 91 03 01 	lds	r30, 0x0103
    2ee8:	f0 91 04 01 	lds	r31, 0x0104
    2eec:	e8 0f       	add	r30, r24
    2eee:	f9 1f       	adc	r31, r25
    2ef0:	10 82       	st	Z, r1
    2ef2:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2ef4:	88 30       	cpi	r24, 0x08	; 8
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	a9 f7       	brne	.-22     	; 0x2ee4 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    2efa:	08 95       	ret

00002efc <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    2efc:	90 91 97 01 	lds	r25, 0x0197
    2f00:	98 2b       	or	r25, r24
    2f02:	90 93 97 01 	sts	0x0197, r25
    2f06:	08 95       	ret

00002f08 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    2f08:	80 95       	com	r24
    2f0a:	90 91 97 01 	lds	r25, 0x0197
    2f0e:	98 23       	and	r25, r24
    2f10:	90 93 97 01 	sts	0x0197, r25
    2f14:	08 95       	ret

00002f16 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    2f16:	10 92 97 01 	sts	0x0197, r1
    2f1a:	08 95       	ret

00002f1c <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    2f1c:	90 91 99 01 	lds	r25, 0x0199
    2f20:	98 2b       	or	r25, r24
    2f22:	90 93 99 01 	sts	0x0199, r25
    2f26:	08 95       	ret

00002f28 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    2f28:	80 95       	com	r24
    2f2a:	90 91 99 01 	lds	r25, 0x0199
    2f2e:	98 23       	and	r25, r24
    2f30:	90 93 99 01 	sts	0x0199, r25
    2f34:	08 95       	ret

00002f36 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    2f36:	10 92 99 01 	sts	0x0199, r1
    2f3a:	08 95       	ret

00002f3c <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2f3c:	80 93 98 01 	sts	0x0198, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    2f40:	08 95       	ret

00002f42 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2f42:	10 92 98 01 	sts	0x0198, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    2f46:	08 95       	ret

00002f48 <has_anykey>:

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    2f48:	e0 91 03 01 	lds	r30, 0x0103
    2f4c:	f0 91 04 01 	lds	r31, 0x0104
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	91 e0       	ldi	r25, 0x01	; 1
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2f54:	81 81       	ldd	r24, Z+1	; 0x01
    2f56:	81 11       	cpse	r24, r1
            cnt++;
    2f58:	2f 5f       	subi	r18, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2f5a:	9f 5f       	subi	r25, 0xFF	; 255
    2f5c:	31 96       	adiw	r30, 0x01	; 1
    2f5e:	98 30       	cpi	r25, 0x08	; 8
    2f60:	c9 f7       	brne	.-14     	; 0x2f54 <has_anykey+0xc>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2f62:	82 2f       	mov	r24, r18
    2f64:	08 95       	ret

00002f66 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2f66:	e0 91 03 01 	lds	r30, 0x0103
    2f6a:	f0 91 04 01 	lds	r31, 0x0104
    2f6e:	80 91 97 01 	lds	r24, 0x0197
    2f72:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2f74:	e0 91 03 01 	lds	r30, 0x0103
    2f78:	f0 91 04 01 	lds	r31, 0x0104
    2f7c:	80 81       	ld	r24, Z
    2f7e:	90 91 99 01 	lds	r25, 0x0199
    2f82:	89 2b       	or	r24, r25
    2f84:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2f86:	90 91 98 01 	lds	r25, 0x0198
    2f8a:	99 23       	and	r25, r25
    2f8c:	69 f0       	breq	.+26     	; 0x2fa8 <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2f8e:	e0 91 03 01 	lds	r30, 0x0103
    2f92:	f0 91 04 01 	lds	r31, 0x0104
    2f96:	80 81       	ld	r24, Z
    2f98:	89 2b       	or	r24, r25
    2f9a:	80 83       	st	Z, r24
        if (has_anykey()) {
    2f9c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <has_anykey>
    2fa0:	88 23       	and	r24, r24
    2fa2:	11 f0       	breq	.+4      	; 0x2fa8 <send_keyboard_report+0x42>
            clear_oneshot_mods();
    2fa4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    2fa8:	80 91 03 01 	lds	r24, 0x0103
    2fac:	90 91 04 01 	lds	r25, 0x0104
    2fb0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <host_keyboard_send>
}
    2fb4:	08 95       	ret

00002fb6 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    2fb6:	1f 92       	push	r1
    2fb8:	0f 92       	push	r0
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	0f 92       	push	r0
    2fbe:	11 24       	eor	r1, r1
    2fc0:	8f 93       	push	r24
    2fc2:	9f 93       	push	r25
    2fc4:	af 93       	push	r26
    2fc6:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    2fc8:	80 91 9b 01 	lds	r24, 0x019B
    2fcc:	88 23       	and	r24, r24
    2fce:	99 f4       	brne	.+38     	; 0x2ff6 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    2fd0:	80 91 9c 01 	lds	r24, 0x019C
    2fd4:	90 91 9d 01 	lds	r25, 0x019D
    2fd8:	a0 91 9e 01 	lds	r26, 0x019E
    2fdc:	b0 91 9f 01 	lds	r27, 0x019F
    2fe0:	41 96       	adiw	r24, 0x11	; 17
    2fe2:	a1 1d       	adc	r26, r1
    2fe4:	b1 1d       	adc	r27, r1
    2fe6:	80 93 9c 01 	sts	0x019C, r24
    2fea:	90 93 9d 01 	sts	0x019D, r25
    2fee:	a0 93 9e 01 	sts	0x019E, r26
    2ff2:	b0 93 9f 01 	sts	0x019F, r27
            break;
        default:
            ;
    }
}
    2ff6:	bf 91       	pop	r27
    2ff8:	af 91       	pop	r26
    2ffa:	9f 91       	pop	r25
    2ffc:	8f 91       	pop	r24
    2ffe:	0f 90       	pop	r0
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	0f 90       	pop	r0
    3004:	1f 90       	pop	r1
    3006:	18 95       	reti

00003008 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3008:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    300c:	08 95       	ret

0000300e <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3012:	93 e0       	ldi	r25, 0x03	; 3
    3014:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3016:	9a ef       	ldi	r25, 0xFA	; 250
    3018:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    301a:	80 93 6e 00 	sts	0x006E, r24
}
    301e:	08 95       	ret

00003020 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3020:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3022:	f8 94       	cli
    t = timer_count;
    3024:	20 91 9c 01 	lds	r18, 0x019C
    3028:	30 91 9d 01 	lds	r19, 0x019D
    302c:	40 91 9e 01 	lds	r20, 0x019E
    3030:	50 91 9f 01 	lds	r21, 0x019F
    SREG = sreg;
    3034:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    3036:	c9 01       	movw	r24, r18
    3038:	08 95       	ret

0000303a <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    303a:	ef 92       	push	r14
    303c:	ff 92       	push	r15
    303e:	0f 93       	push	r16
    3040:	1f 93       	push	r17
    3042:	bc 01       	movw	r22, r24
    uint32_t t;

    uint8_t sreg = SREG;
    3044:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3046:	f8 94       	cli
    t = timer_count;
    3048:	e0 90 9c 01 	lds	r14, 0x019C
    304c:	f0 90 9d 01 	lds	r15, 0x019D
    3050:	00 91 9e 01 	lds	r16, 0x019E
    3054:	10 91 9f 01 	lds	r17, 0x019F
    SREG = sreg;
    3058:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    305a:	a8 01       	movw	r20, r16
    305c:	97 01       	movw	r18, r14
    305e:	40 70       	andi	r20, 0x00	; 0
    3060:	50 70       	andi	r21, 0x00	; 0
    3062:	cb 01       	movw	r24, r22
    3064:	a0 e0       	ldi	r26, 0x00	; 0
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	28 17       	cp	r18, r24
    306a:	39 07       	cpc	r19, r25
    306c:	4a 07       	cpc	r20, r26
    306e:	5b 07       	cpc	r21, r27
    3070:	20 f0       	brcs	.+8      	; 0x307a <timer_elapsed+0x40>
    3072:	97 01       	movw	r18, r14
    3074:	26 1b       	sub	r18, r22
    3076:	37 0b       	sbc	r19, r23
    3078:	05 c0       	rjmp	.+10     	; 0x3084 <timer_elapsed+0x4a>
    307a:	9b 01       	movw	r18, r22
    307c:	20 95       	com	r18
    307e:	30 95       	com	r19
    3080:	2e 0d       	add	r18, r14
    3082:	3f 1d       	adc	r19, r15
}
    3084:	c9 01       	movw	r24, r18
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ff 90       	pop	r15
    308c:	ef 90       	pop	r14
    308e:	08 95       	ret

00003090 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3090:	1f 92       	push	r1
    3092:	0f 92       	push	r0
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	0f 92       	push	r0
    3098:	11 24       	eor	r1, r1
    309a:	8f 93       	push	r24
    309c:	9f 93       	push	r25
    309e:	af 93       	push	r26
    30a0:	bf 93       	push	r27
    timer_count++;
    30a2:	80 91 9c 01 	lds	r24, 0x019C
    30a6:	90 91 9d 01 	lds	r25, 0x019D
    30aa:	a0 91 9e 01 	lds	r26, 0x019E
    30ae:	b0 91 9f 01 	lds	r27, 0x019F
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	a1 1d       	adc	r26, r1
    30b6:	b1 1d       	adc	r27, r1
    30b8:	80 93 9c 01 	sts	0x019C, r24
    30bc:	90 93 9d 01 	sts	0x019D, r25
    30c0:	a0 93 9e 01 	sts	0x019E, r26
    30c4:	b0 93 9f 01 	sts	0x019F, r27
}
    30c8:	bf 91       	pop	r27
    30ca:	af 91       	pop	r26
    30cc:	9f 91       	pop	r25
    30ce:	8f 91       	pop	r24
    30d0:	0f 90       	pop	r0
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	0f 90       	pop	r0
    30d6:	1f 90       	pop	r1
    30d8:	18 95       	reti

000030da <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    30da:	80 91 a6 01 	lds	r24, 0x01A6
    30de:	80 ff       	sbrs	r24, 0
    30e0:	0b c0       	rjmp	.+22     	; 0x30f8 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    30e2:	90 91 07 01 	lds	r25, 0x0107
    30e6:	85 e0       	ldi	r24, 0x05	; 5
    30e8:	98 9f       	mul	r25, r24
    30ea:	c0 01       	movw	r24, r0
    30ec:	11 24       	eor	r1, r1
    30ee:	95 95       	asr	r25
    30f0:	87 95       	ror	r24
    30f2:	95 95       	asr	r25
    30f4:	87 95       	ror	r24
    30f6:	30 c0       	rjmp	.+96     	; 0x3158 <move_unit+0x7e>
    } else if (mousekey_accel & (1<<1)) {
    30f8:	81 ff       	sbrs	r24, 1
    30fa:	09 c0       	rjmp	.+18     	; 0x310e <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    30fc:	90 91 07 01 	lds	r25, 0x0107
    3100:	85 e0       	ldi	r24, 0x05	; 5
    3102:	98 9f       	mul	r25, r24
    3104:	c0 01       	movw	r24, r0
    3106:	11 24       	eor	r1, r1
    3108:	95 95       	asr	r25
    310a:	87 95       	ror	r24
    310c:	25 c0       	rjmp	.+74     	; 0x3158 <move_unit+0x7e>
    } else if (mousekey_accel & (1<<2)) {
    310e:	82 ff       	sbrs	r24, 2
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <move_unit+0x3e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3112:	90 91 07 01 	lds	r25, 0x0107
    3116:	0d c0       	rjmp	.+26     	; 0x3132 <move_unit+0x58>
    } else if (mousekey_repeat == 0) {
    3118:	80 91 a5 01 	lds	r24, 0x01A5
    311c:	88 23       	and	r24, r24
    311e:	19 f4       	brne	.+6      	; 0x3126 <move_unit+0x4c>
    3120:	85 e0       	ldi	r24, 0x05	; 5
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	08 95       	ret
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    3126:	60 91 08 01 	lds	r22, 0x0108
    312a:	90 91 07 01 	lds	r25, 0x0107
    312e:	86 17       	cp	r24, r22
    3130:	28 f0       	brcs	.+10     	; 0x313c <move_unit+0x62>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    3132:	85 e0       	ldi	r24, 0x05	; 5
    3134:	98 9f       	mul	r25, r24
    3136:	c0 01       	movw	r24, r0
    3138:	11 24       	eor	r1, r1
    313a:	0e c0       	rjmp	.+28     	; 0x3158 <move_unit+0x7e>
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    313c:	89 9f       	mul	r24, r25
    313e:	90 01       	movw	r18, r0
    3140:	11 24       	eor	r1, r1
    3142:	c9 01       	movw	r24, r18
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	82 0f       	add	r24, r18
    314e:	93 1f       	adc	r25, r19
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	0e 94 b5 22 	call	0x456a	; 0x456a <__divmodhi4>
    3156:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3158:	80 38       	cpi	r24, 0x80	; 128
    315a:	91 05       	cpc	r25, r1
    315c:	10 f0       	brcs	.+4      	; 0x3162 <move_unit+0x88>
    315e:	8f e7       	ldi	r24, 0x7F	; 127
    3160:	08 95       	ret
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	09 f4       	brne	.+2      	; 0x3168 <move_unit+0x8e>
    3166:	81 e0       	ldi	r24, 0x01	; 1
}
    3168:	08 95       	ret

0000316a <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    316a:	80 91 a6 01 	lds	r24, 0x01A6
    316e:	80 ff       	sbrs	r24, 0
    3170:	05 c0       	rjmp	.+10     	; 0x317c <wheel_unit+0x12>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3172:	80 91 09 01 	lds	r24, 0x0109
    3176:	86 95       	lsr	r24
    3178:	86 95       	lsr	r24
    317a:	18 c0       	rjmp	.+48     	; 0x31ac <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<1)) {
    317c:	81 ff       	sbrs	r24, 1
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <wheel_unit+0x1e>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3180:	80 91 09 01 	lds	r24, 0x0109
    3184:	86 95       	lsr	r24
    3186:	12 c0       	rjmp	.+36     	; 0x31ac <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<2)) {
    3188:	82 ff       	sbrs	r24, 2
    318a:	03 c0       	rjmp	.+6      	; 0x3192 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    318c:	80 91 09 01 	lds	r24, 0x0109
    3190:	0d c0       	rjmp	.+26     	; 0x31ac <wheel_unit+0x42>
    } else if (mousekey_repeat == 0) {
    3192:	20 91 a5 01 	lds	r18, 0x01A5
    3196:	22 23       	and	r18, r18
    3198:	19 f4       	brne	.+6      	; 0x31a0 <wheel_unit+0x36>
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	08 95       	ret
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    31a0:	60 91 0a 01 	lds	r22, 0x010A
    31a4:	80 91 09 01 	lds	r24, 0x0109
    31a8:	26 17       	cp	r18, r22
    31aa:	10 f0       	brcs	.+4      	; 0x31b0 <wheel_unit+0x46>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	07 c0       	rjmp	.+14     	; 0x31be <wheel_unit+0x54>
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    31b0:	28 9f       	mul	r18, r24
    31b2:	c0 01       	movw	r24, r0
    31b4:	11 24       	eor	r1, r1
    31b6:	70 e0       	ldi	r23, 0x00	; 0
    31b8:	0e 94 b5 22 	call	0x456a	; 0x456a <__divmodhi4>
    31bc:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    31be:	80 38       	cpi	r24, 0x80	; 128
    31c0:	91 05       	cpc	r25, r1
    31c2:	10 f0       	brcs	.+4      	; 0x31c8 <wheel_unit+0x5e>
    31c4:	8f e7       	ldi	r24, 0x7F	; 127
    31c6:	08 95       	ret
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	09 f4       	brne	.+2      	; 0x31ce <wheel_unit+0x64>
    31cc:	81 e0       	ldi	r24, 0x01	; 1
}
    31ce:	08 95       	ret

000031d0 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    31d0:	80 3f       	cpi	r24, 0xF0	; 240
    31d2:	21 f4       	brne	.+8      	; 0x31dc <mousekey_on+0xc>
    31d4:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    31d8:	81 95       	neg	r24
    31da:	04 c0       	rjmp	.+8      	; 0x31e4 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    31dc:	81 3f       	cpi	r24, 0xF1	; 241
    31de:	29 f4       	brne	.+10     	; 0x31ea <mousekey_on+0x1a>
    31e0:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    31e4:	80 93 a2 01 	sts	0x01A2, r24
    31e8:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    31ea:	82 3f       	cpi	r24, 0xF2	; 242
    31ec:	21 f4       	brne	.+8      	; 0x31f6 <mousekey_on+0x26>
    31ee:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    31f2:	81 95       	neg	r24
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    31f6:	83 3f       	cpi	r24, 0xF3	; 243
    31f8:	29 f4       	brne	.+10     	; 0x3204 <mousekey_on+0x34>
    31fa:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    31fe:	80 93 a1 01 	sts	0x01A1, r24
    3202:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    3204:	89 3f       	cpi	r24, 0xF9	; 249
    3206:	19 f4       	brne	.+6      	; 0x320e <mousekey_on+0x3e>
    3208:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    320e:	8a 3f       	cpi	r24, 0xFA	; 250
    3210:	31 f4       	brne	.+12     	; 0x321e <mousekey_on+0x4e>
    3212:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    3216:	81 95       	neg	r24
    3218:	80 93 a3 01 	sts	0x01A3, r24
    321c:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    321e:	8b 3f       	cpi	r24, 0xFB	; 251
    3220:	21 f4       	brne	.+8      	; 0x322a <mousekey_on+0x5a>
    3222:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    3226:	81 95       	neg	r24
    3228:	04 c0       	rjmp	.+8      	; 0x3232 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    322a:	8c 3f       	cpi	r24, 0xFC	; 252
    322c:	29 f4       	brne	.+10     	; 0x3238 <mousekey_on+0x68>
    322e:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    3232:	80 93 a4 01 	sts	0x01A4, r24
    3236:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    3238:	84 3f       	cpi	r24, 0xF4	; 244
    323a:	21 f4       	brne	.+8      	; 0x3244 <mousekey_on+0x74>
    323c:	80 91 a0 01 	lds	r24, 0x01A0
    3240:	81 60       	ori	r24, 0x01	; 1
    3242:	17 c0       	rjmp	.+46     	; 0x3272 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    3244:	85 3f       	cpi	r24, 0xF5	; 245
    3246:	21 f4       	brne	.+8      	; 0x3250 <mousekey_on+0x80>
    3248:	80 91 a0 01 	lds	r24, 0x01A0
    324c:	82 60       	ori	r24, 0x02	; 2
    324e:	11 c0       	rjmp	.+34     	; 0x3272 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    3250:	86 3f       	cpi	r24, 0xF6	; 246
    3252:	21 f4       	brne	.+8      	; 0x325c <mousekey_on+0x8c>
    3254:	80 91 a0 01 	lds	r24, 0x01A0
    3258:	84 60       	ori	r24, 0x04	; 4
    325a:	0b c0       	rjmp	.+22     	; 0x3272 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    325c:	87 3f       	cpi	r24, 0xF7	; 247
    325e:	21 f4       	brne	.+8      	; 0x3268 <mousekey_on+0x98>
    3260:	80 91 a0 01 	lds	r24, 0x01A0
    3264:	88 60       	ori	r24, 0x08	; 8
    3266:	05 c0       	rjmp	.+10     	; 0x3272 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    3268:	88 3f       	cpi	r24, 0xF8	; 248
    326a:	31 f4       	brne	.+12     	; 0x3278 <mousekey_on+0xa8>
    326c:	80 91 a0 01 	lds	r24, 0x01A0
    3270:	80 61       	ori	r24, 0x10	; 16
    3272:	80 93 a0 01 	sts	0x01A0, r24
    3276:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    3278:	8d 3f       	cpi	r24, 0xFD	; 253
    327a:	21 f4       	brne	.+8      	; 0x3284 <mousekey_on+0xb4>
    327c:	80 91 a6 01 	lds	r24, 0x01A6
    3280:	81 60       	ori	r24, 0x01	; 1
    3282:	05 c0       	rjmp	.+10     	; 0x328e <mousekey_on+0xbe>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    3284:	8e 3f       	cpi	r24, 0xFE	; 254
    3286:	31 f4       	brne	.+12     	; 0x3294 <mousekey_on+0xc4>
    3288:	80 91 a6 01 	lds	r24, 0x01A6
    328c:	82 60       	ori	r24, 0x02	; 2
    328e:	80 93 a6 01 	sts	0x01A6, r24
    3292:	08 95       	ret
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    3294:	8f 3f       	cpi	r24, 0xFF	; 255
    3296:	29 f4       	brne	.+10     	; 0x32a2 <mousekey_on+0xd2>
    3298:	80 91 a6 01 	lds	r24, 0x01A6
    329c:	84 60       	ori	r24, 0x04	; 4
    329e:	80 93 a6 01 	sts	0x01A6, r24
    32a2:	08 95       	ret

000032a4 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    32a4:	80 3f       	cpi	r24, 0xF0	; 240
    32a6:	29 f4       	brne	.+10     	; 0x32b2 <mousekey_off+0xe>
    32a8:	80 91 a2 01 	lds	r24, 0x01A2
    32ac:	87 ff       	sbrs	r24, 7
    32ae:	6f c0       	rjmp	.+222    	; 0x338e <mousekey_off+0xea>
    32b0:	07 c0       	rjmp	.+14     	; 0x32c0 <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    32b2:	81 3f       	cpi	r24, 0xF1	; 241
    32b4:	41 f4       	brne	.+16     	; 0x32c6 <mousekey_off+0x22>
    32b6:	80 91 a2 01 	lds	r24, 0x01A2
    32ba:	18 16       	cp	r1, r24
    32bc:	0c f0       	brlt	.+2      	; 0x32c0 <mousekey_off+0x1c>
    32be:	67 c0       	rjmp	.+206    	; 0x338e <mousekey_off+0xea>
    32c0:	10 92 a2 01 	sts	0x01A2, r1
    32c4:	64 c0       	rjmp	.+200    	; 0x338e <mousekey_off+0xea>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    32c6:	82 3f       	cpi	r24, 0xF2	; 242
    32c8:	29 f4       	brne	.+10     	; 0x32d4 <mousekey_off+0x30>
    32ca:	80 91 a1 01 	lds	r24, 0x01A1
    32ce:	87 ff       	sbrs	r24, 7
    32d0:	5e c0       	rjmp	.+188    	; 0x338e <mousekey_off+0xea>
    32d2:	07 c0       	rjmp	.+14     	; 0x32e2 <mousekey_off+0x3e>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    32d4:	83 3f       	cpi	r24, 0xF3	; 243
    32d6:	41 f4       	brne	.+16     	; 0x32e8 <mousekey_off+0x44>
    32d8:	80 91 a1 01 	lds	r24, 0x01A1
    32dc:	18 16       	cp	r1, r24
    32de:	0c f0       	brlt	.+2      	; 0x32e2 <mousekey_off+0x3e>
    32e0:	56 c0       	rjmp	.+172    	; 0x338e <mousekey_off+0xea>
    32e2:	10 92 a1 01 	sts	0x01A1, r1
    32e6:	53 c0       	rjmp	.+166    	; 0x338e <mousekey_off+0xea>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    32e8:	89 3f       	cpi	r24, 0xF9	; 249
    32ea:	29 f4       	brne	.+10     	; 0x32f6 <mousekey_off+0x52>
    32ec:	80 91 a3 01 	lds	r24, 0x01A3
    32f0:	18 16       	cp	r1, r24
    32f2:	3c f0       	brlt	.+14     	; 0x3302 <mousekey_off+0x5e>
    32f4:	4c c0       	rjmp	.+152    	; 0x338e <mousekey_off+0xea>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    32f6:	8a 3f       	cpi	r24, 0xFA	; 250
    32f8:	39 f4       	brne	.+14     	; 0x3308 <mousekey_off+0x64>
    32fa:	80 91 a3 01 	lds	r24, 0x01A3
    32fe:	87 ff       	sbrs	r24, 7
    3300:	46 c0       	rjmp	.+140    	; 0x338e <mousekey_off+0xea>
    3302:	10 92 a3 01 	sts	0x01A3, r1
    3306:	43 c0       	rjmp	.+134    	; 0x338e <mousekey_off+0xea>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    3308:	8b 3f       	cpi	r24, 0xFB	; 251
    330a:	29 f4       	brne	.+10     	; 0x3316 <mousekey_off+0x72>
    330c:	80 91 a4 01 	lds	r24, 0x01A4
    3310:	87 ff       	sbrs	r24, 7
    3312:	3d c0       	rjmp	.+122    	; 0x338e <mousekey_off+0xea>
    3314:	06 c0       	rjmp	.+12     	; 0x3322 <mousekey_off+0x7e>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    3316:	8c 3f       	cpi	r24, 0xFC	; 252
    3318:	39 f4       	brne	.+14     	; 0x3328 <mousekey_off+0x84>
    331a:	80 91 a4 01 	lds	r24, 0x01A4
    331e:	18 16       	cp	r1, r24
    3320:	b4 f5       	brge	.+108    	; 0x338e <mousekey_off+0xea>
    3322:	10 92 a4 01 	sts	0x01A4, r1
    3326:	33 c0       	rjmp	.+102    	; 0x338e <mousekey_off+0xea>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    3328:	84 3f       	cpi	r24, 0xF4	; 244
    332a:	21 f4       	brne	.+8      	; 0x3334 <mousekey_off+0x90>
    332c:	80 91 a0 01 	lds	r24, 0x01A0
    3330:	8e 7f       	andi	r24, 0xFE	; 254
    3332:	05 c0       	rjmp	.+10     	; 0x333e <mousekey_off+0x9a>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    3334:	85 3f       	cpi	r24, 0xF5	; 245
    3336:	31 f4       	brne	.+12     	; 0x3344 <mousekey_off+0xa0>
    3338:	80 91 a0 01 	lds	r24, 0x01A0
    333c:	8d 7f       	andi	r24, 0xFD	; 253
    333e:	80 93 a0 01 	sts	0x01A0, r24
    3342:	25 c0       	rjmp	.+74     	; 0x338e <mousekey_off+0xea>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    3344:	86 3f       	cpi	r24, 0xF6	; 246
    3346:	21 f4       	brne	.+8      	; 0x3350 <mousekey_off+0xac>
    3348:	80 91 a0 01 	lds	r24, 0x01A0
    334c:	8b 7f       	andi	r24, 0xFB	; 251
    334e:	f7 cf       	rjmp	.-18     	; 0x333e <mousekey_off+0x9a>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    3350:	87 3f       	cpi	r24, 0xF7	; 247
    3352:	21 f4       	brne	.+8      	; 0x335c <mousekey_off+0xb8>
    3354:	80 91 a0 01 	lds	r24, 0x01A0
    3358:	87 7f       	andi	r24, 0xF7	; 247
    335a:	f1 cf       	rjmp	.-30     	; 0x333e <mousekey_off+0x9a>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    335c:	88 3f       	cpi	r24, 0xF8	; 248
    335e:	21 f4       	brne	.+8      	; 0x3368 <mousekey_off+0xc4>
    3360:	80 91 a0 01 	lds	r24, 0x01A0
    3364:	8f 7e       	andi	r24, 0xEF	; 239
    3366:	eb cf       	rjmp	.-42     	; 0x333e <mousekey_off+0x9a>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    3368:	8d 3f       	cpi	r24, 0xFD	; 253
    336a:	21 f4       	brne	.+8      	; 0x3374 <mousekey_off+0xd0>
    336c:	80 91 a6 01 	lds	r24, 0x01A6
    3370:	8e 7f       	andi	r24, 0xFE	; 254
    3372:	0b c0       	rjmp	.+22     	; 0x338a <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    3374:	8e 3f       	cpi	r24, 0xFE	; 254
    3376:	21 f4       	brne	.+8      	; 0x3380 <mousekey_off+0xdc>
    3378:	80 91 a6 01 	lds	r24, 0x01A6
    337c:	8d 7f       	andi	r24, 0xFD	; 253
    337e:	05 c0       	rjmp	.+10     	; 0x338a <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    3380:	8f 3f       	cpi	r24, 0xFF	; 255
    3382:	29 f4       	brne	.+10     	; 0x338e <mousekey_off+0xea>
    3384:	80 91 a6 01 	lds	r24, 0x01A6
    3388:	8b 7f       	andi	r24, 0xFB	; 251
    338a:	80 93 a6 01 	sts	0x01A6, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    338e:	80 91 a1 01 	lds	r24, 0x01A1
    3392:	88 23       	and	r24, r24
    3394:	71 f4       	brne	.+28     	; 0x33b2 <mousekey_off+0x10e>
    3396:	80 91 a2 01 	lds	r24, 0x01A2
    339a:	88 23       	and	r24, r24
    339c:	51 f4       	brne	.+20     	; 0x33b2 <mousekey_off+0x10e>
    339e:	80 91 a3 01 	lds	r24, 0x01A3
    33a2:	88 23       	and	r24, r24
    33a4:	31 f4       	brne	.+12     	; 0x33b2 <mousekey_off+0x10e>
    33a6:	80 91 a4 01 	lds	r24, 0x01A4
    33aa:	88 23       	and	r24, r24
    33ac:	11 f4       	brne	.+4      	; 0x33b2 <mousekey_off+0x10e>
        mousekey_repeat = 0;
    33ae:	10 92 a5 01 	sts	0x01A5, r1
    33b2:	08 95       	ret

000033b4 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    33b4:	e0 ea       	ldi	r30, 0xA0	; 160
    33b6:	f1 e0       	ldi	r31, 0x01	; 1
    33b8:	85 e0       	ldi	r24, 0x05	; 5
    33ba:	df 01       	movw	r26, r30
    33bc:	1d 92       	st	X+, r1
    33be:	8a 95       	dec	r24
    33c0:	e9 f7       	brne	.-6      	; 0x33bc <mousekey_clear+0x8>
    mousekey_repeat = 0;
    33c2:	10 92 a5 01 	sts	0x01A5, r1
    mousekey_accel = 0;
    33c6:	10 92 a6 01 	sts	0x01A6, r1
}
    33ca:	08 95       	ret

000033cc <mousekey_send>:
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    33cc:	80 ea       	ldi	r24, 0xA0	; 160
    33ce:	91 e0       	ldi	r25, 0x01	; 1
    33d0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <host_mouse_send>
    last_timer = timer_read();
    33d4:	0e 94 10 18 	call	0x3020	; 0x3020 <timer_read>
    33d8:	90 93 a8 01 	sts	0x01A8, r25
    33dc:	80 93 a7 01 	sts	0x01A7, r24
}
    33e0:	08 95       	ret

000033e2 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    33e2:	1f 93       	push	r17
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    33e4:	80 91 a7 01 	lds	r24, 0x01A7
    33e8:	90 91 a8 01 	lds	r25, 0x01A8
    33ec:	0e 94 1d 18 	call	0x303a	; 0x303a <timer_elapsed>
    33f0:	ac 01       	movw	r20, r24
    33f2:	20 91 a5 01 	lds	r18, 0x01A5
    33f6:	22 23       	and	r18, r18
    33f8:	21 f0       	breq	.+8      	; 0x3402 <mousekey_task+0x20>
    33fa:	80 91 06 01 	lds	r24, 0x0106
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	06 c0       	rjmp	.+12     	; 0x340e <mousekey_task+0x2c>
    3402:	90 91 05 01 	lds	r25, 0x0105
    3406:	8a e0       	ldi	r24, 0x0A	; 10
    3408:	98 9f       	mul	r25, r24
    340a:	c0 01       	movw	r24, r0
    340c:	11 24       	eor	r1, r1
    340e:	48 17       	cp	r20, r24
    3410:	59 07       	cpc	r21, r25
    3412:	08 f4       	brcc	.+2      	; 0x3416 <mousekey_task+0x34>
    3414:	85 c0       	rjmp	.+266    	; 0x3520 <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3416:	90 91 a1 01 	lds	r25, 0x01A1
    341a:	99 23       	and	r25, r25
    341c:	69 f4       	brne	.+26     	; 0x3438 <mousekey_task+0x56>
    341e:	80 91 a2 01 	lds	r24, 0x01A2
    3422:	88 23       	and	r24, r24
    3424:	49 f4       	brne	.+18     	; 0x3438 <mousekey_task+0x56>
    3426:	80 91 a3 01 	lds	r24, 0x01A3
    342a:	88 23       	and	r24, r24
    342c:	29 f4       	brne	.+10     	; 0x3438 <mousekey_task+0x56>
    342e:	80 91 a4 01 	lds	r24, 0x01A4
    3432:	88 23       	and	r24, r24
    3434:	09 f4       	brne	.+2      	; 0x3438 <mousekey_task+0x56>
    3436:	74 c0       	rjmp	.+232    	; 0x3520 <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    3438:	2f 3f       	cpi	r18, 0xFF	; 255
    343a:	19 f0       	breq	.+6      	; 0x3442 <mousekey_task+0x60>
        mousekey_repeat++;
    343c:	2f 5f       	subi	r18, 0xFF	; 255
    343e:	20 93 a5 01 	sts	0x01A5, r18


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    3442:	19 16       	cp	r1, r25
    3444:	24 f4       	brge	.+8      	; 0x344e <mousekey_task+0x6c>
    3446:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    344a:	80 93 a1 01 	sts	0x01A1, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    344e:	80 91 a1 01 	lds	r24, 0x01A1
    3452:	87 ff       	sbrs	r24, 7
    3454:	05 c0       	rjmp	.+10     	; 0x3460 <mousekey_task+0x7e>
    3456:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    345a:	81 95       	neg	r24
    345c:	80 93 a1 01 	sts	0x01A1, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    3460:	80 91 a2 01 	lds	r24, 0x01A2
    3464:	18 16       	cp	r1, r24
    3466:	24 f4       	brge	.+8      	; 0x3470 <mousekey_task+0x8e>
    3468:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    346c:	80 93 a2 01 	sts	0x01A2, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    3470:	80 91 a2 01 	lds	r24, 0x01A2
    3474:	87 ff       	sbrs	r24, 7
    3476:	05 c0       	rjmp	.+10     	; 0x3482 <mousekey_task+0xa0>
    3478:	0e 94 6d 18 	call	0x30da	; 0x30da <move_unit>
    347c:	81 95       	neg	r24
    347e:	80 93 a2 01 	sts	0x01A2, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    3482:	60 91 a1 01 	lds	r22, 0x01A1
    3486:	66 23       	and	r22, r22
    3488:	39 f1       	breq	.+78     	; 0x34d8 <mousekey_task+0xf6>
    348a:	10 91 a2 01 	lds	r17, 0x01A2
    348e:	11 23       	and	r17, r17
    3490:	19 f1       	breq	.+70     	; 0x34d8 <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    3492:	77 27       	eor	r23, r23
    3494:	67 fd       	sbrc	r22, 7
    3496:	70 95       	com	r23
    3498:	87 2f       	mov	r24, r23
    349a:	97 2f       	mov	r25, r23
    349c:	0e 94 b2 21 	call	0x4364	; 0x4364 <__floatsisf>
    34a0:	23 e3       	ldi	r18, 0x33	; 51
    34a2:	33 e3       	ldi	r19, 0x33	; 51
    34a4:	43 e3       	ldi	r20, 0x33	; 51
    34a6:	5f e3       	ldi	r21, 0x3F	; 63
    34a8:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    34ac:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__fixsfsi>
    34b0:	60 93 a1 01 	sts	0x01A1, r22
        mouse_report.y *= 0.7;
    34b4:	61 2f       	mov	r22, r17
    34b6:	77 27       	eor	r23, r23
    34b8:	67 fd       	sbrc	r22, 7
    34ba:	70 95       	com	r23
    34bc:	87 2f       	mov	r24, r23
    34be:	97 2f       	mov	r25, r23
    34c0:	0e 94 b2 21 	call	0x4364	; 0x4364 <__floatsisf>
    34c4:	23 e3       	ldi	r18, 0x33	; 51
    34c6:	33 e3       	ldi	r19, 0x33	; 51
    34c8:	43 e3       	ldi	r20, 0x33	; 51
    34ca:	5f e3       	ldi	r21, 0x3F	; 63
    34cc:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    34d0:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__fixsfsi>
    34d4:	60 93 a2 01 	sts	0x01A2, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    34d8:	80 91 a3 01 	lds	r24, 0x01A3
    34dc:	18 16       	cp	r1, r24
    34de:	24 f4       	brge	.+8      	; 0x34e8 <mousekey_task+0x106>
    34e0:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    34e4:	80 93 a3 01 	sts	0x01A3, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    34e8:	80 91 a3 01 	lds	r24, 0x01A3
    34ec:	87 ff       	sbrs	r24, 7
    34ee:	05 c0       	rjmp	.+10     	; 0x34fa <mousekey_task+0x118>
    34f0:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    34f4:	81 95       	neg	r24
    34f6:	80 93 a3 01 	sts	0x01A3, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    34fa:	80 91 a4 01 	lds	r24, 0x01A4
    34fe:	18 16       	cp	r1, r24
    3500:	24 f4       	brge	.+8      	; 0x350a <mousekey_task+0x128>
    3502:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    3506:	80 93 a4 01 	sts	0x01A4, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    350a:	80 91 a4 01 	lds	r24, 0x01A4
    350e:	87 ff       	sbrs	r24, 7
    3510:	05 c0       	rjmp	.+10     	; 0x351c <mousekey_task+0x13a>
    3512:	0e 94 b5 18 	call	0x316a	; 0x316a <wheel_unit>
    3516:	81 95       	neg	r24
    3518:	80 93 a4 01 	sts	0x01A4, r24

    mousekey_send();
    351c:	0e 94 e6 19 	call	0x33cc	; 0x33cc <mousekey_send>
}
    3520:	1f 91       	pop	r17
    3522:	08 95       	ret

00003524 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__eerd_word_m32u4>
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	8d 5e       	subi	r24, 0xED	; 237
    3530:	9e 4f       	sbci	r25, 0xFE	; 254
    3532:	09 f4       	brne	.+2      	; 0x3536 <eeconfig_is_enabled+0x12>
    3534:	21 e0       	ldi	r18, 0x01	; 1
}
    3536:	82 2f       	mov	r24, r18
    3538:	08 95       	ret

0000353a <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	6d ee       	ldi	r22, 0xED	; 237
    3540:	7e ef       	ldi	r23, 0xFE	; 254
    3542:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    3546:	82 e0       	ldi	r24, 0x02	; 2
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    3550:	83 e0       	ldi	r24, 0x03	; 3
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    355a:	84 e0       	ldi	r24, 0x04	; 4
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    3564:	85 e0       	ldi	r24, 0x05	; 5
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    356e:	08 95       	ret

00003570 <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    /* For battery powered device */
    USB_IsInitialized = false;
    3570:	10 92 f2 01 	sts	0x01F2, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    3574:	08 95       	ret

00003576 <EVENT_USB_Device_Reset>:

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
}
    3576:	08 95       	ret

00003578 <EVENT_USB_Device_Suspend>:
{
    print("[S]");
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
#endif
}
    3578:	08 95       	ret

0000357a <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    357a:	80 91 aa 01 	lds	r24, 0x01AA
    357e:	08 95       	ret

00003580 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <send_consumer+0x6>
    3586:	0f 92       	push	r0
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    358e:	80 91 f3 01 	lds	r24, 0x01F3
    3592:	84 30       	cpi	r24, 0x04	; 4
    3594:	29 f5       	brne	.+74     	; 0x35e0 <send_consumer+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3596:	83 e0       	ldi	r24, 0x03	; 3
    3598:	80 93 e9 00 	sts	0x00E9, r24
    359c:	2f ef       	ldi	r18, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    359e:	95 ed       	ldi	r25, 0xD5	; 213
    35a0:	05 c0       	rjmp	.+10     	; 0x35ac <send_consumer+0x2c>
    35a2:	89 2f       	mov	r24, r25
    35a4:	8a 95       	dec	r24
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <send_consumer+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    35a8:	22 23       	and	r18, r18
    35aa:	29 f0       	breq	.+10     	; 0x35b6 <send_consumer+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    35ac:	80 91 e8 00 	lds	r24, 0x00E8
    35b0:	21 50       	subi	r18, 0x01	; 1
    35b2:	85 ff       	sbrs	r24, 5
    35b4:	f6 cf       	rjmp	.-20     	; 0x35a2 <send_consumer+0x22>
    35b6:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    35ba:	85 ff       	sbrs	r24, 5
    35bc:	11 c0       	rjmp	.+34     	; 0x35e0 <send_consumer+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
    35be:	5b 83       	std	Y+3, r21	; 0x03
    35c0:	4a 83       	std	Y+2, r20	; 0x02
    35c2:	83 e0       	ldi	r24, 0x03	; 3
    35c4:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    35c6:	ce 01       	movw	r24, r28
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	63 e0       	ldi	r22, 0x03	; 3
    35cc:	70 e0       	ldi	r23, 0x00	; 0
    35ce:	40 e0       	ldi	r20, 0x00	; 0
    35d0:	50 e0       	ldi	r21, 0x00	; 0
    35d2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    35d6:	80 91 e8 00 	lds	r24, 0x00E8
    35da:	8e 77       	andi	r24, 0x7E	; 126
    35dc:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <send_system+0x6>
    35f2:	0f 92       	push	r0
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    35fa:	80 91 f3 01 	lds	r24, 0x01F3
    35fe:	84 30       	cpi	r24, 0x04	; 4
    3600:	29 f5       	brne	.+74     	; 0x364c <send_system+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3602:	83 e0       	ldi	r24, 0x03	; 3
    3604:	80 93 e9 00 	sts	0x00E9, r24
    3608:	2f ef       	ldi	r18, 0xFF	; 255
    360a:	95 ed       	ldi	r25, 0xD5	; 213
    360c:	05 c0       	rjmp	.+10     	; 0x3618 <send_system+0x2c>
    360e:	89 2f       	mov	r24, r25
    3610:	8a 95       	dec	r24
    3612:	f1 f7       	brne	.-4      	; 0x3610 <send_system+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    3614:	22 23       	and	r18, r18
    3616:	29 f0       	breq	.+10     	; 0x3622 <send_system+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3618:	80 91 e8 00 	lds	r24, 0x00E8
    361c:	21 50       	subi	r18, 0x01	; 1
    361e:	85 ff       	sbrs	r24, 5
    3620:	f6 cf       	rjmp	.-20     	; 0x360e <send_system+0x22>
    3622:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    3626:	85 ff       	sbrs	r24, 5
    3628:	11 c0       	rjmp	.+34     	; 0x364c <send_system+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    362a:	5b 83       	std	Y+3, r21	; 0x03
    362c:	4a 83       	std	Y+2, r20	; 0x02
    362e:	82 e0       	ldi	r24, 0x02	; 2
    3630:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    3632:	ce 01       	movw	r24, r28
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	63 e0       	ldi	r22, 0x03	; 3
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	50 e0       	ldi	r21, 0x00	; 0
    363e:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3642:	80 91 e8 00 	lds	r24, 0x00E8
    3646:	8e 77       	andi	r24, 0x7E	; 126
    3648:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
    3658:	ac 01       	movw	r20, r24
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    365a:	80 91 f3 01 	lds	r24, 0x01F3
    365e:	84 30       	cpi	r24, 0x04	; 4
    3660:	01 f5       	brne	.+64     	; 0x36a2 <send_mouse+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3662:	82 e0       	ldi	r24, 0x02	; 2
    3664:	80 93 e9 00 	sts	0x00E9, r24
    3668:	2f ef       	ldi	r18, 0xFF	; 255
    366a:	95 ed       	ldi	r25, 0xD5	; 213
    366c:	05 c0       	rjmp	.+10     	; 0x3678 <send_mouse+0x20>
    366e:	89 2f       	mov	r24, r25
    3670:	8a 95       	dec	r24
    3672:	f1 f7       	brne	.-4      	; 0x3670 <send_mouse+0x18>

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    3674:	22 23       	and	r18, r18
    3676:	29 f0       	breq	.+10     	; 0x3682 <send_mouse+0x2a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3678:	80 91 e8 00 	lds	r24, 0x00E8
    367c:	21 50       	subi	r18, 0x01	; 1
    367e:	85 ff       	sbrs	r24, 5
    3680:	f6 cf       	rjmp	.-20     	; 0x366e <send_mouse+0x16>
    3682:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    3686:	85 ff       	sbrs	r24, 5
    3688:	0c c0       	rjmp	.+24     	; 0x36a2 <send_mouse+0x4a>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    368a:	ca 01       	movw	r24, r20
    368c:	65 e0       	ldi	r22, 0x05	; 5
    368e:	70 e0       	ldi	r23, 0x00	; 0
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3698:	80 91 e8 00 	lds	r24, 0x00E8
    369c:	8e 77       	andi	r24, 0x7E	; 126
    369e:	80 93 e8 00 	sts	0x00E8, r24
    36a2:	08 95       	ret

000036a4 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	18 2f       	mov	r17, r24
    36aa:	09 2f       	mov	r16, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    36ac:	80 91 f3 01 	lds	r24, 0x01F3
    36b0:	84 30       	cpi	r24, 0x04	; 4
    36b2:	61 f5       	brne	.+88     	; 0x370c <send_keyboard+0x68>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	80 93 e9 00 	sts	0x00E9, r24
    36ba:	9f ef       	ldi	r25, 0xFF	; 255
    36bc:	25 ed       	ldi	r18, 0xD5	; 213
    36be:	05 c0       	rjmp	.+10     	; 0x36ca <send_keyboard+0x26>
    36c0:	82 2f       	mov	r24, r18
    36c2:	8a 95       	dec	r24
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <send_keyboard+0x1e>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    36c6:	99 23       	and	r25, r25
    36c8:	29 f0       	breq	.+10     	; 0x36d4 <send_keyboard+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    36ca:	80 91 e8 00 	lds	r24, 0x00E8
    36ce:	91 50       	subi	r25, 0x01	; 1
    36d0:	85 ff       	sbrs	r24, 5
    36d2:	f6 cf       	rjmp	.-20     	; 0x36c0 <send_keyboard+0x1c>
    36d4:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    36d8:	85 ff       	sbrs	r24, 5
    36da:	18 c0       	rjmp	.+48     	; 0x370c <send_keyboard+0x68>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    36dc:	81 2f       	mov	r24, r17
    36de:	90 2f       	mov	r25, r16
    36e0:	68 e0       	ldi	r22, 0x08	; 8
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36ec:	80 91 e8 00 	lds	r24, 0x00E8
    36f0:	8e 77       	andi	r24, 0x7E	; 126
    36f2:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    36f6:	ab ea       	ldi	r26, 0xAB	; 171
    36f8:	b1 e0       	ldi	r27, 0x01	; 1
    36fa:	21 2f       	mov	r18, r17
    36fc:	30 2f       	mov	r19, r16
    36fe:	c9 01       	movw	r24, r18
    3700:	fc 01       	movw	r30, r24
    3702:	88 e0       	ldi	r24, 0x08	; 8
    3704:	01 90       	ld	r0, Z+
    3706:	0d 92       	st	X+, r0
    3708:	81 50       	subi	r24, 0x01	; 1
    370a:	e1 f7       	brne	.-8      	; 0x3704 <send_keyboard+0x60>
}
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <EVENT_USB_Device_Connect>:
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    /* For battery powered device */
    if (!USB_IsInitialized) {
    3712:	80 91 f2 01 	lds	r24, 0x01F2
    3716:	88 23       	and	r24, r24
    3718:	49 f4       	brne	.+18     	; 0x372c <EVENT_USB_Device_Connect+0x1a>
        USB_Disable();
    371a:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <USB_Disable>
        USB_Init();
    371e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <USB_Init>
    3722:	80 91 e2 00 	lds	r24, 0x00E2
    3726:	84 60       	ori	r24, 0x04	; 4
    3728:	80 93 e2 00 	sts	0x00E2, r24
    372c:	08 95       	ret

0000372e <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    372e:	80 91 f5 01 	lds	r24, 0x01F5
    3732:	83 30       	cpi	r24, 0x03	; 3
    3734:	09 f4       	brne	.+2      	; 0x3738 <EVENT_USB_Device_ControlRequest+0xa>
    3736:	55 c0       	rjmp	.+170    	; 0x37e2 <EVENT_USB_Device_ControlRequest+0xb4>
    3738:	84 30       	cpi	r24, 0x04	; 4
    373a:	30 f4       	brcc	.+12     	; 0x3748 <EVENT_USB_Device_ControlRequest+0x1a>
    373c:	81 30       	cpi	r24, 0x01	; 1
    373e:	71 f0       	breq	.+28     	; 0x375c <EVENT_USB_Device_ControlRequest+0x2e>
    3740:	82 30       	cpi	r24, 0x02	; 2
    3742:	09 f0       	breq	.+2      	; 0x3746 <EVENT_USB_Device_ControlRequest+0x18>
    3744:	b5 c0       	rjmp	.+362    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
    3746:	9c c0       	rjmp	.+312    	; 0x3880 <EVENT_USB_Device_ControlRequest+0x152>
    3748:	8a 30       	cpi	r24, 0x0A	; 10
    374a:	09 f4       	brne	.+2      	; 0x374e <EVENT_USB_Device_ControlRequest+0x20>
    374c:	89 c0       	rjmp	.+274    	; 0x3860 <EVENT_USB_Device_ControlRequest+0x132>
    374e:	8b 30       	cpi	r24, 0x0B	; 11
    3750:	09 f4       	brne	.+2      	; 0x3754 <EVENT_USB_Device_ControlRequest+0x26>
    3752:	68 c0       	rjmp	.+208    	; 0x3824 <EVENT_USB_Device_ControlRequest+0xf6>
    3754:	89 30       	cpi	r24, 0x09	; 9
    3756:	09 f0       	breq	.+2      	; 0x375a <EVENT_USB_Device_ControlRequest+0x2c>
    3758:	ab c0       	rjmp	.+342    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
    375a:	20 c0       	rjmp	.+64     	; 0x379c <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    375c:	80 91 f4 01 	lds	r24, 0x01F4
    3760:	81 3a       	cpi	r24, 0xA1	; 161
    3762:	09 f0       	breq	.+2      	; 0x3766 <EVENT_USB_Device_ControlRequest+0x38>
    3764:	a5 c0       	rjmp	.+330    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3766:	80 91 e8 00 	lds	r24, 0x00E8
    376a:	87 7f       	andi	r24, 0xF7	; 247
    376c:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    3770:	80 91 f8 01 	lds	r24, 0x01F8
    3774:	90 91 f9 01 	lds	r25, 0x01F9
    3778:	89 2b       	or	r24, r25
    377a:	21 f4       	brne	.+8      	; 0x3784 <EVENT_USB_Device_ControlRequest+0x56>
    377c:	8b ea       	ldi	r24, 0xAB	; 171
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	68 e0       	ldi	r22, 0x08	; 8
    3782:	03 c0       	rjmp	.+6      	; 0x378a <EVENT_USB_Device_ControlRequest+0x5c>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	60 e0       	ldi	r22, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	0e 94 cd 1c 	call	0x399a	; 0x399a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3790:	80 91 e8 00 	lds	r24, 0x00E8
    3794:	8b 77       	andi	r24, 0x7B	; 123
    3796:	80 93 e8 00 	sts	0x00E8, r24
    379a:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    379c:	80 91 f4 01 	lds	r24, 0x01F4
    37a0:	81 32       	cpi	r24, 0x21	; 33
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <EVENT_USB_Device_ControlRequest+0x78>
    37a4:	85 c0       	rjmp	.+266    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    37a6:	80 91 f8 01 	lds	r24, 0x01F8
    37aa:	90 91 f9 01 	lds	r25, 0x01F9
    37ae:	89 2b       	or	r24, r25
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <EVENT_USB_Device_ControlRequest+0x86>
    37b2:	7e c0       	rjmp	.+252    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    37b4:	80 91 e8 00 	lds	r24, 0x00E8
    37b8:	87 7f       	andi	r24, 0xF7	; 247
    37ba:	80 93 e8 00 	sts	0x00E8, r24
    37be:	05 c0       	rjmp	.+10     	; 0x37ca <EVENT_USB_Device_ControlRequest+0x9c>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    37c0:	80 91 f3 01 	lds	r24, 0x01F3
    37c4:	88 23       	and	r24, r24
    37c6:	09 f4       	brne	.+2      	; 0x37ca <EVENT_USB_Device_ControlRequest+0x9c>
    37c8:	73 c0       	rjmp	.+230    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    37ca:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    37ce:	82 ff       	sbrs	r24, 2
    37d0:	f7 cf       	rjmp	.-18     	; 0x37c0 <EVENT_USB_Device_ControlRequest+0x92>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    37d2:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    37d6:	80 93 aa 01 	sts	0x01AA, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    37da:	80 91 e8 00 	lds	r24, 0x00E8
    37de:	8b 77       	andi	r24, 0x7B	; 123
    37e0:	1c c0       	rjmp	.+56     	; 0x381a <EVENT_USB_Device_ControlRequest+0xec>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    37e2:	80 91 f4 01 	lds	r24, 0x01F4
    37e6:	81 3a       	cpi	r24, 0xA1	; 161
    37e8:	09 f0       	breq	.+2      	; 0x37ec <EVENT_USB_Device_ControlRequest+0xbe>
    37ea:	62 c0       	rjmp	.+196    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    37ec:	80 91 f8 01 	lds	r24, 0x01F8
    37f0:	90 91 f9 01 	lds	r25, 0x01F9
    37f4:	89 2b       	or	r24, r25
    37f6:	09 f0       	breq	.+2      	; 0x37fa <EVENT_USB_Device_ControlRequest+0xcc>
    37f8:	5b c0       	rjmp	.+182    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    37fa:	80 91 e8 00 	lds	r24, 0x00E8
    37fe:	87 7f       	andi	r24, 0xF7	; 247
    3800:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3804:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    3808:	80 ff       	sbrs	r24, 0
    380a:	fc cf       	rjmp	.-8      	; 0x3804 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    380c:	80 91 0b 01 	lds	r24, 0x010B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3810:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3814:	80 91 e8 00 	lds	r24, 0x00E8
    3818:	8e 77       	andi	r24, 0x7E	; 126
    381a:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    381e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Endpoint_ClearStatusStage>
    3822:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3824:	80 91 f4 01 	lds	r24, 0x01F4
    3828:	81 32       	cpi	r24, 0x21	; 33
    382a:	09 f0       	breq	.+2      	; 0x382e <EVENT_USB_Device_ControlRequest+0x100>
    382c:	41 c0       	rjmp	.+130    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    382e:	80 91 f8 01 	lds	r24, 0x01F8
    3832:	90 91 f9 01 	lds	r25, 0x01F9
    3836:	89 2b       	or	r24, r25
    3838:	d9 f5       	brne	.+118    	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    383a:	80 91 e8 00 	lds	r24, 0x00E8
    383e:	87 7f       	andi	r24, 0xF7	; 247
    3840:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    3844:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    3848:	10 92 0b 01 	sts	0x010B, r1
    384c:	80 91 f6 01 	lds	r24, 0x01F6
    3850:	88 23       	and	r24, r24
    3852:	19 f0       	breq	.+6      	; 0x385a <EVENT_USB_Device_ControlRequest+0x12c>
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
#endif
                    clear_keyboard();
    385a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <clear_keyboard>
    385e:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3860:	80 91 f4 01 	lds	r24, 0x01F4
    3864:	81 32       	cpi	r24, 0x21	; 33
    3866:	21 f5       	brne	.+72     	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
    3868:	80 91 e8 00 	lds	r24, 0x00E8
    386c:	87 7f       	andi	r24, 0xF7	; 247
    386e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    3872:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    3876:	80 91 f7 01 	lds	r24, 0x01F7
    387a:	80 93 a9 01 	sts	0x01A9, r24
    387e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3880:	80 91 f4 01 	lds	r24, 0x01F4
    3884:	81 3a       	cpi	r24, 0xA1	; 161
    3886:	a1 f4       	brne	.+40     	; 0x38b0 <EVENT_USB_Device_ControlRequest+0x182>
    3888:	80 91 e8 00 	lds	r24, 0x00E8
    388c:	87 7f       	andi	r24, 0xF7	; 247
    388e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3892:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    3896:	80 ff       	sbrs	r24, 0
    3898:	fc cf       	rjmp	.-8      	; 0x3892 <EVENT_USB_Device_ControlRequest+0x164>
                Endpoint_Write_8(keyboard_idle);
    389a:	80 91 a9 01 	lds	r24, 0x01A9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    389e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    38a2:	80 91 e8 00 	lds	r24, 0x00E8
    38a6:	8e 77       	andi	r24, 0x7E	; 126
    38a8:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    38ac:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Endpoint_ClearStatusStage>
    38b0:	08 95       	ret

000038b2 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	61 ec       	ldi	r22, 0xC1	; 193
    38b6:	42 e0       	ldi	r20, 0x02	; 2
    38b8:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    38bc:	82 e0       	ldi	r24, 0x02	; 2
    38be:	61 ec       	ldi	r22, 0xC1	; 193
    38c0:	42 e0       	ldi	r20, 0x02	; 2
    38c2:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <Endpoint_ConfigureEndpoint_Prv>
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	61 ec       	ldi	r22, 0xC1	; 193
    38ca:	42 e0       	ldi	r20, 0x02	; 2
    38cc:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <Endpoint_ConfigureEndpoint_Prv>
    38d0:	08 95       	ret

000038d2 <EVENT_USB_Device_WakeUp>:
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    suspend_wakeup_init();
    38d2:	0e 94 04 18 	call	0x3008	; 0x3008 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
#endif
}
    38d6:	08 95       	ret

000038d8 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    38d8:	da 01       	movw	r26, r20
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    38da:	93 30       	cpi	r25, 0x03	; 3
    38dc:	c1 f0       	breq	.+48     	; 0x390e <CALLBACK_USB_GetDescriptor+0x36>
    38de:	94 30       	cpi	r25, 0x04	; 4
    38e0:	30 f4       	brcc	.+12     	; 0x38ee <CALLBACK_USB_GetDescriptor+0x16>
    38e2:	91 30       	cpi	r25, 0x01	; 1
    38e4:	51 f0       	breq	.+20     	; 0x38fa <CALLBACK_USB_GetDescriptor+0x22>
    38e6:	92 30       	cpi	r25, 0x02	; 2
    38e8:	09 f0       	breq	.+2      	; 0x38ec <CALLBACK_USB_GetDescriptor+0x14>
    38ea:	4f c0       	rjmp	.+158    	; 0x398a <CALLBACK_USB_GetDescriptor+0xb2>
    38ec:	0b c0       	rjmp	.+22     	; 0x3904 <CALLBACK_USB_GetDescriptor+0x2c>
    38ee:	91 32       	cpi	r25, 0x21	; 33
    38f0:	21 f1       	breq	.+72     	; 0x393a <CALLBACK_USB_GetDescriptor+0x62>
    38f2:	92 32       	cpi	r25, 0x22	; 34
    38f4:	09 f0       	breq	.+2      	; 0x38f8 <CALLBACK_USB_GetDescriptor+0x20>
    38f6:	49 c0       	rjmp	.+146    	; 0x398a <CALLBACK_USB_GetDescriptor+0xb2>
    38f8:	32 c0       	rjmp	.+100    	; 0x395e <CALLBACK_USB_GetDescriptor+0x86>
    38fa:	e2 eb       	ldi	r30, 0xB2	; 178
    38fc:	f4 e0       	ldi	r31, 0x04	; 4
    38fe:	22 e1       	ldi	r18, 0x12	; 18
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	47 c0       	rjmp	.+142    	; 0x3992 <CALLBACK_USB_GetDescriptor+0xba>
    3904:	e4 ec       	ldi	r30, 0xC4	; 196
    3906:	f4 e0       	ldi	r31, 0x04	; 4
    3908:	24 e5       	ldi	r18, 0x54	; 84
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	42 c0       	rjmp	.+132    	; 0x3992 <CALLBACK_USB_GetDescriptor+0xba>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    390e:	81 30       	cpi	r24, 0x01	; 1
    3910:	51 f0       	breq	.+20     	; 0x3926 <CALLBACK_USB_GetDescriptor+0x4e>
    3912:	81 30       	cpi	r24, 0x01	; 1
    3914:	20 f0       	brcs	.+8      	; 0x391e <CALLBACK_USB_GetDescriptor+0x46>
    3916:	82 30       	cpi	r24, 0x02	; 2
    3918:	09 f0       	breq	.+2      	; 0x391c <CALLBACK_USB_GetDescriptor+0x44>
    391a:	37 c0       	rjmp	.+110    	; 0x398a <CALLBACK_USB_GetDescriptor+0xb2>
    391c:	08 c0       	rjmp	.+16     	; 0x392e <CALLBACK_USB_GetDescriptor+0x56>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    391e:	e8 e1       	ldi	r30, 0x18	; 24
    3920:	f5 e0       	ldi	r31, 0x05	; 5
    3922:	84 91       	lpm	r24, Z+
    3924:	07 c0       	rjmp	.+14     	; 0x3934 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    3926:	ec e1       	ldi	r30, 0x1C	; 28
    3928:	f5 e0       	ldi	r31, 0x05	; 5
    392a:	84 91       	lpm	r24, Z+
    392c:	03 c0       	rjmp	.+6      	; 0x3934 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    392e:	e6 e2       	ldi	r30, 0x26	; 38
    3930:	f5 e0       	ldi	r31, 0x05	; 5
    3932:	84 91       	lpm	r24, Z+
    3934:	28 2f       	mov	r18, r24
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	2c c0       	rjmp	.+88     	; 0x3992 <CALLBACK_USB_GetDescriptor+0xba>
                    break;
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
    393a:	61 30       	cpi	r22, 0x01	; 1
    393c:	41 f0       	breq	.+16     	; 0x394e <CALLBACK_USB_GetDescriptor+0x76>
    393e:	61 30       	cpi	r22, 0x01	; 1
    3940:	18 f0       	brcs	.+6      	; 0x3948 <CALLBACK_USB_GetDescriptor+0x70>
    3942:	62 30       	cpi	r22, 0x02	; 2
    3944:	11 f5       	brne	.+68     	; 0x398a <CALLBACK_USB_GetDescriptor+0xb2>
    3946:	08 c0       	rjmp	.+16     	; 0x3958 <CALLBACK_USB_GetDescriptor+0x80>
    3948:	e6 ed       	ldi	r30, 0xD6	; 214
    394a:	f4 e0       	ldi	r31, 0x04	; 4
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <CALLBACK_USB_GetDescriptor+0x7a>
    394e:	ef ee       	ldi	r30, 0xEF	; 239
    3950:	f4 e0       	ldi	r31, 0x04	; 4
    3952:	29 e0       	ldi	r18, 0x09	; 9
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	1d c0       	rjmp	.+58     	; 0x3992 <CALLBACK_USB_GetDescriptor+0xba>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &ConfigurationDescriptor.Mouse_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    3958:	e8 e0       	ldi	r30, 0x08	; 8
    395a:	f5 e0       	ldi	r31, 0x05	; 5
    395c:	fa cf       	rjmp	.-12     	; 0x3952 <CALLBACK_USB_GetDescriptor+0x7a>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    395e:	61 30       	cpi	r22, 0x01	; 1
    3960:	51 f0       	breq	.+20     	; 0x3976 <CALLBACK_USB_GetDescriptor+0x9e>
    3962:	61 30       	cpi	r22, 0x01	; 1
    3964:	18 f0       	brcs	.+6      	; 0x396c <CALLBACK_USB_GetDescriptor+0x94>
    3966:	62 30       	cpi	r22, 0x02	; 2
    3968:	81 f4       	brne	.+32     	; 0x398a <CALLBACK_USB_GetDescriptor+0xb2>
    396a:	0a c0       	rjmp	.+20     	; 0x3980 <CALLBACK_USB_GetDescriptor+0xa8>
    396c:	e0 ef       	ldi	r30, 0xF0	; 240
    396e:	f3 e0       	ldi	r31, 0x03	; 3
    3970:	2f e3       	ldi	r18, 0x3F	; 63
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	0e c0       	rjmp	.+28     	; 0x3992 <CALLBACK_USB_GetDescriptor+0xba>
    3976:	ef e2       	ldi	r30, 0x2F	; 47
    3978:	f4 e0       	ldi	r31, 0x04	; 4
    397a:	2d e4       	ldi	r18, 0x4D	; 77
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	09 c0       	rjmp	.+18     	; 0x3992 <CALLBACK_USB_GetDescriptor+0xba>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &MouseReport;
                Size    = sizeof(MouseReport);
                break;
    3980:	ec e7       	ldi	r30, 0x7C	; 124
    3982:	f4 e0       	ldi	r31, 0x04	; 4
    3984:	26 e3       	ldi	r18, 0x36	; 54
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	04 c0       	rjmp	.+8      	; 0x3992 <CALLBACK_USB_GetDescriptor+0xba>
    398a:	e0 e0       	ldi	r30, 0x00	; 0
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    3992:	ed 93       	st	X+, r30
    3994:	fc 93       	st	X, r31
    return Size;
}
    3996:	c9 01       	movw	r24, r18
    3998:	08 95       	ret

0000399a <Endpoint_Write_Control_Stream_LE>:
    399a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    399c:	40 91 fa 01 	lds	r20, 0x01FA
    39a0:	50 91 fb 01 	lds	r21, 0x01FB
    39a4:	46 17       	cp	r20, r22
    39a6:	57 07       	cpc	r21, r23
    39a8:	18 f4       	brcc	.+6      	; 0x39b0 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    39aa:	f9 01       	movw	r30, r18
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	43 c0       	rjmp	.+134    	; 0x3a36 <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    39b0:	61 15       	cp	r22, r1
    39b2:	71 05       	cpc	r23, r1
    39b4:	11 f0       	breq	.+4      	; 0x39ba <Endpoint_Write_Control_Stream_LE+0x20>
    39b6:	ab 01       	movw	r20, r22
    39b8:	f8 cf       	rjmp	.-16     	; 0x39aa <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39ba:	80 91 e8 00 	lds	r24, 0x00E8
    39be:	8e 77       	andi	r24, 0x7E	; 126
    39c0:	80 93 e8 00 	sts	0x00E8, r24
    39c4:	40 e0       	ldi	r20, 0x00	; 0
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	f0 cf       	rjmp	.-32     	; 0x39aa <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39ca:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39ce:	88 23       	and	r24, r24
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <Endpoint_Write_Control_Stream_LE+0x3a>
    39d2:	47 c0       	rjmp	.+142    	; 0x3a62 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39d4:	85 30       	cpi	r24, 0x05	; 5
    39d6:	09 f4       	brne	.+2      	; 0x39da <Endpoint_Write_Control_Stream_LE+0x40>
    39d8:	46 c0       	rjmp	.+140    	; 0x3a66 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    39da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    39de:	83 fd       	sbrc	r24, 3
    39e0:	44 c0       	rjmp	.+136    	; 0x3a6a <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    39e6:	82 fd       	sbrc	r24, 2
    39e8:	36 c0       	rjmp	.+108    	; 0x3a56 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39ea:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    39ee:	80 ff       	sbrs	r24, 0
    39f0:	22 c0       	rjmp	.+68     	; 0x3a36 <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    39f2:	80 91 f3 00 	lds	r24, 0x00F3
    39f6:	90 91 f2 00 	lds	r25, 0x00F2
    39fa:	78 2f       	mov	r23, r24
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	29 2f       	mov	r18, r25
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	26 2b       	or	r18, r22
    3a04:	37 2b       	or	r19, r23
    3a06:	07 c0       	rjmp	.+14     	; 0x3a16 <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3a08:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3a0a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3a0e:	41 50       	subi	r20, 0x01	; 1
    3a10:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3a12:	2f 5f       	subi	r18, 0xFF	; 255
    3a14:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3a16:	41 15       	cp	r20, r1
    3a18:	51 05       	cpc	r21, r1
    3a1a:	19 f0       	breq	.+6      	; 0x3a22 <Endpoint_Write_Control_Stream_LE+0x88>
    3a1c:	28 30       	cpi	r18, 0x08	; 8
    3a1e:	31 05       	cpc	r19, r1
    3a20:	98 f3       	brcs	.-26     	; 0x3a08 <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	28 30       	cpi	r18, 0x08	; 8
    3a26:	31 05       	cpc	r19, r1
    3a28:	09 f4       	brne	.+2      	; 0x3a2c <Endpoint_Write_Control_Stream_LE+0x92>
    3a2a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a2c:	80 91 e8 00 	lds	r24, 0x00E8
    3a30:	8e 77       	andi	r24, 0x7E	; 126
    3a32:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3a36:	41 15       	cp	r20, r1
    3a38:	51 05       	cpc	r21, r1
    3a3a:	39 f6       	brne	.-114    	; 0x39ca <Endpoint_Write_Control_Stream_LE+0x30>
    3a3c:	99 23       	and	r25, r25
    3a3e:	29 f6       	brne	.-118    	; 0x39ca <Endpoint_Write_Control_Stream_LE+0x30>
    3a40:	0a c0       	rjmp	.+20     	; 0x3a56 <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3a42:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3a46:	88 23       	and	r24, r24
    3a48:	61 f0       	breq	.+24     	; 0x3a62 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3a4a:	85 30       	cpi	r24, 0x05	; 5
    3a4c:	61 f0       	breq	.+24     	; 0x3a66 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3a4e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3a52:	83 fd       	sbrc	r24, 3
    3a54:	0a c0       	rjmp	.+20     	; 0x3a6a <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a56:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3a5a:	82 ff       	sbrs	r24, 2
    3a5c:	f2 cf       	rjmp	.-28     	; 0x3a42 <Endpoint_Write_Control_Stream_LE+0xa8>
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	08 95       	ret
    3a62:	82 e0       	ldi	r24, 0x02	; 2
    3a64:	08 95       	ret
    3a66:	83 e0       	ldi	r24, 0x03	; 3
    3a68:	08 95       	ret
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3a6c:	08 95       	ret

00003a6e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3a6e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3a70:	40 91 fa 01 	lds	r20, 0x01FA
    3a74:	50 91 fb 01 	lds	r21, 0x01FB
    3a78:	46 17       	cp	r20, r22
    3a7a:	57 07       	cpc	r21, r23
    3a7c:	18 f4       	brcc	.+6      	; 0x3a84 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3a7e:	f9 01       	movw	r30, r18
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	44 c0       	rjmp	.+136    	; 0x3b0c <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3a84:	61 15       	cp	r22, r1
    3a86:	71 05       	cpc	r23, r1
    3a88:	11 f0       	breq	.+4      	; 0x3a8e <Endpoint_Write_Control_PStream_LE+0x20>
    3a8a:	ab 01       	movw	r20, r22
    3a8c:	f8 cf       	rjmp	.-16     	; 0x3a7e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a8e:	80 91 e8 00 	lds	r24, 0x00E8
    3a92:	8e 77       	andi	r24, 0x7E	; 126
    3a94:	80 93 e8 00 	sts	0x00E8, r24
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	50 e0       	ldi	r21, 0x00	; 0
    3a9c:	f0 cf       	rjmp	.-32     	; 0x3a7e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3a9e:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3aa2:	88 23       	and	r24, r24
    3aa4:	09 f4       	brne	.+2      	; 0x3aa8 <Endpoint_Write_Control_PStream_LE+0x3a>
    3aa6:	48 c0       	rjmp	.+144    	; 0x3b38 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3aa8:	85 30       	cpi	r24, 0x05	; 5
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <Endpoint_Write_Control_PStream_LE+0x40>
    3aac:	47 c0       	rjmp	.+142    	; 0x3b3c <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3aae:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3ab2:	83 fd       	sbrc	r24, 3
    3ab4:	45 c0       	rjmp	.+138    	; 0x3b40 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3ab6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3aba:	82 fd       	sbrc	r24, 2
    3abc:	37 c0       	rjmp	.+110    	; 0x3b2c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3abe:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3ac2:	80 ff       	sbrs	r24, 0
    3ac4:	23 c0       	rjmp	.+70     	; 0x3b0c <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    3ac6:	80 91 f3 00 	lds	r24, 0x00F3
    3aca:	90 91 f2 00 	lds	r25, 0x00F2
    3ace:	78 2f       	mov	r23, r24
    3ad0:	60 e0       	ldi	r22, 0x00	; 0
    3ad2:	29 2f       	mov	r18, r25
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	26 2b       	or	r18, r22
    3ad8:	37 2b       	or	r19, r23
    3ada:	08 c0       	rjmp	.+16     	; 0x3aec <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3adc:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3ade:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3ae2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    3ae4:	41 50       	subi	r20, 0x01	; 1
    3ae6:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3ae8:	2f 5f       	subi	r18, 0xFF	; 255
    3aea:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3aec:	41 15       	cp	r20, r1
    3aee:	51 05       	cpc	r21, r1
    3af0:	19 f0       	breq	.+6      	; 0x3af8 <Endpoint_Write_Control_PStream_LE+0x8a>
    3af2:	28 30       	cpi	r18, 0x08	; 8
    3af4:	31 05       	cpc	r19, r1
    3af6:	90 f3       	brcs	.-28     	; 0x3adc <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	28 30       	cpi	r18, 0x08	; 8
    3afc:	31 05       	cpc	r19, r1
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <Endpoint_Write_Control_PStream_LE+0x94>
    3b00:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3b02:	80 91 e8 00 	lds	r24, 0x00E8
    3b06:	8e 77       	andi	r24, 0x7E	; 126
    3b08:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3b0c:	41 15       	cp	r20, r1
    3b0e:	51 05       	cpc	r21, r1
    3b10:	31 f6       	brne	.-116    	; 0x3a9e <Endpoint_Write_Control_PStream_LE+0x30>
    3b12:	99 23       	and	r25, r25
    3b14:	21 f6       	brne	.-120    	; 0x3a9e <Endpoint_Write_Control_PStream_LE+0x30>
    3b16:	0a c0       	rjmp	.+20     	; 0x3b2c <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3b18:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3b1c:	88 23       	and	r24, r24
    3b1e:	61 f0       	breq	.+24     	; 0x3b38 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3b20:	85 30       	cpi	r24, 0x05	; 5
    3b22:	61 f0       	breq	.+24     	; 0x3b3c <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3b24:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3b28:	83 fd       	sbrc	r24, 3
    3b2a:	0a c0       	rjmp	.+20     	; 0x3b40 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3b2c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3b30:	82 ff       	sbrs	r24, 2
    3b32:	f2 cf       	rjmp	.-28     	; 0x3b18 <Endpoint_Write_Control_PStream_LE+0xaa>
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	08 95       	ret
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	08 95       	ret
    3b3c:	83 e0       	ldi	r24, 0x03	; 3
    3b3e:	08 95       	ret
    3b40:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3b42:	08 95       	ret

00003b44 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3b44:	bf 92       	push	r11
    3b46:	cf 92       	push	r12
    3b48:	df 92       	push	r13
    3b4a:	ef 92       	push	r14
    3b4c:	ff 92       	push	r15
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	18 2f       	mov	r17, r24
    3b58:	09 2f       	mov	r16, r25
    3b5a:	7b 01       	movw	r14, r22
    3b5c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3b5e:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <Endpoint_WaitUntilReady>
    3b62:	b8 2e       	mov	r11, r24
    3b64:	88 23       	and	r24, r24
    3b66:	b1 f5       	brne	.+108    	; 0x3bd4 <Endpoint_Write_Stream_LE+0x90>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3b68:	81 2f       	mov	r24, r17
    3b6a:	90 2f       	mov	r25, r16
    3b6c:	9c 01       	movw	r18, r24
    3b6e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3b70:	c1 14       	cp	r12, r1
    3b72:	d1 04       	cpc	r13, r1
    3b74:	39 f0       	breq	.+14     	; 0x3b84 <Endpoint_Write_Stream_LE+0x40>
	{
		Length -= *BytesProcessed;
    3b76:	f6 01       	movw	r30, r12
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	e8 1a       	sub	r14, r24
    3b7e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3b80:	c8 0f       	add	r28, r24
    3b82:	d9 1f       	adc	r29, r25
    3b84:	00 e0       	ldi	r16, 0x00	; 0
    3b86:	10 e0       	ldi	r17, 0x00	; 0
    3b88:	22 c0       	rjmp	.+68     	; 0x3bce <Endpoint_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3b8a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3b8e:	85 fd       	sbrc	r24, 5
    3b90:	16 c0       	rjmp	.+44     	; 0x3bbe <Endpoint_Write_Stream_LE+0x7a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3b92:	80 91 e8 00 	lds	r24, 0x00E8
    3b96:	8e 77       	andi	r24, 0x7E	; 126
    3b98:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    3b9c:	c1 14       	cp	r12, r1
    3b9e:	d1 04       	cpc	r13, r1
    3ba0:	49 f0       	breq	.+18     	; 0x3bb4 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    3ba2:	f6 01       	movw	r30, r12
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
    3ba8:	80 0f       	add	r24, r16
    3baa:	91 1f       	adc	r25, r17
    3bac:	91 83       	std	Z+1, r25	; 0x01
    3bae:	80 83       	st	Z, r24
    3bb0:	85 e0       	ldi	r24, 0x05	; 5
    3bb2:	11 c0       	rjmp	.+34     	; 0x3bd6 <Endpoint_Write_Stream_LE+0x92>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3bb4:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <Endpoint_WaitUntilReady>
    3bb8:	88 23       	and	r24, r24
    3bba:	49 f0       	breq	.+18     	; 0x3bce <Endpoint_Write_Stream_LE+0x8a>
    3bbc:	0c c0       	rjmp	.+24     	; 0x3bd6 <Endpoint_Write_Stream_LE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3bbe:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3bc0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3bc4:	08 94       	sec
    3bc6:	e1 08       	sbc	r14, r1
    3bc8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    3bca:	0f 5f       	subi	r16, 0xFF	; 255
    3bcc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3bce:	e1 14       	cp	r14, r1
    3bd0:	f1 04       	cpc	r15, r1
    3bd2:	d9 f6       	brne	.-74     	; 0x3b8a <Endpoint_Write_Stream_LE+0x46>
    3bd4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	df 90       	pop	r13
    3be4:	cf 90       	pop	r12
    3be6:	bf 90       	pop	r11
    3be8:	08 95       	ret

00003bea <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    3bea:	38 2f       	mov	r19, r24
    3bec:	28 2f       	mov	r18, r24
    3bee:	2e c0       	rjmp	.+92     	; 0x3c4c <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3bf0:	82 2f       	mov	r24, r18
    3bf2:	8f 70       	andi	r24, 0x0F	; 15
    3bf4:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    3bf8:	23 17       	cp	r18, r19
    3bfa:	21 f4       	brne	.+8      	; 0x3c04 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    3bfc:	76 2f       	mov	r23, r22
    3bfe:	94 2f       	mov	r25, r20
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	06 c0       	rjmp	.+12     	; 0x3c10 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    3c04:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    3c08:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    3c0c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    3c10:	91 ff       	sbrs	r25, 1
    3c12:	1b c0       	rjmp	.+54     	; 0x3c4a <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    3c14:	80 91 eb 00 	lds	r24, 0x00EB
    3c18:	8e 7f       	andi	r24, 0xFE	; 254
    3c1a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    3c1e:	80 91 ed 00 	lds	r24, 0x00ED
    3c22:	8d 7f       	andi	r24, 0xFD	; 253
    3c24:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    3c28:	80 91 eb 00 	lds	r24, 0x00EB
    3c2c:	81 60       	ori	r24, 0x01	; 1
    3c2e:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    3c32:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    3c36:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    3c3a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    3c3e:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    3c42:	87 fd       	sbrc	r24, 7
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <Endpoint_ConfigureEndpoint_Prv+0x60>
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3c4a:	2f 5f       	subi	r18, 0xFF	; 255
    3c4c:	27 30       	cpi	r18, 0x07	; 7
    3c4e:	80 f2       	brcs	.-96     	; 0x3bf0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c50:	3f 70       	andi	r19, 0x0F	; 15
    3c52:	30 93 e9 00 	sts	0x00E9, r19
    3c56:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    3c58:	08 95       	ret

00003c5a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3c5a:	80 91 f4 01 	lds	r24, 0x01F4
    3c5e:	88 23       	and	r24, r24
    3c60:	9c f4       	brge	.+38     	; 0x3c88 <Endpoint_ClearStatusStage+0x2e>
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3c64:	80 91 f3 01 	lds	r24, 0x01F3
    3c68:	88 23       	and	r24, r24
    3c6a:	b9 f0       	breq	.+46     	; 0x3c9a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3c6c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3c70:	82 ff       	sbrs	r24, 2
    3c72:	f8 cf       	rjmp	.-16     	; 0x3c64 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3c74:	80 91 e8 00 	lds	r24, 0x00E8
    3c78:	8b 77       	andi	r24, 0x7B	; 123
    3c7a:	80 93 e8 00 	sts	0x00E8, r24
    3c7e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3c80:	80 91 f3 01 	lds	r24, 0x01F3
    3c84:	88 23       	and	r24, r24
    3c86:	49 f0       	breq	.+18     	; 0x3c9a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3c88:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3c8c:	80 ff       	sbrs	r24, 0
    3c8e:	f8 cf       	rjmp	.-16     	; 0x3c80 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3c90:	80 91 e8 00 	lds	r24, 0x00E8
    3c94:	8e 77       	andi	r24, 0x7E	; 126
    3c96:	80 93 e8 00 	sts	0x00E8, r24
    3c9a:	08 95       	ret

00003c9c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3c9c:	40 91 e4 00 	lds	r20, 0x00E4
    3ca0:	50 91 e5 00 	lds	r21, 0x00E5
    3ca4:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3ca6:	80 91 ec 00 	lds	r24, 0x00EC
    3caa:	80 ff       	sbrs	r24, 0
    3cac:	24 c0       	rjmp	.+72     	; 0x3cf6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3cae:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    3cb2:	80 fd       	sbrc	r24, 0
    3cb4:	1e c0       	rjmp	.+60     	; 0x3cf2 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3cb6:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3cba:	88 23       	and	r24, r24
    3cbc:	11 f4       	brne	.+4      	; 0x3cc2 <Endpoint_WaitUntilReady+0x26>
    3cbe:	82 e0       	ldi	r24, 0x02	; 2
    3cc0:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3cc2:	85 30       	cpi	r24, 0x05	; 5
    3cc4:	11 f4       	brne	.+4      	; 0x3cca <Endpoint_WaitUntilReady+0x2e>
    3cc6:	83 e0       	ldi	r24, 0x03	; 3
    3cc8:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3cca:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3cce:	85 ff       	sbrs	r24, 5
    3cd0:	02 c0       	rjmp	.+4      	; 0x3cd6 <Endpoint_WaitUntilReady+0x3a>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	08 95       	ret
    3cd6:	80 91 e4 00 	lds	r24, 0x00E4
    3cda:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3cde:	84 17       	cp	r24, r20
    3ce0:	95 07       	cpc	r25, r21
    3ce2:	09 f3       	breq	.-62     	; 0x3ca6 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    3ce4:	22 23       	and	r18, r18
    3ce6:	11 f4       	brne	.+4      	; 0x3cec <Endpoint_WaitUntilReady+0x50>
    3ce8:	84 e0       	ldi	r24, 0x04	; 4
    3cea:	08 95       	ret
    3cec:	21 50       	subi	r18, 0x01	; 1
    3cee:	ac 01       	movw	r20, r24
    3cf0:	da cf       	rjmp	.-76     	; 0x3ca6 <Endpoint_WaitUntilReady+0xa>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3cf4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3cf6:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3cfa:	82 ff       	sbrs	r24, 2
    3cfc:	dc cf       	rjmp	.-72     	; 0x3cb6 <Endpoint_WaitUntilReady+0x1a>
    3cfe:	f9 cf       	rjmp	.-14     	; 0x3cf2 <Endpoint_WaitUntilReady+0x56>

00003d00 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    3d00:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3d04:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    3d08:	e0 ee       	ldi	r30, 0xE0	; 224
    3d0a:	f0 e0       	ldi	r31, 0x00	; 0
    3d0c:	80 81       	ld	r24, Z
    3d0e:	81 60       	ori	r24, 0x01	; 1
    3d10:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    3d12:	a8 ed       	ldi	r26, 0xD8	; 216
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	8c 91       	ld	r24, X
    3d18:	8f 77       	andi	r24, 0x7F	; 127
    3d1a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3d1c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    3d1e:	e7 ed       	ldi	r30, 0xD7	; 215
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	8e 7f       	andi	r24, 0xFE	; 254
    3d26:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3d28:	8c 91       	ld	r24, X
    3d2a:	8f 7e       	andi	r24, 0xEF	; 239
    3d2c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    3d2e:	10 92 f2 01 	sts	0x01F2, r1
}
    3d32:	08 95       	ret

00003d34 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    3d34:	ef 92       	push	r14
    3d36:	ff 92       	push	r15
    3d38:	0f 93       	push	r16
    3d3a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3d3c:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3d40:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3d44:	08 ed       	ldi	r16, 0xD8	; 216
    3d46:	10 e0       	ldi	r17, 0x00	; 0
    3d48:	f8 01       	movw	r30, r16
    3d4a:	80 81       	ld	r24, Z
    3d4c:	8f 77       	andi	r24, 0x7F	; 127
    3d4e:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    3d50:	80 81       	ld	r24, Z
    3d52:	80 68       	ori	r24, 0x80	; 128
    3d54:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3d56:	80 81       	ld	r24, Z
    3d58:	8f 7d       	andi	r24, 0xDF	; 223
    3d5a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3d5c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3d5e:	10 92 f3 01 	sts	0x01F3, r1
	USB_Device_ConfigurationNumber  = 0;
    3d62:	10 92 ef 01 	sts	0x01EF, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3d66:	10 92 f1 01 	sts	0x01F1, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3d6a:	10 92 f0 01 	sts	0x01F0, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3d6e:	80 ee       	ldi	r24, 0xE0	; 224
    3d70:	e8 2e       	mov	r14, r24
    3d72:	f1 2c       	mov	r15, r1
    3d74:	f7 01       	movw	r30, r14
    3d76:	80 81       	ld	r24, Z
    3d78:	8b 7f       	andi	r24, 0xFB	; 251
    3d7a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	80 81       	ld	r24, Z
    3d80:	81 60       	ori	r24, 0x01	; 1
    3d82:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	42 e0       	ldi	r20, 0x02	; 2
    3d8a:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3d8e:	e1 ee       	ldi	r30, 0xE1	; 225
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	80 81       	ld	r24, Z
    3d94:	8e 7f       	andi	r24, 0xFE	; 254
    3d96:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3d98:	e2 ee       	ldi	r30, 0xE2	; 226
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	80 81       	ld	r24, Z
    3d9e:	81 60       	ori	r24, 0x01	; 1
    3da0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3da2:	80 81       	ld	r24, Z
    3da4:	88 60       	ori	r24, 0x08	; 8
    3da6:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3da8:	f7 01       	movw	r30, r14
    3daa:	80 81       	ld	r24, Z
    3dac:	8e 7f       	andi	r24, 0xFE	; 254
    3dae:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3db0:	f8 01       	movw	r30, r16
    3db2:	80 81       	ld	r24, Z
    3db4:	80 61       	ori	r24, 0x10	; 16
    3db6:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	ff 90       	pop	r15
    3dbe:	ef 90       	pop	r14
    3dc0:	08 95       	ret

00003dc2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3dc2:	e8 ed       	ldi	r30, 0xD8	; 216
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	80 81       	ld	r24, Z
    3dc8:	8f 7e       	andi	r24, 0xEF	; 239
    3dca:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    3dcc:	e7 ed       	ldi	r30, 0xD7	; 215
    3dce:	f0 e0       	ldi	r31, 0x00	; 0
    3dd0:	80 81       	ld	r24, Z
    3dd2:	81 60       	ori	r24, 0x01	; 1
    3dd4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    3dd6:	84 e0       	ldi	r24, 0x04	; 4
    3dd8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	80 93 f2 01 	sts	0x01F2, r24

	USB_ResetInterface();
    3de0:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <USB_ResetInterface>
}
    3de4:	08 95       	ret

00003de6 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    3de6:	e8 ed       	ldi	r30, 0xD8	; 216
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	80 81       	ld	r24, Z
    3dec:	8e 7f       	andi	r24, 0xFE	; 254
    3dee:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3df0:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    3df4:	08 95       	ret

00003df6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3df6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3dfa:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    3dfe:	08 95       	ret

00003e00 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3e00:	1f 92       	push	r1
    3e02:	0f 92       	push	r0
    3e04:	0f b6       	in	r0, 0x3f	; 63
    3e06:	0f 92       	push	r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	1f 93       	push	r17
    3e0c:	2f 93       	push	r18
    3e0e:	3f 93       	push	r19
    3e10:	4f 93       	push	r20
    3e12:	5f 93       	push	r21
    3e14:	6f 93       	push	r22
    3e16:	7f 93       	push	r23
    3e18:	8f 93       	push	r24
    3e1a:	9f 93       	push	r25
    3e1c:	af 93       	push	r26
    3e1e:	bf 93       	push	r27
    3e20:	ef 93       	push	r30
    3e22:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e24:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3e28:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e2c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3e30:	80 91 f0 00 	lds	r24, 0x00F0
    3e34:	87 7f       	andi	r24, 0xF7	; 247
    3e36:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3e3a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3e3c:	0e 94 0e 20 	call	0x401c	; 0x401c <USB_Device_ProcessControlRequest>
    3e40:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3e44:	80 91 f0 00 	lds	r24, 0x00F0
    3e48:	88 60       	ori	r24, 0x08	; 8
    3e4a:	80 93 f0 00 	sts	0x00F0, r24
    3e4e:	1f 70       	andi	r17, 0x0F	; 15
    3e50:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3e54:	ff 91       	pop	r31
    3e56:	ef 91       	pop	r30
    3e58:	bf 91       	pop	r27
    3e5a:	af 91       	pop	r26
    3e5c:	9f 91       	pop	r25
    3e5e:	8f 91       	pop	r24
    3e60:	7f 91       	pop	r23
    3e62:	6f 91       	pop	r22
    3e64:	5f 91       	pop	r21
    3e66:	4f 91       	pop	r20
    3e68:	3f 91       	pop	r19
    3e6a:	2f 91       	pop	r18
    3e6c:	1f 91       	pop	r17
    3e6e:	0f 90       	pop	r0
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	0f 90       	pop	r0
    3e74:	1f 90       	pop	r1
    3e76:	18 95       	reti

00003e78 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3e78:	1f 92       	push	r1
    3e7a:	0f 92       	push	r0
    3e7c:	0f b6       	in	r0, 0x3f	; 63
    3e7e:	0f 92       	push	r0
    3e80:	11 24       	eor	r1, r1
    3e82:	2f 93       	push	r18
    3e84:	3f 93       	push	r19
    3e86:	4f 93       	push	r20
    3e88:	5f 93       	push	r21
    3e8a:	6f 93       	push	r22
    3e8c:	7f 93       	push	r23
    3e8e:	8f 93       	push	r24
    3e90:	9f 93       	push	r25
    3e92:	af 93       	push	r26
    3e94:	bf 93       	push	r27
    3e96:	ef 93       	push	r30
    3e98:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3e9a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3e9e:	82 ff       	sbrs	r24, 2
    3ea0:	0b c0       	rjmp	.+22     	; 0x3eb8 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3ea2:	80 91 e2 00 	lds	r24, 0x00E2
    3ea6:	82 ff       	sbrs	r24, 2
    3ea8:	07 c0       	rjmp	.+14     	; 0x3eb8 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3eaa:	80 91 e1 00 	lds	r24, 0x00E1
    3eae:	8b 7f       	andi	r24, 0xFB	; 251
    3eb0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3eb4:	0e 94 7e 21 	call	0x42fc	; 0x42fc <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3eb8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3ebc:	80 ff       	sbrs	r24, 0
    3ebe:	1f c0       	rjmp	.+62     	; 0x3efe <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3ec0:	80 91 d8 00 	lds	r24, 0x00D8
    3ec4:	80 ff       	sbrs	r24, 0
    3ec6:	1b c0       	rjmp	.+54     	; 0x3efe <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    3ec8:	80 91 da 00 	lds	r24, 0x00DA
    3ecc:	8e 7f       	andi	r24, 0xFE	; 254
    3ece:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3ed2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3ed6:	80 ff       	sbrs	r24, 0
    3ed8:	0d c0       	rjmp	.+26     	; 0x3ef4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3eda:	80 e1       	ldi	r24, 0x10	; 16
    3edc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3ede:	82 e1       	ldi	r24, 0x12	; 18
    3ee0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3ee2:	09 b4       	in	r0, 0x29	; 41
    3ee4:	00 fe       	sbrs	r0, 0
    3ee6:	fd cf       	rjmp	.-6      	; 0x3ee2 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	80 93 f3 01 	sts	0x01F3, r24
			EVENT_USB_Device_Connect();
    3eee:	0e 94 89 1b 	call	0x3712	; 0x3712 <EVENT_USB_Device_Connect>
    3ef2:	05 c0       	rjmp	.+10     	; 0x3efe <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3ef4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3ef6:	10 92 f3 01 	sts	0x01F3, r1
			EVENT_USB_Device_Disconnect();
    3efa:	0e 94 b8 1a 	call	0x3570	; 0x3570 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3efe:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3f02:	80 ff       	sbrs	r24, 0
    3f04:	19 c0       	rjmp	.+50     	; 0x3f38 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3f06:	80 91 e2 00 	lds	r24, 0x00E2
    3f0a:	80 ff       	sbrs	r24, 0
    3f0c:	15 c0       	rjmp	.+42     	; 0x3f38 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3f0e:	80 91 e2 00 	lds	r24, 0x00E2
    3f12:	8e 7f       	andi	r24, 0xFE	; 254
    3f14:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3f18:	80 91 e2 00 	lds	r24, 0x00E2
    3f1c:	80 61       	ori	r24, 0x10	; 16
    3f1e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3f22:	80 91 d8 00 	lds	r24, 0x00D8
    3f26:	80 62       	ori	r24, 0x20	; 32
    3f28:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3f2c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3f2e:	85 e0       	ldi	r24, 0x05	; 5
    3f30:	80 93 f3 01 	sts	0x01F3, r24
		EVENT_USB_Device_Suspend();
    3f34:	0e 94 bc 1a 	call	0x3578	; 0x3578 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3f38:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3f3c:	84 ff       	sbrs	r24, 4
    3f3e:	30 c0       	rjmp	.+96     	; 0x3fa0 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3f40:	80 91 e2 00 	lds	r24, 0x00E2
    3f44:	84 ff       	sbrs	r24, 4
    3f46:	2c c0       	rjmp	.+88     	; 0x3fa0 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3f48:	80 e1       	ldi	r24, 0x10	; 16
    3f4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3f4c:	82 e1       	ldi	r24, 0x12	; 18
    3f4e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3f50:	09 b4       	in	r0, 0x29	; 41
    3f52:	00 fe       	sbrs	r0, 0
    3f54:	fd cf       	rjmp	.-6      	; 0x3f50 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3f56:	80 91 d8 00 	lds	r24, 0x00D8
    3f5a:	8f 7d       	andi	r24, 0xDF	; 223
    3f5c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3f60:	80 91 e1 00 	lds	r24, 0x00E1
    3f64:	8f 7e       	andi	r24, 0xEF	; 239
    3f66:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3f6a:	80 91 e2 00 	lds	r24, 0x00E2
    3f6e:	8f 7e       	andi	r24, 0xEF	; 239
    3f70:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3f74:	80 91 e2 00 	lds	r24, 0x00E2
    3f78:	81 60       	ori	r24, 0x01	; 1
    3f7a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3f7e:	80 91 ef 01 	lds	r24, 0x01EF
    3f82:	88 23       	and	r24, r24
    3f84:	11 f0       	breq	.+4      	; 0x3f8a <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3f86:	84 e0       	ldi	r24, 0x04	; 4
    3f88:	07 c0       	rjmp	.+14     	; 0x3f98 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3f8a:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3f8e:	87 fd       	sbrc	r24, 7
    3f90:	02 c0       	rjmp	.+4      	; 0x3f96 <__vector_10+0x11e>
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	01 c0       	rjmp	.+2      	; 0x3f98 <__vector_10+0x120>
    3f96:	83 e0       	ldi	r24, 0x03	; 3
    3f98:	80 93 f3 01 	sts	0x01F3, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3f9c:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3fa0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3fa4:	83 ff       	sbrs	r24, 3
    3fa6:	29 c0       	rjmp	.+82     	; 0x3ffa <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3fa8:	80 91 e2 00 	lds	r24, 0x00E2
    3fac:	83 ff       	sbrs	r24, 3
    3fae:	25 c0       	rjmp	.+74     	; 0x3ffa <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3fb0:	80 91 e1 00 	lds	r24, 0x00E1
    3fb4:	87 7f       	andi	r24, 0xF7	; 247
    3fb6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3fba:	82 e0       	ldi	r24, 0x02	; 2
    3fbc:	80 93 f3 01 	sts	0x01F3, r24
		USB_Device_ConfigurationNumber = 0;
    3fc0:	10 92 ef 01 	sts	0x01EF, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3fc4:	80 91 e1 00 	lds	r24, 0x00E1
    3fc8:	8e 7f       	andi	r24, 0xFE	; 254
    3fca:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3fce:	80 91 e2 00 	lds	r24, 0x00E2
    3fd2:	8e 7f       	andi	r24, 0xFE	; 254
    3fd4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3fd8:	80 91 e2 00 	lds	r24, 0x00E2
    3fdc:	80 61       	ori	r24, 0x10	; 16
    3fde:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	60 e0       	ldi	r22, 0x00	; 0
    3fe6:	42 e0       	ldi	r20, 0x02	; 2
    3fe8:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3fec:	80 91 f0 00 	lds	r24, 0x00F0
    3ff0:	88 60       	ori	r24, 0x08	; 8
    3ff2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3ff6:	0e 94 bb 1a 	call	0x3576	; 0x3576 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3ffa:	ff 91       	pop	r31
    3ffc:	ef 91       	pop	r30
    3ffe:	bf 91       	pop	r27
    4000:	af 91       	pop	r26
    4002:	9f 91       	pop	r25
    4004:	8f 91       	pop	r24
    4006:	7f 91       	pop	r23
    4008:	6f 91       	pop	r22
    400a:	5f 91       	pop	r21
    400c:	4f 91       	pop	r20
    400e:	3f 91       	pop	r19
    4010:	2f 91       	pop	r18
    4012:	0f 90       	pop	r0
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	0f 90       	pop	r0
    4018:	1f 90       	pop	r1
    401a:	18 95       	reti

0000401c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    401c:	1f 93       	push	r17
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
    4026:	ac 97       	sbiw	r28, 0x2c	; 44
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	cd bf       	out	0x3d, r28	; 61
    4032:	e4 ef       	ldi	r30, 0xF4	; 244
    4034:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    4036:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    403a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    403c:	21 e0       	ldi	r18, 0x01	; 1
    403e:	ec 3f       	cpi	r30, 0xFC	; 252
    4040:	f2 07       	cpc	r31, r18
    4042:	c9 f7       	brne	.-14     	; 0x4036 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    4044:	0e 94 97 1b 	call	0x372e	; 0x372e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4048:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    404c:	83 ff       	sbrs	r24, 3
    404e:	3e c1       	rjmp	.+636    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    4050:	80 91 f4 01 	lds	r24, 0x01F4

		switch (USB_ControlRequest.bRequest)
    4054:	30 91 f5 01 	lds	r19, 0x01F5
    4058:	35 30       	cpi	r19, 0x05	; 5
    405a:	09 f4       	brne	.+2      	; 0x405e <USB_Device_ProcessControlRequest+0x42>
    405c:	87 c0       	rjmp	.+270    	; 0x416c <USB_Device_ProcessControlRequest+0x150>
    405e:	36 30       	cpi	r19, 0x06	; 6
    4060:	40 f4       	brcc	.+16     	; 0x4072 <USB_Device_ProcessControlRequest+0x56>
    4062:	31 30       	cpi	r19, 0x01	; 1
    4064:	c9 f1       	breq	.+114    	; 0x40d8 <USB_Device_ProcessControlRequest+0xbc>
    4066:	31 30       	cpi	r19, 0x01	; 1
    4068:	70 f0       	brcs	.+28     	; 0x4086 <USB_Device_ProcessControlRequest+0x6a>
    406a:	33 30       	cpi	r19, 0x03	; 3
    406c:	09 f0       	breq	.+2      	; 0x4070 <USB_Device_ProcessControlRequest+0x54>
    406e:	2e c1       	rjmp	.+604    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
    4070:	33 c0       	rjmp	.+102    	; 0x40d8 <USB_Device_ProcessControlRequest+0xbc>
    4072:	38 30       	cpi	r19, 0x08	; 8
    4074:	09 f4       	brne	.+2      	; 0x4078 <USB_Device_ProcessControlRequest+0x5c>
    4076:	f9 c0       	rjmp	.+498    	; 0x426a <USB_Device_ProcessControlRequest+0x24e>
    4078:	39 30       	cpi	r19, 0x09	; 9
    407a:	09 f4       	brne	.+2      	; 0x407e <USB_Device_ProcessControlRequest+0x62>
    407c:	09 c1       	rjmp	.+530    	; 0x4290 <USB_Device_ProcessControlRequest+0x274>
    407e:	36 30       	cpi	r19, 0x06	; 6
    4080:	09 f0       	breq	.+2      	; 0x4084 <USB_Device_ProcessControlRequest+0x68>
    4082:	24 c1       	rjmp	.+584    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
    4084:	97 c0       	rjmp	.+302    	; 0x41b4 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4086:	80 38       	cpi	r24, 0x80	; 128
    4088:	21 f0       	breq	.+8      	; 0x4092 <USB_Device_ProcessControlRequest+0x76>
    408a:	82 38       	cpi	r24, 0x82	; 130
    408c:	09 f0       	breq	.+2      	; 0x4090 <USB_Device_ProcessControlRequest+0x74>
    408e:	1e c1       	rjmp	.+572    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
    4090:	08 c0       	rjmp	.+16     	; 0x40a2 <USB_Device_ProcessControlRequest+0x86>
    4092:	90 91 f0 01 	lds	r25, 0x01F0
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    4096:	80 91 f1 01 	lds	r24, 0x01F1
    409a:	88 23       	and	r24, r24
    409c:	99 f0       	breq	.+38     	; 0x40c4 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    409e:	92 60       	ori	r25, 0x02	; 2
    40a0:	11 c0       	rjmp	.+34     	; 0x40c4 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    40a2:	80 91 f8 01 	lds	r24, 0x01F8
    40a6:	8f 70       	andi	r24, 0x0F	; 15
    40a8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    40ac:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	25 e0       	ldi	r18, 0x05	; 5
    40b4:	96 95       	lsr	r25
    40b6:	87 95       	ror	r24
    40b8:	2a 95       	dec	r18
    40ba:	e1 f7       	brne	.-8      	; 0x40b4 <USB_Device_ProcessControlRequest+0x98>
    40bc:	98 2f       	mov	r25, r24
    40be:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    40c0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    40c4:	80 91 e8 00 	lds	r24, 0x00E8
    40c8:	87 7f       	andi	r24, 0xF7	; 247
    40ca:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    40ce:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    40d2:	10 92 f1 00 	sts	0x00F1, r1
    40d6:	d4 c0       	rjmp	.+424    	; 0x4280 <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    40d8:	88 23       	and	r24, r24
    40da:	19 f0       	breq	.+6      	; 0x40e2 <USB_Device_ProcessControlRequest+0xc6>
    40dc:	82 30       	cpi	r24, 0x02	; 2
    40de:	09 f0       	breq	.+2      	; 0x40e2 <USB_Device_ProcessControlRequest+0xc6>
    40e0:	f5 c0       	rjmp	.+490    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	8f 71       	andi	r24, 0x1F	; 31
    40e6:	90 70       	andi	r25, 0x00	; 0
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	21 f0       	breq	.+8      	; 0x40f4 <USB_Device_ProcessControlRequest+0xd8>
    40ec:	02 97       	sbiw	r24, 0x02	; 2
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <USB_Device_ProcessControlRequest+0xd6>
    40f0:	ed c0       	rjmp	.+474    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
    40f2:	0c c0       	rjmp	.+24     	; 0x410c <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    40f4:	80 91 f6 01 	lds	r24, 0x01F6
    40f8:	81 30       	cpi	r24, 0x01	; 1
    40fa:	09 f0       	breq	.+2      	; 0x40fe <USB_Device_ProcessControlRequest+0xe2>
    40fc:	e7 c0       	rjmp	.+462    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    40fe:	10 92 f1 01 	sts	0x01F1, r1
    4102:	33 30       	cpi	r19, 0x03	; 3
    4104:	69 f5       	brne	.+90     	; 0x4160 <USB_Device_ProcessControlRequest+0x144>
    4106:	80 93 f1 01 	sts	0x01F1, r24
    410a:	2a c0       	rjmp	.+84     	; 0x4160 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    410c:	80 91 f6 01 	lds	r24, 0x01F6
    4110:	88 23       	and	r24, r24
    4112:	31 f5       	brne	.+76     	; 0x4160 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    4114:	20 91 f8 01 	lds	r18, 0x01F8
    4118:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    411a:	09 f4       	brne	.+2      	; 0x411e <USB_Device_ProcessControlRequest+0x102>
    411c:	d7 c0       	rjmp	.+430    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    411e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    4122:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    4126:	80 ff       	sbrs	r24, 0
    4128:	1b c0       	rjmp	.+54     	; 0x4160 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    412a:	33 30       	cpi	r19, 0x03	; 3
    412c:	21 f4       	brne	.+8      	; 0x4136 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    412e:	80 91 eb 00 	lds	r24, 0x00EB
    4132:	80 62       	ori	r24, 0x20	; 32
    4134:	13 c0       	rjmp	.+38     	; 0x415c <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4136:	80 91 eb 00 	lds	r24, 0x00EB
    413a:	80 61       	ori	r24, 0x10	; 16
    413c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	02 c0       	rjmp	.+4      	; 0x414a <USB_Device_ProcessControlRequest+0x12e>
    4146:	88 0f       	add	r24, r24
    4148:	99 1f       	adc	r25, r25
    414a:	2a 95       	dec	r18
    414c:	e2 f7       	brpl	.-8      	; 0x4146 <USB_Device_ProcessControlRequest+0x12a>
    414e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    4152:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4156:	80 91 eb 00 	lds	r24, 0x00EB
    415a:	88 60       	ori	r24, 0x08	; 8
    415c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4160:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4164:	80 91 e8 00 	lds	r24, 0x00E8
    4168:	87 7f       	andi	r24, 0xF7	; 247
    416a:	8d c0       	rjmp	.+282    	; 0x4286 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    416c:	88 23       	and	r24, r24
    416e:	09 f0       	breq	.+2      	; 0x4172 <USB_Device_ProcessControlRequest+0x156>
    4170:	ad c0       	rjmp	.+346    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    4172:	10 91 f6 01 	lds	r17, 0x01F6
    4176:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    4178:	80 91 e3 00 	lds	r24, 0x00E3
    417c:	80 78       	andi	r24, 0x80	; 128
    417e:	81 2b       	or	r24, r17
    4180:	80 93 e3 00 	sts	0x00E3, r24
    4184:	80 91 e8 00 	lds	r24, 0x00E8
    4188:	87 7f       	andi	r24, 0xF7	; 247
    418a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    418e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4192:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    4196:	80 ff       	sbrs	r24, 0
    4198:	fc cf       	rjmp	.-8      	; 0x4192 <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    419a:	80 91 e3 00 	lds	r24, 0x00E3
    419e:	80 68       	ori	r24, 0x80	; 128
    41a0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    41a4:	11 23       	and	r17, r17
    41a6:	11 f4       	brne	.+4      	; 0x41ac <USB_Device_ProcessControlRequest+0x190>
    41a8:	82 e0       	ldi	r24, 0x02	; 2
    41aa:	01 c0       	rjmp	.+2      	; 0x41ae <USB_Device_ProcessControlRequest+0x192>
    41ac:	83 e0       	ldi	r24, 0x03	; 3
    41ae:	80 93 f3 01 	sts	0x01F3, r24
    41b2:	8c c0       	rjmp	.+280    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    41b4:	80 58       	subi	r24, 0x80	; 128
    41b6:	82 30       	cpi	r24, 0x02	; 2
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <USB_Device_ProcessControlRequest+0x1a0>
    41ba:	88 c0       	rjmp	.+272    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    41bc:	80 91 f6 01 	lds	r24, 0x01F6
    41c0:	90 91 f7 01 	lds	r25, 0x01F7
    41c4:	23 e0       	ldi	r18, 0x03	; 3
    41c6:	8c 3d       	cpi	r24, 0xDC	; 220
    41c8:	92 07       	cpc	r25, r18
    41ca:	09 f0       	breq	.+2      	; 0x41ce <USB_Device_ProcessControlRequest+0x1b2>
    41cc:	34 c0       	rjmp	.+104    	; 0x4236 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    41ce:	83 e0       	ldi	r24, 0x03	; 3
    41d0:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    41d2:	8a e2       	ldi	r24, 0x2A	; 42
    41d4:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    41d6:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    41d8:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    41da:	de 01       	movw	r26, r28
    41dc:	15 96       	adiw	r26, 0x05	; 5
    41de:	6e e0       	ldi	r22, 0x0E	; 14
    41e0:	40 e0       	ldi	r20, 0x00	; 0
    41e2:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    41e4:	11 e2       	ldi	r17, 0x21	; 33
    41e6:	e6 2f       	mov	r30, r22
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	10 93 57 00 	sts	0x0057, r17
    41ee:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    41f0:	40 ff       	sbrs	r20, 0
    41f2:	03 c0       	rjmp	.+6      	; 0x41fa <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    41f4:	82 95       	swap	r24
    41f6:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    41f8:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    41fa:	8f 70       	andi	r24, 0x0F	; 15
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    4200:	8a 30       	cpi	r24, 0x0A	; 10
    4202:	18 f0       	brcs	.+6      	; 0x420a <USB_Device_ProcessControlRequest+0x1ee>
    4204:	c9 01       	movw	r24, r18
    4206:	c7 96       	adiw	r24, 0x37	; 55
    4208:	02 c0       	rjmp	.+4      	; 0x420e <USB_Device_ProcessControlRequest+0x1f2>
    420a:	c9 01       	movw	r24, r18
    420c:	c0 96       	adiw	r24, 0x30	; 48
    420e:	8d 93       	st	X+, r24
    4210:	9d 93       	st	X+, r25
    4212:	4f 5f       	subi	r20, 0xFF	; 255
    4214:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    4216:	44 31       	cpi	r20, 0x14	; 20
    4218:	51 05       	cpc	r21, r1
    421a:	29 f7       	brne	.-54     	; 0x41e6 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    421c:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    421e:	80 91 e8 00 	lds	r24, 0x00E8
    4222:	87 7f       	andi	r24, 0xF7	; 247
    4224:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    4228:	ce 01       	movw	r24, r28
    422a:	03 96       	adiw	r24, 0x03	; 3
    422c:	6a e2       	ldi	r22, 0x2A	; 42
    422e:	70 e0       	ldi	r23, 0x00	; 0
    4230:	0e 94 cd 1c 	call	0x399a	; 0x399a <Endpoint_Write_Control_Stream_LE>
    4234:	14 c0       	rjmp	.+40     	; 0x425e <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    4236:	60 91 f8 01 	lds	r22, 0x01F8
    423a:	ae 01       	movw	r20, r28
    423c:	4f 5f       	subi	r20, 0xFF	; 255
    423e:	5f 4f       	sbci	r21, 0xFF	; 255
    4240:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <CALLBACK_USB_GetDescriptor>
    4244:	bc 01       	movw	r22, r24
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	09 f4       	brne	.+2      	; 0x424c <USB_Device_ProcessControlRequest+0x230>
    424a:	40 c0       	rjmp	.+128    	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
    424c:	80 91 e8 00 	lds	r24, 0x00E8
    4250:	87 7f       	andi	r24, 0xF7	; 247
    4252:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	9a 81       	ldd	r25, Y+2	; 0x02
    425a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    425e:	80 91 e8 00 	lds	r24, 0x00E8
    4262:	8b 77       	andi	r24, 0x7B	; 123
    4264:	80 93 e8 00 	sts	0x00E8, r24
    4268:	31 c0       	rjmp	.+98     	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    426a:	80 38       	cpi	r24, 0x80	; 128
    426c:	79 f5       	brne	.+94     	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    426e:	80 91 e8 00 	lds	r24, 0x00E8
    4272:	87 7f       	andi	r24, 0xF7	; 247
    4274:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    4278:	80 91 ef 01 	lds	r24, 0x01EF
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    427c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4280:	80 91 e8 00 	lds	r24, 0x00E8
    4284:	8e 77       	andi	r24, 0x7E	; 126
    4286:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    428a:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Endpoint_ClearStatusStage>
    428e:	1e c0       	rjmp	.+60     	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4290:	88 23       	and	r24, r24
    4292:	e1 f4       	brne	.+56     	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    4294:	90 91 f6 01 	lds	r25, 0x01F6
    4298:	92 30       	cpi	r25, 0x02	; 2
    429a:	c0 f4       	brcc	.+48     	; 0x42cc <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    429c:	80 91 e8 00 	lds	r24, 0x00E8
    42a0:	87 7f       	andi	r24, 0xF7	; 247
    42a2:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    42a6:	90 93 ef 01 	sts	0x01EF, r25

	Endpoint_ClearStatusStage();
    42aa:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    42ae:	80 91 ef 01 	lds	r24, 0x01EF
    42b2:	88 23       	and	r24, r24
    42b4:	31 f4       	brne	.+12     	; 0x42c2 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    42b6:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    42ba:	87 fd       	sbrc	r24, 7
    42bc:	02 c0       	rjmp	.+4      	; 0x42c2 <USB_Device_ProcessControlRequest+0x2a6>
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	01 c0       	rjmp	.+2      	; 0x42c4 <USB_Device_ProcessControlRequest+0x2a8>
    42c2:	84 e0       	ldi	r24, 0x04	; 4
    42c4:	80 93 f3 01 	sts	0x01F3, r24

	EVENT_USB_Device_ConfigurationChanged();
    42c8:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    42cc:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    42d0:	83 ff       	sbrs	r24, 3
    42d2:	0a c0       	rjmp	.+20     	; 0x42e8 <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    42d4:	80 91 e8 00 	lds	r24, 0x00E8
    42d8:	87 7f       	andi	r24, 0xF7	; 247
    42da:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    42de:	80 91 eb 00 	lds	r24, 0x00EB
    42e2:	80 62       	ori	r24, 0x20	; 32
    42e4:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    42e8:	ac 96       	adiw	r28, 0x2c	; 44
    42ea:	0f b6       	in	r0, 0x3f	; 63
    42ec:	f8 94       	cli
    42ee:	de bf       	out	0x3e, r29	; 62
    42f0:	0f be       	out	0x3f, r0	; 63
    42f2:	cd bf       	out	0x3d, r28	; 61
    42f4:	cf 91       	pop	r28
    42f6:	df 91       	pop	r29
    42f8:	1f 91       	pop	r17
    42fa:	08 95       	ret

000042fc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    42fc:	08 95       	ret

000042fe <__fixsfsi>:
    42fe:	04 d0       	rcall	.+8      	; 0x4308 <__fixunssfsi>
    4300:	68 94       	set
    4302:	b1 11       	cpse	r27, r1
    4304:	8d c0       	rjmp	.+282    	; 0x4420 <__fp_szero>
    4306:	08 95       	ret

00004308 <__fixunssfsi>:
    4308:	70 d0       	rcall	.+224    	; 0x43ea <__fp_splitA>
    430a:	88 f0       	brcs	.+34     	; 0x432e <__fixunssfsi+0x26>
    430c:	9f 57       	subi	r25, 0x7F	; 127
    430e:	90 f0       	brcs	.+36     	; 0x4334 <__fixunssfsi+0x2c>
    4310:	b9 2f       	mov	r27, r25
    4312:	99 27       	eor	r25, r25
    4314:	b7 51       	subi	r27, 0x17	; 23
    4316:	a0 f0       	brcs	.+40     	; 0x4340 <__fixunssfsi+0x38>
    4318:	d1 f0       	breq	.+52     	; 0x434e <__fixunssfsi+0x46>
    431a:	66 0f       	add	r22, r22
    431c:	77 1f       	adc	r23, r23
    431e:	88 1f       	adc	r24, r24
    4320:	99 1f       	adc	r25, r25
    4322:	1a f0       	brmi	.+6      	; 0x432a <__fixunssfsi+0x22>
    4324:	ba 95       	dec	r27
    4326:	c9 f7       	brne	.-14     	; 0x431a <__fixunssfsi+0x12>
    4328:	12 c0       	rjmp	.+36     	; 0x434e <__fixunssfsi+0x46>
    432a:	b1 30       	cpi	r27, 0x01	; 1
    432c:	81 f0       	breq	.+32     	; 0x434e <__fixunssfsi+0x46>
    432e:	77 d0       	rcall	.+238    	; 0x441e <__fp_zero>
    4330:	b1 e0       	ldi	r27, 0x01	; 1
    4332:	08 95       	ret
    4334:	74 c0       	rjmp	.+232    	; 0x441e <__fp_zero>
    4336:	67 2f       	mov	r22, r23
    4338:	78 2f       	mov	r23, r24
    433a:	88 27       	eor	r24, r24
    433c:	b8 5f       	subi	r27, 0xF8	; 248
    433e:	39 f0       	breq	.+14     	; 0x434e <__fixunssfsi+0x46>
    4340:	b9 3f       	cpi	r27, 0xF9	; 249
    4342:	cc f3       	brlt	.-14     	; 0x4336 <__fixunssfsi+0x2e>
    4344:	86 95       	lsr	r24
    4346:	77 95       	ror	r23
    4348:	67 95       	ror	r22
    434a:	b3 95       	inc	r27
    434c:	d9 f7       	brne	.-10     	; 0x4344 <__fixunssfsi+0x3c>
    434e:	3e f4       	brtc	.+14     	; 0x435e <__fixunssfsi+0x56>
    4350:	90 95       	com	r25
    4352:	80 95       	com	r24
    4354:	70 95       	com	r23
    4356:	61 95       	neg	r22
    4358:	7f 4f       	sbci	r23, 0xFF	; 255
    435a:	8f 4f       	sbci	r24, 0xFF	; 255
    435c:	9f 4f       	sbci	r25, 0xFF	; 255
    435e:	08 95       	ret

00004360 <__floatunsisf>:
    4360:	e8 94       	clt
    4362:	09 c0       	rjmp	.+18     	; 0x4376 <__floatsisf+0x12>

00004364 <__floatsisf>:
    4364:	97 fb       	bst	r25, 7
    4366:	3e f4       	brtc	.+14     	; 0x4376 <__floatsisf+0x12>
    4368:	90 95       	com	r25
    436a:	80 95       	com	r24
    436c:	70 95       	com	r23
    436e:	61 95       	neg	r22
    4370:	7f 4f       	sbci	r23, 0xFF	; 255
    4372:	8f 4f       	sbci	r24, 0xFF	; 255
    4374:	9f 4f       	sbci	r25, 0xFF	; 255
    4376:	99 23       	and	r25, r25
    4378:	a9 f0       	breq	.+42     	; 0x43a4 <__floatsisf+0x40>
    437a:	f9 2f       	mov	r31, r25
    437c:	96 e9       	ldi	r25, 0x96	; 150
    437e:	bb 27       	eor	r27, r27
    4380:	93 95       	inc	r25
    4382:	f6 95       	lsr	r31
    4384:	87 95       	ror	r24
    4386:	77 95       	ror	r23
    4388:	67 95       	ror	r22
    438a:	b7 95       	ror	r27
    438c:	f1 11       	cpse	r31, r1
    438e:	f8 cf       	rjmp	.-16     	; 0x4380 <__floatsisf+0x1c>
    4390:	fa f4       	brpl	.+62     	; 0x43d0 <__floatsisf+0x6c>
    4392:	bb 0f       	add	r27, r27
    4394:	11 f4       	brne	.+4      	; 0x439a <__floatsisf+0x36>
    4396:	60 ff       	sbrs	r22, 0
    4398:	1b c0       	rjmp	.+54     	; 0x43d0 <__floatsisf+0x6c>
    439a:	6f 5f       	subi	r22, 0xFF	; 255
    439c:	7f 4f       	sbci	r23, 0xFF	; 255
    439e:	8f 4f       	sbci	r24, 0xFF	; 255
    43a0:	9f 4f       	sbci	r25, 0xFF	; 255
    43a2:	16 c0       	rjmp	.+44     	; 0x43d0 <__floatsisf+0x6c>
    43a4:	88 23       	and	r24, r24
    43a6:	11 f0       	breq	.+4      	; 0x43ac <__floatsisf+0x48>
    43a8:	96 e9       	ldi	r25, 0x96	; 150
    43aa:	11 c0       	rjmp	.+34     	; 0x43ce <__floatsisf+0x6a>
    43ac:	77 23       	and	r23, r23
    43ae:	21 f0       	breq	.+8      	; 0x43b8 <__floatsisf+0x54>
    43b0:	9e e8       	ldi	r25, 0x8E	; 142
    43b2:	87 2f       	mov	r24, r23
    43b4:	76 2f       	mov	r23, r22
    43b6:	05 c0       	rjmp	.+10     	; 0x43c2 <__floatsisf+0x5e>
    43b8:	66 23       	and	r22, r22
    43ba:	71 f0       	breq	.+28     	; 0x43d8 <__floatsisf+0x74>
    43bc:	96 e8       	ldi	r25, 0x86	; 134
    43be:	86 2f       	mov	r24, r22
    43c0:	70 e0       	ldi	r23, 0x00	; 0
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	2a f0       	brmi	.+10     	; 0x43d0 <__floatsisf+0x6c>
    43c6:	9a 95       	dec	r25
    43c8:	66 0f       	add	r22, r22
    43ca:	77 1f       	adc	r23, r23
    43cc:	88 1f       	adc	r24, r24
    43ce:	da f7       	brpl	.-10     	; 0x43c6 <__floatsisf+0x62>
    43d0:	88 0f       	add	r24, r24
    43d2:	96 95       	lsr	r25
    43d4:	87 95       	ror	r24
    43d6:	97 f9       	bld	r25, 7
    43d8:	08 95       	ret

000043da <__fp_split3>:
    43da:	57 fd       	sbrc	r21, 7
    43dc:	90 58       	subi	r25, 0x80	; 128
    43de:	44 0f       	add	r20, r20
    43e0:	55 1f       	adc	r21, r21
    43e2:	59 f0       	breq	.+22     	; 0x43fa <__fp_splitA+0x10>
    43e4:	5f 3f       	cpi	r21, 0xFF	; 255
    43e6:	71 f0       	breq	.+28     	; 0x4404 <__fp_splitA+0x1a>
    43e8:	47 95       	ror	r20

000043ea <__fp_splitA>:
    43ea:	88 0f       	add	r24, r24
    43ec:	97 fb       	bst	r25, 7
    43ee:	99 1f       	adc	r25, r25
    43f0:	61 f0       	breq	.+24     	; 0x440a <__fp_splitA+0x20>
    43f2:	9f 3f       	cpi	r25, 0xFF	; 255
    43f4:	79 f0       	breq	.+30     	; 0x4414 <__fp_splitA+0x2a>
    43f6:	87 95       	ror	r24
    43f8:	08 95       	ret
    43fa:	12 16       	cp	r1, r18
    43fc:	13 06       	cpc	r1, r19
    43fe:	14 06       	cpc	r1, r20
    4400:	55 1f       	adc	r21, r21
    4402:	f2 cf       	rjmp	.-28     	; 0x43e8 <__fp_split3+0xe>
    4404:	46 95       	lsr	r20
    4406:	f1 df       	rcall	.-30     	; 0x43ea <__fp_splitA>
    4408:	08 c0       	rjmp	.+16     	; 0x441a <__fp_splitA+0x30>
    440a:	16 16       	cp	r1, r22
    440c:	17 06       	cpc	r1, r23
    440e:	18 06       	cpc	r1, r24
    4410:	99 1f       	adc	r25, r25
    4412:	f1 cf       	rjmp	.-30     	; 0x43f6 <__fp_splitA+0xc>
    4414:	86 95       	lsr	r24
    4416:	71 05       	cpc	r23, r1
    4418:	61 05       	cpc	r22, r1
    441a:	08 94       	sec
    441c:	08 95       	ret

0000441e <__fp_zero>:
    441e:	e8 94       	clt

00004420 <__fp_szero>:
    4420:	bb 27       	eor	r27, r27
    4422:	66 27       	eor	r22, r22
    4424:	77 27       	eor	r23, r23
    4426:	cb 01       	movw	r24, r22
    4428:	97 f9       	bld	r25, 7
    442a:	08 95       	ret

0000442c <__mulsf3>:
    442c:	0b d0       	rcall	.+22     	; 0x4444 <__mulsf3x>
    442e:	78 c0       	rjmp	.+240    	; 0x4520 <__fp_round>
    4430:	69 d0       	rcall	.+210    	; 0x4504 <__fp_pscA>
    4432:	28 f0       	brcs	.+10     	; 0x443e <__mulsf3+0x12>
    4434:	6e d0       	rcall	.+220    	; 0x4512 <__fp_pscB>
    4436:	18 f0       	brcs	.+6      	; 0x443e <__mulsf3+0x12>
    4438:	95 23       	and	r25, r21
    443a:	09 f0       	breq	.+2      	; 0x443e <__mulsf3+0x12>
    443c:	5a c0       	rjmp	.+180    	; 0x44f2 <__fp_inf>
    443e:	5f c0       	rjmp	.+190    	; 0x44fe <__fp_nan>
    4440:	11 24       	eor	r1, r1
    4442:	ee cf       	rjmp	.-36     	; 0x4420 <__fp_szero>

00004444 <__mulsf3x>:
    4444:	ca df       	rcall	.-108    	; 0x43da <__fp_split3>
    4446:	a0 f3       	brcs	.-24     	; 0x4430 <__mulsf3+0x4>

00004448 <__mulsf3_pse>:
    4448:	95 9f       	mul	r25, r21
    444a:	d1 f3       	breq	.-12     	; 0x4440 <__mulsf3+0x14>
    444c:	95 0f       	add	r25, r21
    444e:	50 e0       	ldi	r21, 0x00	; 0
    4450:	55 1f       	adc	r21, r21
    4452:	62 9f       	mul	r22, r18
    4454:	f0 01       	movw	r30, r0
    4456:	72 9f       	mul	r23, r18
    4458:	bb 27       	eor	r27, r27
    445a:	f0 0d       	add	r31, r0
    445c:	b1 1d       	adc	r27, r1
    445e:	63 9f       	mul	r22, r19
    4460:	aa 27       	eor	r26, r26
    4462:	f0 0d       	add	r31, r0
    4464:	b1 1d       	adc	r27, r1
    4466:	aa 1f       	adc	r26, r26
    4468:	64 9f       	mul	r22, r20
    446a:	66 27       	eor	r22, r22
    446c:	b0 0d       	add	r27, r0
    446e:	a1 1d       	adc	r26, r1
    4470:	66 1f       	adc	r22, r22
    4472:	82 9f       	mul	r24, r18
    4474:	22 27       	eor	r18, r18
    4476:	b0 0d       	add	r27, r0
    4478:	a1 1d       	adc	r26, r1
    447a:	62 1f       	adc	r22, r18
    447c:	73 9f       	mul	r23, r19
    447e:	b0 0d       	add	r27, r0
    4480:	a1 1d       	adc	r26, r1
    4482:	62 1f       	adc	r22, r18
    4484:	83 9f       	mul	r24, r19
    4486:	a0 0d       	add	r26, r0
    4488:	61 1d       	adc	r22, r1
    448a:	22 1f       	adc	r18, r18
    448c:	74 9f       	mul	r23, r20
    448e:	33 27       	eor	r19, r19
    4490:	a0 0d       	add	r26, r0
    4492:	61 1d       	adc	r22, r1
    4494:	23 1f       	adc	r18, r19
    4496:	84 9f       	mul	r24, r20
    4498:	60 0d       	add	r22, r0
    449a:	21 1d       	adc	r18, r1
    449c:	82 2f       	mov	r24, r18
    449e:	76 2f       	mov	r23, r22
    44a0:	6a 2f       	mov	r22, r26
    44a2:	11 24       	eor	r1, r1
    44a4:	9f 57       	subi	r25, 0x7F	; 127
    44a6:	50 40       	sbci	r21, 0x00	; 0
    44a8:	8a f0       	brmi	.+34     	; 0x44cc <__mulsf3_pse+0x84>
    44aa:	e1 f0       	breq	.+56     	; 0x44e4 <__mulsf3_pse+0x9c>
    44ac:	88 23       	and	r24, r24
    44ae:	4a f0       	brmi	.+18     	; 0x44c2 <__mulsf3_pse+0x7a>
    44b0:	ee 0f       	add	r30, r30
    44b2:	ff 1f       	adc	r31, r31
    44b4:	bb 1f       	adc	r27, r27
    44b6:	66 1f       	adc	r22, r22
    44b8:	77 1f       	adc	r23, r23
    44ba:	88 1f       	adc	r24, r24
    44bc:	91 50       	subi	r25, 0x01	; 1
    44be:	50 40       	sbci	r21, 0x00	; 0
    44c0:	a9 f7       	brne	.-22     	; 0x44ac <__mulsf3_pse+0x64>
    44c2:	9e 3f       	cpi	r25, 0xFE	; 254
    44c4:	51 05       	cpc	r21, r1
    44c6:	70 f0       	brcs	.+28     	; 0x44e4 <__mulsf3_pse+0x9c>
    44c8:	14 c0       	rjmp	.+40     	; 0x44f2 <__fp_inf>
    44ca:	aa cf       	rjmp	.-172    	; 0x4420 <__fp_szero>
    44cc:	5f 3f       	cpi	r21, 0xFF	; 255
    44ce:	ec f3       	brlt	.-6      	; 0x44ca <__mulsf3_pse+0x82>
    44d0:	98 3e       	cpi	r25, 0xE8	; 232
    44d2:	dc f3       	brlt	.-10     	; 0x44ca <__mulsf3_pse+0x82>
    44d4:	86 95       	lsr	r24
    44d6:	77 95       	ror	r23
    44d8:	67 95       	ror	r22
    44da:	b7 95       	ror	r27
    44dc:	f7 95       	ror	r31
    44de:	e7 95       	ror	r30
    44e0:	9f 5f       	subi	r25, 0xFF	; 255
    44e2:	c1 f7       	brne	.-16     	; 0x44d4 <__mulsf3_pse+0x8c>
    44e4:	fe 2b       	or	r31, r30
    44e6:	88 0f       	add	r24, r24
    44e8:	91 1d       	adc	r25, r1
    44ea:	96 95       	lsr	r25
    44ec:	87 95       	ror	r24
    44ee:	97 f9       	bld	r25, 7
    44f0:	08 95       	ret

000044f2 <__fp_inf>:
    44f2:	97 f9       	bld	r25, 7
    44f4:	9f 67       	ori	r25, 0x7F	; 127
    44f6:	80 e8       	ldi	r24, 0x80	; 128
    44f8:	70 e0       	ldi	r23, 0x00	; 0
    44fa:	60 e0       	ldi	r22, 0x00	; 0
    44fc:	08 95       	ret

000044fe <__fp_nan>:
    44fe:	9f ef       	ldi	r25, 0xFF	; 255
    4500:	80 ec       	ldi	r24, 0xC0	; 192
    4502:	08 95       	ret

00004504 <__fp_pscA>:
    4504:	00 24       	eor	r0, r0
    4506:	0a 94       	dec	r0
    4508:	16 16       	cp	r1, r22
    450a:	17 06       	cpc	r1, r23
    450c:	18 06       	cpc	r1, r24
    450e:	09 06       	cpc	r0, r25
    4510:	08 95       	ret

00004512 <__fp_pscB>:
    4512:	00 24       	eor	r0, r0
    4514:	0a 94       	dec	r0
    4516:	12 16       	cp	r1, r18
    4518:	13 06       	cpc	r1, r19
    451a:	14 06       	cpc	r1, r20
    451c:	05 06       	cpc	r0, r21
    451e:	08 95       	ret

00004520 <__fp_round>:
    4520:	09 2e       	mov	r0, r25
    4522:	03 94       	inc	r0
    4524:	00 0c       	add	r0, r0
    4526:	11 f4       	brne	.+4      	; 0x452c <__fp_round+0xc>
    4528:	88 23       	and	r24, r24
    452a:	52 f0       	brmi	.+20     	; 0x4540 <__fp_round+0x20>
    452c:	bb 0f       	add	r27, r27
    452e:	40 f4       	brcc	.+16     	; 0x4540 <__fp_round+0x20>
    4530:	bf 2b       	or	r27, r31
    4532:	11 f4       	brne	.+4      	; 0x4538 <__fp_round+0x18>
    4534:	60 ff       	sbrs	r22, 0
    4536:	04 c0       	rjmp	.+8      	; 0x4540 <__fp_round+0x20>
    4538:	6f 5f       	subi	r22, 0xFF	; 255
    453a:	7f 4f       	sbci	r23, 0xFF	; 255
    453c:	8f 4f       	sbci	r24, 0xFF	; 255
    453e:	9f 4f       	sbci	r25, 0xFF	; 255
    4540:	08 95       	ret

00004542 <__udivmodhi4>:
    4542:	aa 1b       	sub	r26, r26
    4544:	bb 1b       	sub	r27, r27
    4546:	51 e1       	ldi	r21, 0x11	; 17
    4548:	07 c0       	rjmp	.+14     	; 0x4558 <__udivmodhi4_ep>

0000454a <__udivmodhi4_loop>:
    454a:	aa 1f       	adc	r26, r26
    454c:	bb 1f       	adc	r27, r27
    454e:	a6 17       	cp	r26, r22
    4550:	b7 07       	cpc	r27, r23
    4552:	10 f0       	brcs	.+4      	; 0x4558 <__udivmodhi4_ep>
    4554:	a6 1b       	sub	r26, r22
    4556:	b7 0b       	sbc	r27, r23

00004558 <__udivmodhi4_ep>:
    4558:	88 1f       	adc	r24, r24
    455a:	99 1f       	adc	r25, r25
    455c:	5a 95       	dec	r21
    455e:	a9 f7       	brne	.-22     	; 0x454a <__udivmodhi4_loop>
    4560:	80 95       	com	r24
    4562:	90 95       	com	r25
    4564:	bc 01       	movw	r22, r24
    4566:	cd 01       	movw	r24, r26
    4568:	08 95       	ret

0000456a <__divmodhi4>:
    456a:	97 fb       	bst	r25, 7
    456c:	09 2e       	mov	r0, r25
    456e:	07 26       	eor	r0, r23
    4570:	0a d0       	rcall	.+20     	; 0x4586 <__divmodhi4_neg1>
    4572:	77 fd       	sbrc	r23, 7
    4574:	04 d0       	rcall	.+8      	; 0x457e <__divmodhi4_neg2>
    4576:	e5 df       	rcall	.-54     	; 0x4542 <__udivmodhi4>
    4578:	06 d0       	rcall	.+12     	; 0x4586 <__divmodhi4_neg1>
    457a:	00 20       	and	r0, r0
    457c:	1a f4       	brpl	.+6      	; 0x4584 <__divmodhi4_exit>

0000457e <__divmodhi4_neg2>:
    457e:	70 95       	com	r23
    4580:	61 95       	neg	r22
    4582:	7f 4f       	sbci	r23, 0xFF	; 255

00004584 <__divmodhi4_exit>:
    4584:	08 95       	ret

00004586 <__divmodhi4_neg1>:
    4586:	f6 f7       	brtc	.-4      	; 0x4584 <__divmodhi4_exit>
    4588:	90 95       	com	r25
    458a:	81 95       	neg	r24
    458c:	9f 4f       	sbci	r25, 0xFF	; 255
    458e:	08 95       	ret

00004590 <__eerd_byte_m32u4>:
    4590:	f9 99       	sbic	0x1f, 1	; 31
    4592:	fe cf       	rjmp	.-4      	; 0x4590 <__eerd_byte_m32u4>
    4594:	92 bd       	out	0x22, r25	; 34
    4596:	81 bd       	out	0x21, r24	; 33
    4598:	f8 9a       	sbi	0x1f, 0	; 31
    459a:	99 27       	eor	r25, r25
    459c:	80 b5       	in	r24, 0x20	; 32
    459e:	08 95       	ret

000045a0 <__eerd_dword_m32u4>:
    45a0:	a6 e1       	ldi	r26, 0x16	; 22
    45a2:	b0 e0       	ldi	r27, 0x00	; 0
    45a4:	44 e0       	ldi	r20, 0x04	; 4
    45a6:	50 e0       	ldi	r21, 0x00	; 0
    45a8:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__eerd_blraw_m32u4>

000045ac <__eerd_word_m32u4>:
    45ac:	a8 e1       	ldi	r26, 0x18	; 24
    45ae:	b0 e0       	ldi	r27, 0x00	; 0
    45b0:	42 e0       	ldi	r20, 0x02	; 2
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__eerd_blraw_m32u4>

000045b8 <__eewr_byte_m32u4>:
    45b8:	26 2f       	mov	r18, r22

000045ba <__eewr_r18_m32u4>:
    45ba:	f9 99       	sbic	0x1f, 1	; 31
    45bc:	fe cf       	rjmp	.-4      	; 0x45ba <__eewr_r18_m32u4>
    45be:	1f ba       	out	0x1f, r1	; 31
    45c0:	92 bd       	out	0x22, r25	; 34
    45c2:	81 bd       	out	0x21, r24	; 33
    45c4:	20 bd       	out	0x20, r18	; 32
    45c6:	0f b6       	in	r0, 0x3f	; 63
    45c8:	f8 94       	cli
    45ca:	fa 9a       	sbi	0x1f, 2	; 31
    45cc:	f9 9a       	sbi	0x1f, 1	; 31
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	01 96       	adiw	r24, 0x01	; 1
    45d2:	08 95       	ret

000045d4 <__eewr_dword_m32u4>:
    45d4:	24 2f       	mov	r18, r20
    45d6:	0e 94 dd 22 	call	0x45ba	; 0x45ba <__eewr_r18_m32u4>
    45da:	25 2f       	mov	r18, r21
    45dc:	0e 94 dd 22 	call	0x45ba	; 0x45ba <__eewr_r18_m32u4>
    45e0:	0c 94 f2 22 	jmp	0x45e4	; 0x45e4 <__eewr_word_m32u4>

000045e4 <__eewr_word_m32u4>:
    45e4:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__eewr_byte_m32u4>
    45e8:	27 2f       	mov	r18, r23
    45ea:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__eewr_r18_m32u4>

000045ee <__eerd_block_m32u4>:
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22

000045f2 <__eerd_blraw_m32u4>:
    45f2:	fc 01       	movw	r30, r24
    45f4:	f9 99       	sbic	0x1f, 1	; 31
    45f6:	fe cf       	rjmp	.-4      	; 0x45f4 <__eerd_blraw_m32u4+0x2>
    45f8:	06 c0       	rjmp	.+12     	; 0x4606 <__eerd_blraw_m32u4+0x14>
    45fa:	f2 bd       	out	0x22, r31	; 34
    45fc:	e1 bd       	out	0x21, r30	; 33
    45fe:	f8 9a       	sbi	0x1f, 0	; 31
    4600:	31 96       	adiw	r30, 0x01	; 1
    4602:	00 b4       	in	r0, 0x20	; 32
    4604:	0d 92       	st	X+, r0
    4606:	41 50       	subi	r20, 0x01	; 1
    4608:	50 40       	sbci	r21, 0x00	; 0
    460a:	b8 f7       	brcc	.-18     	; 0x45fa <__eerd_blraw_m32u4+0x8>
    460c:	08 95       	ret

0000460e <_exit>:
    460e:	f8 94       	cli

00004610 <__stop_program>:
    4610:	ff cf       	rjmp	.-2      	; 0x4610 <__stop_program>
