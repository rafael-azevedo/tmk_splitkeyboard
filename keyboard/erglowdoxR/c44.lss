
c44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00004618  000046ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  00800116  00800116  000046c2  2**0
                  ALLOC
  3 .noinit       00000004  00800229  00800229  000046c2  2**0
                  ALLOC
  4 .stab         00000024  00000000  00000000  000046c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000007e  00000000  00000000  000046e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000b38  00000000  00000000  00004766  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001a90  00000000  00000000  0000529e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000d177  00000000  00000000  00006d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003769  00000000  00000000  00013ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000092e1  00000000  00000000  0001760e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000011d0  00000000  00000000  000208f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000043a3  00000000  00000000  00021ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004b3c  00000000  00000000  00025e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d08  00000000  00000000  0002a99f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
       0:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__ctors_end>
  // TWEN  - twi enable
  // TWEA  - enable address acknowledgement
  // TWINT - twi interrupt flag
  // TWIE  - enable the twi interrupt
  TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
}
       4:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_1>
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
  _delay_us(80);
}

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
       8:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
	rgblight_config.hue = 200;
	rgblight_config.sat = 204;
	rgblight_config.val = 204;
	eeconfig_write_rgblight(rgblight_config.raw);
}
void eeconfig_debug_rgblight(void) {
       c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
      10:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>

__attribute__ ((weak)) void matrix_setup(void) {}
void keyboard_setup(void)
{
    matrix_setup();
}
      14:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}

void debug_action(action_t action)
{
      18:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
      1c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
    }
}


/* modifier */
uint8_t get_mods(void) { return real_mods; }
      20:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
      24:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
      28:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__vector_10>
 */
#define BOOTLOADER_RESET_KEY 0xB007B007
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
      2c:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__vector_11>
bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
      30:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__vector_12>
    Endpoint_SelectEndpoint(ep);
    return -1;
}
#else
int8_t sendchar(uint8_t c)
{
      34:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
      38:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
      3c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      40:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      44:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      48:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      4c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      50:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      54:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_21>
      58:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      5c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      60:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      64:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      68:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      6c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      70:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      74:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      78:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      7c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      80:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_32>
      84:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      88:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      8c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      90:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_36>
      94:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      98:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      9c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      a0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      a4:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>
      a8:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__bad_interrupt>

000000ac <keymaps>:
      ac:	50 00 01 00 00 00 01 00 00 00 2c 00 22 00 17 00     P.........,."...
      bc:	0a 00 05 00 00 00 2a 00 21 00 15 00 09 00 19 00     ......*.!.......
      cc:	4f 00 4d 00 20 00 08 00 07 00 06 00 50 00 4a 00     O.M. .......P.J.
      dc:	1f 00 1a 00 16 00 1b 00 01 00 e3 00 1e 00 14 00     ................
      ec:	04 00 01 00 34 00 01 00 2e 00 4c 00 2a 00 e1 00     ....4.....L.*...
      fc:	01 00 00 00 4f 00 01 00 00 00 01 00 00 00 c9 00     ....O...........
     10c:	23 00 1c 00 0b 00 11 00 00 00 01 00 24 00 18 00     #...........$...
     11c:	0d 00 10 00 52 00 4b 00 25 00 0c 00 0e 00 36 00     ....R.K.%.....6.
     12c:	51 00 28 00 26 00 12 00 0f 00 37 00 2f 00 2b 00     Q.(.&.....7./.+.
     13c:	27 00 13 00 01 00 01 00 30 00 4e 00 2d 00 31 00     '.......0.N.-.1.
     14c:	01 00 e5 00 c1 00 00 00 01 00 01 00 00 00 01 00     ................
     15c:	00 00 c5 00 3e 00 31 02 35 00 35 02 00 00 c6 00     ....>.1.5.5.....
     16c:	3d 00 30 02 27 02 30 00 01 00 01 00 3c 00 2f 02     =.0.'.0.....<./.
     17c:	26 02 2f 00 01 00 c3 00 3b 00 1f 02 01 00 01 00     &./.....;.......
     18c:	01 00 c2 00 3a 00 01 00 20 02 22 02 01 00 c1 00     ....:... .".....
     19c:	01 00 01 00 01 00 01 00 01 00 00 00 01 00 01 00     ................
     1ac:	00 00 01 00 00 00 01 00 3f 00 52 00 51 00 01 00     ........?.R.Q...
     1bc:	00 00 01 00 40 00 24 00 21 00 1e 00 01 00 01 00     ....@.$.!.......
     1cc:	41 00 25 00 22 00 1f 00 37 00 01 00 42 00 26 00     A.%."...7...B.&.
     1dc:	23 00 20 00 27 00 c8 00 43 00 25 02 2e 02 31 00     #. .'...C.%...1.
     1ec:	2e 00 c7 00 44 00 45 00 01 00 01 00 01 00 00 00     ....D.E.........

000001fc <fn_actions>:
     1fc:	00 00 00 f0 01 f0 02 f0 03 f0 04 f0 05 f0 06 f0     ................
     20c:	07 f0 f1 a1                                         ....

00000210 <DIM_CURVE>:
     210:	00 01 01 02 02 02 02 02 02 03 03 03 03 03 03 03     ................
     220:	03 03 03 03 03 03 03 04 04 04 04 04 04 04 04 04     ................
     230:	04 04 04 05 05 05 05 05 05 05 05 05 05 06 06 06     ................
     240:	06 06 06 06 06 07 07 07 07 07 07 07 08 08 08 08     ................
     250:	08 08 09 09 09 09 09 09 0a 0a 0a 0a 0a 0b 0b 0b     ................
     260:	0b 0b 0c 0c 0c 0c 0c 0d 0d 0d 0d 0e 0e 0e 0e 0f     ................
     270:	0f 0f 10 10 10 10 11 11 11 12 12 12 13 13 13 14     ................
     280:	14 14 15 15 16 16 16 17 17 18 18 19 19 19 1a 1a     ................
     290:	1b 1b 1c 1c 1d 1d 1e 1e 1f 20 20 21 21 22 23 23     .........  !!"##
     2a0:	24 24 25 26 26 27 28 28 29 2a 2b 2b 2c 2d 2e 2f     $$%&&'(()*++,-./
     2b0:	30 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e     00123456789:;<=>
     2c0:	3f 40 41 42 44 45 46 47 49 4a 4b 4c 4e 4f 51 52     ?@ABDEFGIJKLNOQR
     2d0:	53 55 56 58 5a 5b 5d 5e 60 62 63 65 67 69 6b 6d     SUVXZ[]^`bcegikm
     2e0:	6e 70 72 74 76 79 7b 7d 7f 81 84 86 88 8b 8d 90     nprtvy{}........
     2f0:	92 95 97 9a 9d 9f a2 a5 a8 ab ae b1 b4 b7 ba be     ................
     300:	c1 c4 c8 cb cf d3 d6 da de e2 e6 ea ee f2 f8 ff     ................

00000310 <RGBLED_BREATHING_TABLE>:
     310:	00 00 00 00 01 01 01 02 02 03 04 05 05 06 07 09     ................
     320:	0a 0b 0c 0e 0f 11 12 14 15 17 19 1b 1d 1f 21 23     ..............!#
     330:	25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c     %(*,/1469;>ACFIL
     340:	4f 52 55 58 5a 5d 61 64 67 6a 6d 70 73 76 79 7c     ORUXZ]adgjmpsvy|
     350:	7f 83 86 89 8c 8f 92 95 98 9b 9e a2 a5 a7 aa ad     ................
     360:	b0 b3 b6 b9 bc be c1 c4 c6 c9 cb ce d0 d3 d5 d7     ................
     370:	da dc de e0 e2 e4 e6 e8 ea eb ed ee f0 f1 f3 f4     ................
     380:	f5 f6 f8 f9 fa fa fb fc fd fd fe fe fe ff ff ff     ................
     390:	ff ff ff ff fe fe fe fd fd fc fb fa fa f9 f8 f6     ................
     3a0:	f5 f4 f3 f1 f0 ee ed eb ea e8 e6 e4 e2 e0 de dc     ................
     3b0:	da d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3     ................
     3c0:	b0 ad aa a7 a5 a2 9e 9b 98 95 92 8f 8c 89 86 83     ................
     3d0:	80 7c 79 76 73 70 6d 6a 67 64 61 5d 5a 58 55 52     .|yvspmjgda]ZXUR
     3e0:	4f 4c 49 46 43 41 3e 3b 39 36 34 31 2f 2c 2a 28     OLIFCA>;9641/,*(
     3f0:	25 23 21 1f 1d 1b 19 17 15 14 12 11 0f 0e 0c 0b     %#!.............
     400:	0a 09 07 06 05 05 04 03 02 02 01 01 01 00 00 00     ................

00000410 <RGBLED_BREATHING_INTERVALS>:
     410:	1e 14 0a 05                                         ....

00000414 <RGBLED_RAINBOW_MOOD_INTERVALS>:
     414:	78 3c 1e                                            x<.

00000417 <RGBLED_RAINBOW_SWIRL_INTERVALS>:
     417:	64 32 14                                            d2.

0000041a <RGBLED_SNAKE_INTERVALS>:
     41a:	64 32 14                                            d2.

0000041d <RGBLED_KNIGHT_INTERVALS>:
     41d:	64 32 14                                            d2.

00000420 <KeyboardReport>:
     420:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     430:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     440:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     450:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000045f <MouseReport>:
     45f:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     46f:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     47f:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     48f:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     49f:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000004ac <ExtrakeyReport>:
     4ac:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     4bc:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     4cc:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     4dc:	10 95 01 81 00 c0                                   ......

000004e2 <DeviceDescriptor>:
     4e2:	12 01 10 01 00 00 00 08 ed fe 44 44 01 00 01 02     ..........DD....
     4f2:	00 01                                               ..

000004f4 <ConfigurationDescriptor>:
     4f4:	09 02 54 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..T.....2.......
     504:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     514:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     524:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     534:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     544:	03 08 00 0a                                         ....

00000548 <LanguageString>:
     548:	04 03 09 04                                         ....

0000054c <ManufacturerString>:
     54c:	08 03 4d 00 61 00 78 00 00 00                       ..M.a.x...

00000556 <ProductString>:
     556:	14 03 45 00 72 00 67 00 6c 00 6f 00 77 00 64 00     ..E.r.g.l.o.w.d.
     566:	6f 00 78 00 00 00                                   o.x...

0000056c <__ctors_end>:
     56c:	11 24       	eor	r1, r1
     56e:	1f be       	out	0x3f, r1	; 63
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	da e0       	ldi	r29, 0x0A	; 10
     574:	de bf       	out	0x3e, r29	; 62
     576:	cd bf       	out	0x3d, r28	; 61

00000578 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     578:	04 b6       	in	r0, 0x34	; 52
     57a:	03 fe       	sbrs	r0, 3
     57c:	24 c0       	rjmp	.+72     	; 0x5c6 <__do_copy_data>
     57e:	80 91 29 02 	lds	r24, 0x0229
     582:	90 91 2a 02 	lds	r25, 0x022A
     586:	a0 91 2b 02 	lds	r26, 0x022B
     58a:	b0 91 2c 02 	lds	r27, 0x022C
     58e:	87 50       	subi	r24, 0x07	; 7
     590:	90 4b       	sbci	r25, 0xB0	; 176
     592:	a7 40       	sbci	r26, 0x07	; 7
     594:	b0 4b       	sbci	r27, 0xB0	; 176
     596:	b9 f4       	brne	.+46     	; 0x5c6 <__do_copy_data>
        reset_key = 0;
     598:	10 92 29 02 	sts	0x0229, r1
     59c:	10 92 2a 02 	sts	0x022A, r1
     5a0:	10 92 2b 02 	sts	0x022B, r1
     5a4:	10 92 2c 02 	sts	0x022C, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     5a8:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     5aa:	84 b7       	in	r24, 0x34	; 52
     5ac:	87 7f       	andi	r24, 0xF7	; 247
     5ae:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     5b0:	88 e1       	ldi	r24, 0x18	; 24
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	80 93 60 00 	sts	0x0060, r24
     5ba:	10 92 60 00 	sts	0x0060, r1
     5be:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     5c0:	e0 e0       	ldi	r30, 0x00	; 0
     5c2:	ff e3       	ldi	r31, 0x3F	; 63
     5c4:	09 95       	icall

000005c6 <__do_copy_data>:
     5c6:	11 e0       	ldi	r17, 0x01	; 1
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	b1 e0       	ldi	r27, 0x01	; 1
     5cc:	e8 e1       	ldi	r30, 0x18	; 24
     5ce:	f6 e4       	ldi	r31, 0x46	; 70
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <.do_copy_data_start>

000005d2 <.do_copy_data_loop>:
     5d2:	05 90       	lpm	r0, Z+
     5d4:	0d 92       	st	X+, r0

000005d6 <.do_copy_data_start>:
     5d6:	a6 31       	cpi	r26, 0x16	; 22
     5d8:	b1 07       	cpc	r27, r17
     5da:	d9 f7       	brne	.-10     	; 0x5d2 <.do_copy_data_loop>

000005dc <__do_clear_bss>:
     5dc:	12 e0       	ldi	r17, 0x02	; 2
     5de:	a6 e1       	ldi	r26, 0x16	; 22
     5e0:	b1 e0       	ldi	r27, 0x01	; 1
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <.do_clear_bss_start>

000005e4 <.do_clear_bss_loop>:
     5e4:	1d 92       	st	X+, r1

000005e6 <.do_clear_bss_start>:
     5e6:	a9 32       	cpi	r26, 0x29	; 41
     5e8:	b1 07       	cpc	r27, r17
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <.do_clear_bss_loop>
     5ec:	0e 94 d4 06 	call	0xda8	; 0xda8 <main>
     5f0:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <_exit>

000005f4 <__bad_interrupt>:
     5f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005f8 <action_function>:
        break;
      }
    return MACRO_NONE;
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt) {
     5f8:	fc 01       	movw	r30, r24
  switch (id) {
     5fa:	63 30       	cpi	r22, 0x03	; 3
     5fc:	d9 f0       	breq	.+54     	; 0x634 <action_function+0x3c>
     5fe:	64 30       	cpi	r22, 0x04	; 4
     600:	30 f4       	brcc	.+12     	; 0x60e <action_function+0x16>
     602:	61 30       	cpi	r22, 0x01	; 1
     604:	a9 f1       	breq	.+106    	; 0x670 <action_function+0x78>
     606:	82 81       	ldd	r24, Z+2	; 0x02
     608:	62 30       	cpi	r22, 0x02	; 2
     60a:	78 f4       	brcc	.+30     	; 0x62a <action_function+0x32>
     60c:	09 c0       	rjmp	.+18     	; 0x620 <action_function+0x28>
     60e:	65 30       	cpi	r22, 0x05	; 5
     610:	e9 f0       	breq	.+58     	; 0x64c <action_function+0x54>
     612:	65 30       	cpi	r22, 0x05	; 5
     614:	a8 f0       	brcs	.+42     	; 0x640 <action_function+0x48>
     616:	66 30       	cpi	r22, 0x06	; 6
     618:	f9 f0       	breq	.+62     	; 0x658 <action_function+0x60>
     61a:	67 30       	cpi	r22, 0x07	; 7
     61c:	71 f5       	brne	.+92     	; 0x67a <action_function+0x82>
     61e:	22 c0       	rjmp	.+68     	; 0x664 <action_function+0x6c>
    case RGBLED_TOGGLE:
      //led operations
      if (record->event.pressed) {
     620:	88 23       	and	r24, r24
     622:	59 f1       	breq	.+86     	; 0x67a <action_function+0x82>
        rgblight_toggle();
     624:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <rgblight_toggle>
     628:	08 95       	ret
      }

      break;
    case RGBLED_INCREASE_HUE:
      if (record->event.pressed) {
     62a:	88 23       	and	r24, r24
     62c:	31 f1       	breq	.+76     	; 0x67a <action_function+0x82>
        rgblight_increase_hue();
     62e:	0e 94 02 0c 	call	0x1804	; 0x1804 <rgblight_increase_hue>
     632:	08 95       	ret
      }
      break;
    case RGBLED_DECREASE_HUE:
      if (record->event.pressed) {
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	88 23       	and	r24, r24
     638:	01 f1       	breq	.+64     	; 0x67a <action_function+0x82>
        rgblight_decrease_hue();
     63a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <rgblight_decrease_hue>
     63e:	08 95       	ret
      }
      break;
    case RGBLED_INCREASE_SAT:
      if (record->event.pressed) {
     640:	82 81       	ldd	r24, Z+2	; 0x02
     642:	88 23       	and	r24, r24
     644:	d1 f0       	breq	.+52     	; 0x67a <action_function+0x82>
        rgblight_increase_sat();
     646:	0e 94 c6 0b 	call	0x178c	; 0x178c <rgblight_increase_sat>
     64a:	08 95       	ret
      }
      break;
    case RGBLED_DECREASE_SAT:
      if (record->event.pressed) {
     64c:	82 81       	ldd	r24, Z+2	; 0x02
     64e:	88 23       	and	r24, r24
     650:	a1 f0       	breq	.+40     	; 0x67a <action_function+0x82>
        rgblight_decrease_sat();
     652:	0e 94 ab 0b 	call	0x1756	; 0x1756 <rgblight_decrease_sat>
     656:	08 95       	ret
      }
      break;
      case RGBLED_INCREASE_VAL:
        if (record->event.pressed) {
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	88 23       	and	r24, r24
     65c:	71 f0       	breq	.+28     	; 0x67a <action_function+0x82>
          rgblight_increase_val();
     65e:	0e 94 8f 0b 	call	0x171e	; 0x171e <rgblight_increase_val>
     662:	08 95       	ret
        }
        break;
      case RGBLED_DECREASE_VAL:
        if (record->event.pressed) {
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	88 23       	and	r24, r24
     668:	41 f0       	breq	.+16     	; 0x67a <action_function+0x82>
          rgblight_decrease_val();
     66a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <rgblight_decrease_val>
     66e:	08 95       	ret
        }
        break;
      case RGBLED_STEP_MODE:
        if (record->event.pressed) {
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	88 23       	and	r24, r24
     674:	11 f0       	breq	.+4      	; 0x67a <action_function+0x82>
          rgblight_step();
     676:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <rgblight_step>
     67a:	08 95       	ret

0000067c <action_get_macro>:
  [8]  = ACTION_FUNCTION(RGBLED_DECREASE_VAL),
  [9] ACTION_LAYER_MOMENTARY(1),
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
     67c:	fc 01       	movw	r30, r24
  // MACRODOWN only works in this function
      switch(id) {
     67e:	66 23       	and	r22, r22
     680:	51 f4       	brne	.+20     	; 0x696 <action_get_macro+0x1a>
        case 0:
          if (record->event.pressed) {
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	88 23       	and	r24, r24
     686:	21 f0       	breq	.+8      	; 0x690 <action_get_macro+0x14>
            register_code(KC_RSFT);
     688:	85 ee       	ldi	r24, 0xE5	; 229
     68a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <register_code>
     68e:	03 c0       	rjmp	.+6      	; 0x696 <action_get_macro+0x1a>
            #ifdef BACKLIGHT_ENABLE
              backlight_step();
            #endif
          } else {
            unregister_code(KC_RSFT);
     690:	85 ee       	ldi	r24, 0xE5	; 229
     692:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <unregister_code>
          }
        break;
      }
    return MACRO_NONE;
};
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	08 95       	ret

0000069c <keymap_key_to_keycode>:

/* translates key to keycode */
uint16_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
	// Read entire word (16bits)
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
     69c:	e6 2f       	mov	r30, r22
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	9c e0       	ldi	r25, 0x0C	; 12
     6a6:	79 9f       	mul	r23, r25
     6a8:	90 01       	movw	r18, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	e2 0f       	add	r30, r18
     6ae:	f3 1f       	adc	r31, r19
     6b0:	98 ea       	ldi	r25, 0xA8	; 168
     6b2:	89 9f       	mul	r24, r25
     6b4:	c0 01       	movw	r24, r0
     6b6:	11 24       	eor	r1, r1
     6b8:	e8 0f       	add	r30, r24
     6ba:	f9 1f       	adc	r31, r25
     6bc:	e4 55       	subi	r30, 0x54	; 84
     6be:	ff 4f       	sbci	r31, 0xFF	; 255
     6c0:	25 91       	lpm	r18, Z+
     6c2:	34 91       	lpm	r19, Z+
}
     6c4:	c9 01       	movw	r24, r18
     6c6:	08 95       	ret

000006c8 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint16_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     6c8:	fc 01       	movw	r30, r24
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	e4 58       	subi	r30, 0x84	; 132
     6d0:	ff 4f       	sbci	r31, 0xFF	; 255
     6d2:	25 91       	lpm	r18, Z+
     6d4:	34 91       	lpm	r19, Z+
}
     6d6:	c9 01       	movw	r24, r18
     6d8:	08 95       	ret

000006da <keymap_func_to_action>:

action_t keymap_func_to_action(uint16_t keycode)
{
	// For FUNC without 8bit limit
    return (action_t){ .code = pgm_read_word(&fn_actions[(int)keycode]) };
     6da:	fc 01       	movw	r30, r24
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	e4 50       	subi	r30, 0x04	; 4
     6e2:	fe 4f       	sbci	r31, 0xFE	; 254
     6e4:	25 91       	lpm	r18, Z+
     6e6:	34 91       	lpm	r19, Z+
}
     6e8:	c9 01       	movw	r24, r18
     6ea:	08 95       	ret

000006ec <action_for_key>:

/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
	// 16bit keycodes - important
    uint16_t keycode = keymap_key_to_keycode(layer, key);
     6ec:	0e 94 4e 03 	call	0x69c	; 0x69c <keymap_key_to_keycode>
     6f0:	9c 01       	movw	r18, r24

    if (keycode >= 0x0100 && keycode < 0x2000) {
     6f2:	80 50       	subi	r24, 0x00	; 0
     6f4:	91 40       	sbci	r25, 0x01	; 1
     6f6:	80 50       	subi	r24, 0x00	; 0
     6f8:	9f 41       	sbci	r25, 0x1F	; 31
     6fa:	18 f4       	brcc	.+6      	; 0x702 <action_for_key+0x16>
    	// Has a modifier
    	action_t action;
    	// Split it up
    	action.code = ACTION_MODS_KEY(keycode >> 8, keycode & 0xFF);
     6fc:	c9 01       	movw	r24, r18
     6fe:	9f 71       	andi	r25, 0x1F	; 31
     700:	d6 c0       	rjmp	.+428    	; 0x8ae <action_for_key+0x1c2>
    	return action;
    } else if (keycode >= 0x2000 && keycode < 0x3000) {
     702:	c9 01       	movw	r24, r18
     704:	80 50       	subi	r24, 0x00	; 0
     706:	90 42       	sbci	r25, 0x20	; 32
     708:	80 50       	subi	r24, 0x00	; 0
     70a:	90 41       	sbci	r25, 0x10	; 16
     70c:	28 f4       	brcc	.+10     	; 0x718 <action_for_key+0x2c>
        // Is a shortcut for function layer, pull last 12bits
        return keymap_func_to_action(keycode & 0xFFF);
     70e:	c9 01       	movw	r24, r18
     710:	9f 70       	andi	r25, 0x0F	; 15
     712:	0e 94 6d 03 	call	0x6da	; 0x6da <keymap_func_to_action>
     716:	cb c0       	rjmp	.+406    	; 0x8ae <action_for_key+0x1c2>
    } else if (keycode >= 0x3000 && keycode < 0x4000) {
     718:	c9 01       	movw	r24, r18
     71a:	80 50       	subi	r24, 0x00	; 0
     71c:	90 43       	sbci	r25, 0x30	; 48
     71e:	80 50       	subi	r24, 0x00	; 0
     720:	90 41       	sbci	r25, 0x10	; 16
     722:	20 f4       	brcc	.+8      	; 0x72c <action_for_key+0x40>
        action_t action;
        action.code = ACTION_MACRO(keycode & 0xFF);
     724:	c9 01       	movw	r24, r18
     726:	90 70       	andi	r25, 0x00	; 0
     728:	90 6c       	ori	r25, 0xC0	; 192
     72a:	c1 c0       	rjmp	.+386    	; 0x8ae <action_for_key+0x1c2>
    /*     return; */
    /* } else if (keycode == DEBUG) { */
    /*     print("\nDEBUG: enabled.\n"); */
    /*     debug_enable = true; */
    /*     return; */
    } else if (keycode >= 0x6000 && keycode < 0x7000) {
     72c:	c9 01       	movw	r24, r18
     72e:	80 50       	subi	r24, 0x00	; 0
     730:	90 46       	sbci	r25, 0x60	; 96
     732:	80 50       	subi	r24, 0x00	; 0
     734:	90 41       	sbci	r25, 0x10	; 16
     736:	10 f0       	brcs	.+4      	; 0x73c <action_for_key+0x50>
        action_t action;
        action.code =  ACTION_FUNCTION_OPT(keycode & 0xFF, (keycode & 0x0F00) >> 8);
        return action;
    } else if (keycode >= 0x8000) {
     738:	37 ff       	sbrs	r19, 7
     73a:	03 c0       	rjmp	.+6      	; 0x742 <action_for_key+0x56>
        action_t action;
        uint16_t unicode = keycode & ~(0x8000);
        action.code =  ACTION_FUNCTION_OPT(unicode & 0xFF, (unicode & 0xFF00) >> 8);
     73c:	c9 01       	movw	r24, r18
     73e:	90 6f       	ori	r25, 0xF0	; 240
     740:	b6 c0       	rjmp	.+364    	; 0x8ae <action_for_key+0x1c2>
        return action;
    }

    switch (keycode) {
     742:	c9 01       	movw	r24, r18
     744:	80 5c       	subi	r24, 0xC0	; 192
     746:	90 40       	sbci	r25, 0x00	; 0
     748:	80 97       	sbiw	r24, 0x20	; 32
     74a:	20 f4       	brcc	.+8      	; 0x754 <action_for_key+0x68>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
     74c:	c9 01       	movw	r24, r18
     74e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <keymap_fn_to_action>
     752:	ad c0       	rjmp	.+346    	; 0x8ae <action_for_key+0x1c2>

/* translates keycode to action */
static action_t keycode_to_action(uint16_t keycode)
{
    action_t action;
    switch (keycode) {
     754:	2b 3b       	cpi	r18, 0xBB	; 187
     756:	31 05       	cpc	r19, r1
     758:	70 f4       	brcc	.+28     	; 0x776 <action_for_key+0x8a>
     75a:	28 3a       	cpi	r18, 0xA8	; 168
     75c:	31 05       	cpc	r19, r1
     75e:	50 f5       	brcc	.+84     	; 0x7b4 <action_for_key+0xc8>
     760:	25 3a       	cpi	r18, 0xA5	; 165
     762:	31 05       	cpc	r19, r1
     764:	c0 f4       	brcc	.+48     	; 0x796 <action_for_key+0xaa>
     766:	24 30       	cpi	r18, 0x04	; 4
     768:	31 05       	cpc	r19, r1
     76a:	98 f4       	brcc	.+38     	; 0x792 <action_for_key+0xa6>
     76c:	21 30       	cpi	r18, 0x01	; 1
     76e:	31 05       	cpc	r19, r1
     770:	09 f0       	breq	.+2      	; 0x774 <action_for_key+0x88>
     772:	9b c0       	rjmp	.+310    	; 0x8aa <action_for_key+0x1be>
     774:	97 c0       	rjmp	.+302    	; 0x8a4 <action_for_key+0x1b8>
     776:	20 3e       	cpi	r18, 0xE0	; 224
     778:	31 05       	cpc	r19, r1
     77a:	08 f4       	brcc	.+2      	; 0x77e <action_for_key+0x92>
     77c:	96 c0       	rjmp	.+300    	; 0x8aa <action_for_key+0x1be>
     77e:	28 3e       	cpi	r18, 0xE8	; 232
     780:	31 05       	cpc	r19, r1
     782:	38 f0       	brcs	.+14     	; 0x792 <action_for_key+0xa6>
     784:	c9 01       	movw	r24, r18
     786:	80 5f       	subi	r24, 0xF0	; 240
     788:	90 40       	sbci	r25, 0x00	; 0
     78a:	40 97       	sbiw	r24, 0x10	; 16
     78c:	08 f0       	brcs	.+2      	; 0x790 <action_for_key+0xa4>
     78e:	8d c0       	rjmp	.+282    	; 0x8aa <action_for_key+0x1be>
     790:	86 c0       	rjmp	.+268    	; 0x89e <action_for_key+0x1b2>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
     792:	c9 01       	movw	r24, r18
     794:	8c c0       	rjmp	.+280    	; 0x8ae <action_for_key+0x1c2>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
     796:	25 3a       	cpi	r18, 0xA5	; 165
     798:	31 05       	cpc	r19, r1
     79a:	19 f4       	brne	.+6      	; 0x7a2 <action_for_key+0xb6>
     79c:	81 e8       	ldi	r24, 0x81	; 129
     79e:	90 e4       	ldi	r25, 0x40	; 64
     7a0:	86 c0       	rjmp	.+268    	; 0x8ae <action_for_key+0x1c2>
     7a2:	26 3a       	cpi	r18, 0xA6	; 166
     7a4:	31 05       	cpc	r19, r1
     7a6:	19 f0       	breq	.+6      	; 0x7ae <action_for_key+0xc2>
     7a8:	83 e8       	ldi	r24, 0x83	; 131
     7aa:	90 e4       	ldi	r25, 0x40	; 64
     7ac:	80 c0       	rjmp	.+256    	; 0x8ae <action_for_key+0x1c2>
     7ae:	82 e8       	ldi	r24, 0x82	; 130
     7b0:	90 e4       	ldi	r25, 0x40	; 64
     7b2:	7d c0       	rjmp	.+250    	; 0x8ae <action_for_key+0x1c2>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
     7b4:	28 3a       	cpi	r18, 0xA8	; 168
     7b6:	31 05       	cpc	r19, r1
     7b8:	19 f4       	brne	.+6      	; 0x7c0 <action_for_key+0xd4>
     7ba:	82 ee       	ldi	r24, 0xE2	; 226
     7bc:	94 e4       	ldi	r25, 0x44	; 68
     7be:	77 c0       	rjmp	.+238    	; 0x8ae <action_for_key+0x1c2>
     7c0:	29 3a       	cpi	r18, 0xA9	; 169
     7c2:	31 05       	cpc	r19, r1
     7c4:	19 f4       	brne	.+6      	; 0x7cc <action_for_key+0xe0>
     7c6:	89 ee       	ldi	r24, 0xE9	; 233
     7c8:	94 e4       	ldi	r25, 0x44	; 68
     7ca:	71 c0       	rjmp	.+226    	; 0x8ae <action_for_key+0x1c2>
     7cc:	2a 3a       	cpi	r18, 0xAA	; 170
     7ce:	31 05       	cpc	r19, r1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <action_for_key+0xec>
     7d2:	8a ee       	ldi	r24, 0xEA	; 234
     7d4:	94 e4       	ldi	r25, 0x44	; 68
     7d6:	6b c0       	rjmp	.+214    	; 0x8ae <action_for_key+0x1c2>
     7d8:	2b 3a       	cpi	r18, 0xAB	; 171
     7da:	31 05       	cpc	r19, r1
     7dc:	19 f4       	brne	.+6      	; 0x7e4 <action_for_key+0xf8>
     7de:	85 eb       	ldi	r24, 0xB5	; 181
     7e0:	94 e4       	ldi	r25, 0x44	; 68
     7e2:	65 c0       	rjmp	.+202    	; 0x8ae <action_for_key+0x1c2>
     7e4:	2c 3a       	cpi	r18, 0xAC	; 172
     7e6:	31 05       	cpc	r19, r1
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <action_for_key+0x104>
     7ea:	86 eb       	ldi	r24, 0xB6	; 182
     7ec:	94 e4       	ldi	r25, 0x44	; 68
     7ee:	5f c0       	rjmp	.+190    	; 0x8ae <action_for_key+0x1c2>
     7f0:	2d 3a       	cpi	r18, 0xAD	; 173
     7f2:	31 05       	cpc	r19, r1
     7f4:	19 f4       	brne	.+6      	; 0x7fc <action_for_key+0x110>
     7f6:	87 eb       	ldi	r24, 0xB7	; 183
     7f8:	94 e4       	ldi	r25, 0x44	; 68
     7fa:	59 c0       	rjmp	.+178    	; 0x8ae <action_for_key+0x1c2>
     7fc:	20 3b       	cpi	r18, 0xB0	; 176
     7fe:	31 05       	cpc	r19, r1
     800:	19 f4       	brne	.+6      	; 0x808 <action_for_key+0x11c>
     802:	8c ec       	ldi	r24, 0xCC	; 204
     804:	94 e4       	ldi	r25, 0x44	; 68
     806:	53 c0       	rjmp	.+166    	; 0x8ae <action_for_key+0x1c2>
     808:	2e 3a       	cpi	r18, 0xAE	; 174
     80a:	31 05       	cpc	r19, r1
     80c:	19 f4       	brne	.+6      	; 0x814 <action_for_key+0x128>
     80e:	8d ec       	ldi	r24, 0xCD	; 205
     810:	94 e4       	ldi	r25, 0x44	; 68
     812:	4d c0       	rjmp	.+154    	; 0x8ae <action_for_key+0x1c2>
     814:	2f 3a       	cpi	r18, 0xAF	; 175
     816:	31 05       	cpc	r19, r1
     818:	19 f4       	brne	.+6      	; 0x820 <action_for_key+0x134>
     81a:	83 e8       	ldi	r24, 0x83	; 131
     81c:	95 e4       	ldi	r25, 0x45	; 69
     81e:	47 c0       	rjmp	.+142    	; 0x8ae <action_for_key+0x1c2>
     820:	21 3b       	cpi	r18, 0xB1	; 177
     822:	31 05       	cpc	r19, r1
     824:	19 f4       	brne	.+6      	; 0x82c <action_for_key+0x140>
     826:	8a e8       	ldi	r24, 0x8A	; 138
     828:	95 e4       	ldi	r25, 0x45	; 69
     82a:	41 c0       	rjmp	.+130    	; 0x8ae <action_for_key+0x1c2>
     82c:	22 3b       	cpi	r18, 0xB2	; 178
     82e:	31 05       	cpc	r19, r1
     830:	19 f4       	brne	.+6      	; 0x838 <action_for_key+0x14c>
     832:	82 e9       	ldi	r24, 0x92	; 146
     834:	95 e4       	ldi	r25, 0x45	; 69
     836:	3b c0       	rjmp	.+118    	; 0x8ae <action_for_key+0x1c2>
     838:	23 3b       	cpi	r18, 0xB3	; 179
     83a:	31 05       	cpc	r19, r1
     83c:	19 f4       	brne	.+6      	; 0x844 <action_for_key+0x158>
     83e:	84 e9       	ldi	r24, 0x94	; 148
     840:	95 e4       	ldi	r25, 0x45	; 69
     842:	35 c0       	rjmp	.+106    	; 0x8ae <action_for_key+0x1c2>
     844:	24 3b       	cpi	r18, 0xB4	; 180
     846:	31 05       	cpc	r19, r1
     848:	19 f4       	brne	.+6      	; 0x850 <action_for_key+0x164>
     84a:	81 e2       	ldi	r24, 0x21	; 33
     84c:	96 e4       	ldi	r25, 0x46	; 70
     84e:	2f c0       	rjmp	.+94     	; 0x8ae <action_for_key+0x1c2>
     850:	25 3b       	cpi	r18, 0xB5	; 181
     852:	31 05       	cpc	r19, r1
     854:	19 f4       	brne	.+6      	; 0x85c <action_for_key+0x170>
     856:	83 e2       	ldi	r24, 0x23	; 35
     858:	96 e4       	ldi	r25, 0x46	; 70
     85a:	29 c0       	rjmp	.+82     	; 0x8ae <action_for_key+0x1c2>
     85c:	26 3b       	cpi	r18, 0xB6	; 182
     85e:	31 05       	cpc	r19, r1
     860:	19 f4       	brne	.+6      	; 0x868 <action_for_key+0x17c>
     862:	84 e2       	ldi	r24, 0x24	; 36
     864:	96 e4       	ldi	r25, 0x46	; 70
     866:	23 c0       	rjmp	.+70     	; 0x8ae <action_for_key+0x1c2>
     868:	27 3b       	cpi	r18, 0xB7	; 183
     86a:	31 05       	cpc	r19, r1
     86c:	19 f4       	brne	.+6      	; 0x874 <action_for_key+0x188>
     86e:	85 e2       	ldi	r24, 0x25	; 37
     870:	96 e4       	ldi	r25, 0x46	; 70
     872:	1d c0       	rjmp	.+58     	; 0x8ae <action_for_key+0x1c2>
     874:	28 3b       	cpi	r18, 0xB8	; 184
     876:	31 05       	cpc	r19, r1
     878:	19 f4       	brne	.+6      	; 0x880 <action_for_key+0x194>
     87a:	86 e2       	ldi	r24, 0x26	; 38
     87c:	96 e4       	ldi	r25, 0x46	; 70
     87e:	17 c0       	rjmp	.+46     	; 0x8ae <action_for_key+0x1c2>
     880:	29 3b       	cpi	r18, 0xB9	; 185
     882:	31 05       	cpc	r19, r1
     884:	19 f4       	brne	.+6      	; 0x88c <action_for_key+0x1a0>
     886:	87 e2       	ldi	r24, 0x27	; 39
     888:	96 e4       	ldi	r25, 0x46	; 70
     88a:	11 c0       	rjmp	.+34     	; 0x8ae <action_for_key+0x1c2>
     88c:	2a 3b       	cpi	r18, 0xBA	; 186
     88e:	31 05       	cpc	r19, r1
     890:	19 f0       	breq	.+6      	; 0x898 <action_for_key+0x1ac>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	94 e4       	ldi	r25, 0x44	; 68
     896:	0b c0       	rjmp	.+22     	; 0x8ae <action_for_key+0x1c2>
     898:	8a e2       	ldi	r24, 0x2A	; 42
     89a:	96 e4       	ldi	r25, 0x46	; 70
     89c:	08 c0       	rjmp	.+16     	; 0x8ae <action_for_key+0x1c2>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
     89e:	c9 01       	movw	r24, r18
     8a0:	90 65       	ori	r25, 0x50	; 80
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <action_for_key+0x1c2>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <action_for_key+0x1c2>
            break;
        default:
            action.code = ACTION_NO;
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
     8ae:	08 95       	ret

000008b0 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
     8b0:	e6 e1       	ldi	r30, 0x16	; 22
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	e8 0f       	add	r30, r24
     8b6:	f1 1d       	adc	r31, r1
    return matrix[row];
}
     8b8:	80 81       	ld	r24, Z
     8ba:	08 95       	ret

000008bc <matrix_print>:
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
     8bc:	08 95       	ret

000008be <unselect_rows>:
 * pin: B0  B1  B2  B3  D2  D3  C6
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~0b00000111;
     8be:	84 b1       	in	r24, 0x04	; 4
     8c0:	88 7f       	andi	r24, 0xF8	; 248
     8c2:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~0b00000111;
     8c4:	85 b1       	in	r24, 0x05	; 5
     8c6:	88 7f       	andi	r24, 0xF8	; 248
     8c8:	85 b9       	out	0x05, r24	; 5

    DDRD  &= ~0b00001100;
     8ca:	8a b1       	in	r24, 0x0a	; 10
     8cc:	83 7f       	andi	r24, 0xF3	; 243
     8ce:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00001100;
     8d0:	8b b1       	in	r24, 0x0b	; 11
     8d2:	83 7f       	andi	r24, 0xF3	; 243
     8d4:	8b b9       	out	0x0b, r24	; 11

    DDRC  &= ~0b01000000;
     8d6:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~0b01000000;
     8d8:	46 98       	cbi	0x08, 6	; 8



    
}
     8da:	08 95       	ret

000008dc <_matrix_scan>:
    }

}

uint8_t _matrix_scan(void)
{
     8dc:	9f 92       	push	r9
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
     8f2:	80 91 01 01 	lds	r24, 0x0101
     8f6:	88 23       	and	r24, r24
     8f8:	21 f4       	brne	.+8      	; 0x902 <_matrix_scan+0x26>
     8fa:	37 e0       	ldi	r19, 0x07	; 7
     8fc:	e3 2e       	mov	r14, r19
     8fe:	f1 2c       	mov	r15, r1
     900:	02 c0       	rjmp	.+4      	; 0x906 <_matrix_scan+0x2a>
     902:	ee 24       	eor	r14, r14
     904:	ff 24       	eor	r15, r15
     906:	00 91 00 01 	lds	r16, 0x0100
     90a:	24 e2       	ldi	r18, 0x24	; 36
     90c:	c2 2e       	mov	r12, r18
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	d2 2e       	mov	r13, r18
     912:	ce 0c       	add	r12, r14
     914:	df 1c       	adc	r13, r15
     916:	e6 01       	movw	r28, r12
     918:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     91a:	90 ea       	ldi	r25, 0xA0	; 160
     91c:	99 2e       	mov	r9, r25
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
}

static matrix_row_t read_cols(void)
{
    return  (PINF&(1<<0) ? 0 : (1<<0)) |
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	a8 2e       	mov	r10, r24
     922:	b1 2c       	mov	r11, r1
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     924:	13 30       	cpi	r17, 0x03	; 3
     926:	b9 f0       	breq	.+46     	; 0x956 <_matrix_scan+0x7a>
     928:	14 30       	cpi	r17, 0x04	; 4
     92a:	28 f4       	brcc	.+10     	; 0x936 <_matrix_scan+0x5a>
     92c:	11 30       	cpi	r17, 0x01	; 1
     92e:	69 f0       	breq	.+26     	; 0x94a <_matrix_scan+0x6e>
     930:	12 30       	cpi	r17, 0x02	; 2
     932:	70 f4       	brcc	.+28     	; 0x950 <_matrix_scan+0x74>
     934:	07 c0       	rjmp	.+14     	; 0x944 <_matrix_scan+0x68>
     936:	15 30       	cpi	r17, 0x05	; 5
     938:	a1 f0       	breq	.+40     	; 0x962 <_matrix_scan+0x86>
     93a:	15 30       	cpi	r17, 0x05	; 5
     93c:	78 f0       	brcs	.+30     	; 0x95c <_matrix_scan+0x80>
     93e:	16 30       	cpi	r17, 0x06	; 6
     940:	a9 f4       	brne	.+42     	; 0x96c <_matrix_scan+0x90>
     942:	12 c0       	rjmp	.+36     	; 0x968 <_matrix_scan+0x8c>
            case 0:
                DDRB  |= (1<<0);
     944:	20 9a       	sbi	0x04, 0	; 4
                PORTB &= ~(1<<0);
     946:	28 98       	cbi	0x05, 0	; 5
     948:	11 c0       	rjmp	.+34     	; 0x96c <_matrix_scan+0x90>
                break;
            case 1:
                DDRB  |= (1<<1);
     94a:	21 9a       	sbi	0x04, 1	; 4
                PORTB &= ~(1<<1);
     94c:	29 98       	cbi	0x05, 1	; 5
     94e:	0e c0       	rjmp	.+28     	; 0x96c <_matrix_scan+0x90>
                break;
            case 2:
                DDRB  |= (1<<2);
     950:	22 9a       	sbi	0x04, 2	; 4
                PORTB &= ~(1<<2);
     952:	2a 98       	cbi	0x05, 2	; 5
     954:	0b c0       	rjmp	.+22     	; 0x96c <_matrix_scan+0x90>
                break;
            case 3:
                DDRB  |= (1<<3);
     956:	23 9a       	sbi	0x04, 3	; 4
                PORTB &= ~(1<<3);
     958:	2b 98       	cbi	0x05, 3	; 5
     95a:	08 c0       	rjmp	.+16     	; 0x96c <_matrix_scan+0x90>
                break;
            case 4:
                DDRD  |= (1<<2);
     95c:	52 9a       	sbi	0x0a, 2	; 10
                PORTD &= ~(1<<2);
     95e:	5a 98       	cbi	0x0b, 2	; 11
     960:	05 c0       	rjmp	.+10     	; 0x96c <_matrix_scan+0x90>
                break;
            case 5:
                DDRD  |= (1<<3);
     962:	53 9a       	sbi	0x0a, 3	; 10
                PORTD &= ~(1<<3);
     964:	5b 98       	cbi	0x0b, 3	; 11
     966:	02 c0       	rjmp	.+4      	; 0x96c <_matrix_scan+0x90>
                break;
            case 6:
                DDRC  |= (1<<6);
     968:	3e 9a       	sbi	0x07, 6	; 7
                PORTC &= ~(1<<6);
     96a:	46 98       	cbi	0x08, 6	; 8
     96c:	89 2d       	mov	r24, r9
     96e:	8a 95       	dec	r24
     970:	f1 f7       	brne	.-4      	; 0x96e <_matrix_scan+0x92>
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
}

static matrix_row_t read_cols(void)
{
    return  (PINF&(1<<0) ? 0 : (1<<0)) |
     972:	9f b1       	in	r25, 0x0f	; 15
     974:	79 99       	sbic	0x0f, 1	; 15
     976:	02 c0       	rjmp	.+4      	; 0x97c <_matrix_scan+0xa0>
     978:	52 e0       	ldi	r21, 0x02	; 2
     97a:	01 c0       	rjmp	.+2      	; 0x97e <_matrix_scan+0xa2>
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	7c 99       	sbic	0x0f, 4	; 15
     980:	02 c0       	rjmp	.+4      	; 0x986 <_matrix_scan+0xaa>
     982:	44 e0       	ldi	r20, 0x04	; 4
     984:	01 c0       	rjmp	.+2      	; 0x988 <_matrix_scan+0xac>
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	7d 99       	sbic	0x0f, 5	; 15
     98a:	02 c0       	rjmp	.+4      	; 0x990 <_matrix_scan+0xb4>
     98c:	38 e0       	ldi	r19, 0x08	; 8
     98e:	01 c0       	rjmp	.+2      	; 0x992 <_matrix_scan+0xb6>
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	7e 99       	sbic	0x0f, 6	; 15
     994:	02 c0       	rjmp	.+4      	; 0x99a <_matrix_scan+0xbe>
     996:	20 e1       	ldi	r18, 0x10	; 16
     998:	01 c0       	rjmp	.+2      	; 0x99c <_matrix_scan+0xc0>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	8f b1       	in	r24, 0x0f	; 15
     99e:	80 95       	com	r24
     9a0:	88 1f       	adc	r24, r24
     9a2:	88 27       	eor	r24, r24
     9a4:	88 1f       	adc	r24, r24
     9a6:	82 95       	swap	r24
     9a8:	88 0f       	add	r24, r24
     9aa:	80 7e       	andi	r24, 0xE0	; 224
     9ac:	9a 25       	eor	r25, r10
     9ae:	91 70       	andi	r25, 0x01	; 1
     9b0:	95 2b       	or	r25, r21
     9b2:	94 2b       	or	r25, r20
     9b4:	93 2b       	or	r25, r19
     9b6:	92 2b       	or	r25, r18
     9b8:	98 2b       	or	r25, r24

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i+offset] != cols) {
     9ba:	88 81       	ld	r24, Y
     9bc:	89 17       	cp	r24, r25
     9be:	11 f0       	breq	.+4      	; 0x9c4 <_matrix_scan+0xe8>
            matrix_debouncing[i+offset] = cols;
     9c0:	98 83       	st	Y, r25
     9c2:	05 e0       	ldi	r16, 0x05	; 5
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
        }
        unselect_rows();
     9c4:	0e 94 5f 04 	call	0x8be	; 0x8be <unselect_rows>
uint8_t _matrix_scan(void)
{
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
     9c8:	1f 5f       	subi	r17, 0xFF	; 255
     9ca:	21 96       	adiw	r28, 0x01	; 1
     9cc:	17 30       	cpi	r17, 0x07	; 7
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <_matrix_scan+0xf6>
     9d0:	a9 cf       	rjmp	.-174    	; 0x924 <_matrix_scan+0x48>
     9d2:	00 93 00 01 	sts	0x0100, r16
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     9d6:	00 23       	and	r16, r16
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <_matrix_scan+0x12a>
        if (--debouncing) {
     9da:	80 2f       	mov	r24, r16
     9dc:	81 50       	subi	r24, 0x01	; 1
     9de:	80 93 00 01 	sts	0x0100, r24
     9e2:	88 23       	and	r24, r24
     9e4:	29 f0       	breq	.+10     	; 0x9f0 <_matrix_scan+0x114>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9e6:	80 ea       	ldi	r24, 0xA0	; 160
     9e8:	9f e0       	ldi	r25, 0x0F	; 15
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <_matrix_scan+0x10e>
     9ee:	0b c0       	rjmp	.+22     	; 0xa06 <_matrix_scan+0x12a>
     9f0:	f7 01       	movw	r30, r14
     9f2:	ea 5e       	subi	r30, 0xEA	; 234
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
                matrix[i+offset] = matrix_debouncing[i+offset];
     9f8:	d6 01       	movw	r26, r12
     9fa:	8d 91       	ld	r24, X+
     9fc:	6d 01       	movw	r12, r26
     9fe:	81 93       	st	Z+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
     a00:	9f 5f       	subi	r25, 0xFF	; 255
     a02:	97 30       	cpi	r25, 0x07	; 7
     a04:	c9 f7       	brne	.-14     	; 0x9f8 <_matrix_scan+0x11c>
            }
        }
    }

    return 1;
}
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	9f 90       	pop	r9
     a1e:	08 95       	ret

00000a20 <matrix_slave_scan>:

    return ret;
}

void matrix_slave_scan(void) {
    int ret = _matrix_scan();
     a20:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_matrix_scan>

    int offset = (isLeftHand) ? 0 : (MATRIX_ROWS / 2);
     a24:	80 91 01 01 	lds	r24, 0x0101
     a28:	88 23       	and	r24, r24
     a2a:	19 f4       	brne	.+6      	; 0xa32 <matrix_slave_scan+0x12>
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <matrix_slave_scan+0x16>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	dc 01       	movw	r26, r24
     a38:	aa 5e       	subi	r26, 0xEA	; 234
     a3a:	be 4f       	sbci	r27, 0xFE	; 254
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        serial_slave_buffer[i] = matrix[offset+i];
     a40:	8d 91       	ld	r24, X+
     a42:	f9 01       	movw	r30, r18
     a44:	ec 5c       	subi	r30, 0xCC	; 204
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	80 83       	st	Z, r24
void matrix_slave_scan(void) {
    int ret = _matrix_scan();

    int offset = (isLeftHand) ? 0 : (MATRIX_ROWS / 2);

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
     a4a:	2f 5f       	subi	r18, 0xFF	; 255
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
     a4e:	27 30       	cpi	r18, 0x07	; 7
     a50:	31 05       	cpc	r19, r1
     a52:	b1 f7       	brne	.-20     	; 0xa40 <matrix_slave_scan+0x20>
        serial_slave_buffer[i] = matrix[offset+i];
    }
}
     a54:	08 95       	ret

00000a56 <matrix_scan>:
    return 1;
}


uint8_t matrix_scan(void)
{
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
    int ret = _matrix_scan();
     a5c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_matrix_scan>
     a60:	18 2f       	mov	r17, r24


    int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
     a62:	80 91 01 01 	lds	r24, 0x0101
     a66:	88 23       	and	r24, r24
     a68:	19 f4       	brne	.+6      	; 0xa70 <matrix_scan+0x1a>
     a6a:	c0 e0       	ldi	r28, 0x00	; 0
     a6c:	d0 e0       	ldi	r29, 0x00	; 0
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <matrix_scan+0x1e>
     a70:	c7 e0       	ldi	r28, 0x07	; 7
     a72:	d0 e0       	ldi	r29, 0x00	; 0
        for (int i = 0; i < ROWS_PER_HAND; ++i) {
            matrix[slaveOffset+i] = 0;
        }
    }
#else
    if( serial_transaction() ) {
     a74:	0e 94 73 06 	call	0xce6	; 0xce6 <serial_transaction>
     a78:	9e 01       	movw	r18, r28
     a7a:	2a 5e       	subi	r18, 0xEA	; 234
     a7c:	3e 4f       	sbci	r19, 0xFE	; 254
     a7e:	89 2b       	or	r24, r25
     a80:	51 f0       	breq	.+20     	; 0xa96 <matrix_scan+0x40>
        // turn on the indicator led
        PORTD &= ~(1<<5);
     a82:	5d 98       	cbi	0x0b, 5	; 11
     a84:	f9 01       	movw	r30, r18
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
        // if we cannot communicate with the other half, then unset all of its keys
        for (int i = 0; i < ROWS_PER_HAND; ++i) {
            matrix[slaveOffset+i] = 0;
     a8a:	11 92       	st	Z+, r1
#else
    if( serial_transaction() ) {
        // turn on the indicator led
        PORTD &= ~(1<<5);
        // if we cannot communicate with the other half, then unset all of its keys
        for (int i = 0; i < ROWS_PER_HAND; ++i) {
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	87 30       	cpi	r24, 0x07	; 7
     a90:	91 05       	cpc	r25, r1
     a92:	d9 f7       	brne	.-10     	; 0xa8a <matrix_scan+0x34>
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <matrix_scan+0x5c>
            matrix[slaveOffset+i] = 0;
        }
    } else {
        // turn off the indicator led on no error
        PORTD |= (1<<5);
     a96:	5d 9a       	sbi	0x0b, 5	; 11
     a98:	d9 01       	movw	r26, r18
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
        // no error

        for (int i = 0; i < ROWS_PER_HAND; ++i) {
            matrix[slaveOffset+i] = serial_slave_buffer[i];
     a9e:	f9 01       	movw	r30, r18
     aa0:	ec 5c       	subi	r30, 0xCC	; 204
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	80 81       	ld	r24, Z
     aa6:	8d 93       	st	X+, r24
    } else {
        // turn off the indicator led on no error
        PORTD |= (1<<5);
        // no error

        for (int i = 0; i < ROWS_PER_HAND; ++i) {
     aa8:	2f 5f       	subi	r18, 0xFF	; 255
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	27 30       	cpi	r18, 0x07	; 7
     aae:	31 05       	cpc	r19, r1
     ab0:	b1 f7       	brne	.-20     	; 0xa9e <matrix_scan+0x48>
        }
    }
#endif

    return ret;
}
     ab2:	81 2f       	mov	r24, r17
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	08 95       	ret

00000abc <matrix_init>:
    return MATRIX_COLS;
}

void matrix_init(void)
{
    debug_enable = true;
     abc:	80 91 af 01 	lds	r24, 0x01AF
    debug_matrix = true;
    debug_mouse = true;
     ac0:	8b 60       	ori	r24, 0x0B	; 11
     ac2:	80 93 af 01 	sts	0x01AF, r24
    // initialize row and col
    unselect_rows();
     ac6:	0e 94 5f 04 	call	0x8be	; 0x8be <unselect_rows>
 * pin: F0  F1  F4  F5  F6  F7
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
     DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
     aca:	80 b3       	in	r24, 0x10	; 16
     acc:	8c 70       	andi	r24, 0x0C	; 12
     ace:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
     ad0:	81 b3       	in	r24, 0x11	; 17
     ad2:	83 6f       	ori	r24, 0xF3	; 243
     ad4:	81 bb       	out	0x11, r24	; 17
    init_cols();

#ifdef USE_I2C
    i2c_master_init();
#else
    serial_master_init();
     ad6:	0e 94 e7 05 	call	0xbce	; 0xbce <serial_master_init>
    /*     PORTD &= ~(1<<5); */
    /* } else { */

    // use the pro micro TX led as an indicator
    // pull D5 low to turn on
    DDRD  |= 1<<5;
     ada:	55 9a       	sbi	0x0a, 5	; 10
    PORTD |= (1<<5);
     adc:	5d 9a       	sbi	0x0b, 5	; 11
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
    /* } */

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     ae2:	fc 01       	movw	r30, r24
     ae4:	ea 5e       	subi	r30, 0xEA	; 234
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	10 82       	st	Z, r1
        matrix_debouncing[i] = 0;
     aea:	fc 01       	movw	r30, r24
     aec:	ec 5d       	subi	r30, 0xDC	; 220
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	10 82       	st	Z, r1
     af2:	01 96       	adiw	r24, 0x01	; 1
    DDRD  |= 1<<5;
    PORTD |= (1<<5);
    /* } */

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     af4:	8e 30       	cpi	r24, 0x0E	; 14
     af6:	91 05       	cpc	r25, r1
     af8:	a1 f7       	brne	.-24     	; 0xae2 <matrix_init+0x26>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }

}
     afa:	08 95       	ret

00000afc <__vector_36>:

ISR(TWI_vect) {
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
  uint8_t ack = 1;
  switch(TW_STATUS) {
     b0e:	80 91 b9 00 	lds	r24, 0x00B9
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	88 7f       	andi	r24, 0xF8	; 248
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	80 38       	cpi	r24, 0x80	; 128
     b1a:	91 05       	cpc	r25, r1
     b1c:	99 f0       	breq	.+38     	; 0xb44 <__stack+0x45>
     b1e:	81 38       	cpi	r24, 0x81	; 129
     b20:	91 05       	cpc	r25, r1
     b22:	34 f4       	brge	.+12     	; 0xb30 <__stack+0x31>
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	e9 f1       	breq	.+122    	; 0xba2 <__stack+0xa3>
     b28:	80 36       	cpi	r24, 0x60	; 96
     b2a:	91 05       	cpc	r25, r1
     b2c:	e1 f5       	brne	.+120    	; 0xba6 <__stack+0xa7>
     b2e:	07 c0       	rjmp	.+14     	; 0xb3e <__stack+0x3f>
     b30:	88 3a       	cpi	r24, 0xA8	; 168
     b32:	91 05       	cpc	r25, r1
     b34:	29 f1       	breq	.+74     	; 0xb80 <__stack+0x81>
     b36:	88 3b       	cpi	r24, 0xB8	; 184
     b38:	91 05       	cpc	r25, r1
     b3a:	a9 f5       	brne	.+106    	; 0xba6 <__stack+0xa7>
     b3c:	21 c0       	rjmp	.+66     	; 0xb80 <__stack+0x81>
    case TW_SR_SLA_ACK:
      // this device has been addressed as a slave receiver
      hasSetRegister = false;
     b3e:	10 92 32 01 	sts	0x0132, r1
     b42:	31 c0       	rjmp	.+98     	; 0xba6 <__stack+0xa7>
      // this device has received data as a slave receiver
      // The first byte that we receive in this transaction sets the location
      // of the read/write location of the slaves memory that it exposes over
      // i2c.  After that, bytes will be written at bufferPos, incrementing
      // bufferPos after each write.
      if(!hasSetRegister) {
     b44:	80 91 32 01 	lds	r24, 0x0132
     b48:	88 23       	and	r24, r24
     b4a:	89 f4       	brne	.+34     	; 0xb6e <__stack+0x6f>
        bufferPos = TWDR;
     b4c:	80 91 bb 00 	lds	r24, 0x00BB
     b50:	80 93 33 01 	sts	0x0133, r24
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( bufferPos >= SLAVE_BUFFER_SIZE ) {
     b54:	80 91 33 01 	lds	r24, 0x0133
     b58:	80 31       	cpi	r24, 0x10	; 16
     b5a:	10 f4       	brcc	.+4      	; 0xb60 <__stack+0x61>
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	03 c0       	rjmp	.+6      	; 0xb66 <__stack+0x67>
          ack = 0;
          bufferPos = 0;
     b60:	10 92 33 01 	sts	0x0133, r1
     b64:	90 e0       	ldi	r25, 0x00	; 0
        }
        hasSetRegister = true;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 32 01 	sts	0x0132, r24
     b6c:	1d c0       	rjmp	.+58     	; 0xba8 <__stack+0xa9>
      } else {
        slaveBuffer[bufferPos] = TWDR;
     b6e:	e0 91 33 01 	lds	r30, 0x0133
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 91 bb 00 	lds	r24, 0x00BB
     b78:	e8 53       	subi	r30, 0x38	; 56
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	80 83       	st	Z, r24
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <__stack+0x91>

    case TW_ST_SLA_ACK:
    case TW_ST_DATA_ACK:
      // master has addressed this device as a slave transmitter and is
      // requesting data.
      TWDR = slaveBuffer[bufferPos];
     b80:	e0 91 33 01 	lds	r30, 0x0133
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	e8 53       	subi	r30, 0x38	; 56
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	80 81       	ld	r24, Z
     b8c:	80 93 bb 00 	sts	0x00BB, r24
      BUFFER_POS_INC();
     b90:	80 91 33 01 	lds	r24, 0x0133
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	8f 70       	andi	r24, 0x0F	; 15
     b9a:	90 70       	andi	r25, 0x00	; 0
     b9c:	80 93 33 01 	sts	0x0133, r24
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <__stack+0xa7>
      break;

    case TW_BUS_ERROR: // something went wrong, reset twi state
      TWCR = 0;
     ba2:	10 92 bc 00 	sts	0x00BC, r1
     ba6:	91 e0       	ldi	r25, 0x01	; 1
    default:
      break;
  }
  // Reset everything, so we are ready for the next TWI interrupt
  TWCR |= (1<<TWIE) | (1<<TWINT) | (ack<<TWEA) | (1<<TWEN);
     ba8:	80 91 bc 00 	lds	r24, 0x00BC
     bac:	85 68       	ori	r24, 0x85	; 133
     bae:	92 95       	swap	r25
     bb0:	99 0f       	add	r25, r25
     bb2:	99 0f       	add	r25, r25
     bb4:	90 7c       	andi	r25, 0xC0	; 192
     bb6:	98 2b       	or	r25, r24
     bb8:	90 93 bc 00 	sts	0x00BC, r25
}
     bbc:	ff 91       	pop	r31
     bbe:	ef 91       	pop	r30
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <serial_master_init>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     bce:	50 9a       	sbi	0x0a, 0	; 10
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     bd0:	58 9a       	sbi	0x0b, 0	; 11
}

void serial_master_init(void) {
  serial_output();
  serial_high();
}
     bd2:	08 95       	ret

00000bd4 <serial_slave_init>:
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     bd4:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     bd6:	58 9a       	sbi	0x0b, 0	; 11

void serial_slave_init(void) {
  serial_input();

  // Enable INT0
  EIMSK |= _BV(INT0);
     bd8:	e8 9a       	sbi	0x1d, 0	; 29
  // Trigger on falling edge of INT0
  EICRA &= ~(_BV(ISC00) | _BV(ISC01));
     bda:	e9 e6       	ldi	r30, 0x69	; 105
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	8c 7f       	andi	r24, 0xFC	; 252
     be2:	80 83       	st	Z, r24
}
     be4:	08 95       	ret

00000be6 <sync_recv>:
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     be6:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     be8:	58 9a       	sbi	0x0b, 0	; 11
static
void sync_recv(void) {
  serial_input();
  // This shouldn't hang if the slave disconnects because the
  // serial line will float to high if the slave does disconnect.
  while (!serial_read_pin());
     bea:	48 9b       	sbis	0x09, 0	; 9
     bec:	fe cf       	rjmp	.-4      	; 0xbea <sync_recv+0x4>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bee:	80 e8       	ldi	r24, 0x80	; 128
     bf0:	8a 95       	dec	r24
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <sync_recv+0xa>
  serial_delay();
}
     bf4:	08 95       	ret

00000bf6 <sync_send>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     bf6:	50 9a       	sbi	0x0a, 0	; 10
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
     bf8:	58 98       	cbi	0x0b, 0	; 11
     bfa:	80 e8       	ldi	r24, 0x80	; 128
     bfc:	8a 95       	dec	r24
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <sync_send+0x6>
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     c00:	58 9a       	sbi	0x0b, 0	; 11

  serial_low();
  serial_delay();

  serial_high();
}
     c02:	08 95       	ret

00000c04 <serial_read_byte>:
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     c04:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     c06:	58 9a       	sbi	0x0b, 0	; 11
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	40 e8       	ldi	r20, 0x80	; 128
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
     c0e:	35 e0       	ldi	r19, 0x05	; 5
     c10:	89 b1       	in	r24, 0x09	; 9
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    byte = (byte << 1) | serial_read_pin();
     c12:	99 0f       	add	r25, r25
     c14:	81 70       	andi	r24, 0x01	; 1
     c16:	98 2b       	or	r25, r24
     c18:	84 2f       	mov	r24, r20
     c1a:	8a 95       	dec	r24
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <serial_read_byte+0x16>
     c1e:	83 2f       	mov	r24, r19
     c20:	8a 95       	dec	r24
     c22:	f1 f7       	brne	.-4      	; 0xc20 <serial_read_byte+0x1c>
// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
     c24:	2f 5f       	subi	r18, 0xFF	; 255
     c26:	28 30       	cpi	r18, 0x08	; 8
     c28:	99 f7       	brne	.-26     	; 0xc10 <serial_read_byte+0xc>
    serial_delay();
    _delay_us(1);
  }

  return byte;
}
     c2a:	89 2f       	mov	r24, r25
     c2c:	08 95       	ret

00000c2e <serial_write_byte>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     c2e:	50 9a       	sbi	0x0a, 0	; 10
     c30:	28 e0       	ldi	r18, 0x08	; 8
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
    if(data & (1 << b)) {
     c32:	48 2f       	mov	r20, r24
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	30 e8       	ldi	r19, 0x80	; 128
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
     c38:	21 50       	subi	r18, 0x01	; 1
    if(data & (1 << b)) {
     c3a:	ca 01       	movw	r24, r20
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <serial_write_byte+0x16>
     c40:	95 95       	asr	r25
     c42:	87 95       	ror	r24
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <serial_write_byte+0x12>
     c48:	80 ff       	sbrs	r24, 0
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <serial_write_byte+0x22>
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     c4c:	58 9a       	sbi	0x0b, 0	; 11
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <serial_write_byte+0x24>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
     c50:	58 98       	cbi	0x0b, 0	; 11
     c52:	83 2f       	mov	r24, r19
     c54:	8a 95       	dec	r24
     c56:	f1 f7       	brne	.-4      	; 0xc54 <serial_write_byte+0x26>
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
     c58:	22 23       	and	r18, r18
     c5a:	71 f7       	brne	.-36     	; 0xc38 <serial_write_byte+0xa>
    } else {
      serial_low();
    }
    serial_delay();
  }
}
     c5c:	08 95       	ret

00000c5e <__vector_1>:

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
  sync_send();
     c84:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <sync_send>
     c88:	c0 e0       	ldi	r28, 0x00	; 0
     c8a:	d0 e0       	ldi	r29, 0x00	; 0

  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
     c8c:	fe 01       	movw	r30, r28
     c8e:	ec 5c       	subi	r30, 0xCC	; 204
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	80 81       	ld	r24, Z
     c94:	0e 94 17 06 	call	0xc2e	; 0xc2e <serial_write_byte>
    sync_send();
     c98:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <sync_send>

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
     c9c:	21 96       	adiw	r28, 0x01	; 1
     c9e:	c7 30       	cpi	r28, 0x07	; 7
     ca0:	d1 05       	cpc	r29, r1
     ca2:	a1 f7       	brne	.-24     	; 0xc8c <__vector_1+0x2e>
     ca4:	80 e8       	ldi	r24, 0x80	; 128
     ca6:	8a 95       	dec	r24
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <__vector_1+0x48>

  // read the middle of pulses
  _delay_us(SERIAL_DELAY/2);

  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_master_buffer[i] = serial_read_byte();
     caa:	80 e4       	ldi	r24, 0x40	; 64
     cac:	8a 95       	dec	r24
     cae:	f1 f7       	brne	.-4      	; 0xcac <__vector_1+0x4e>
     cb0:	0e 94 02 06 	call	0xc04	; 0xc04 <serial_read_byte>
     cb4:	80 93 3b 01 	sts	0x013B, r24
    /* serial_master_buffer[2] = serial_read_byte(); */
    sync_send();
     cb8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <sync_send>
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     cbc:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     cbe:	58 9a       	sbi	0x0b, 0	; 11
    /* serial_master_buffer[2] = serial_read_byte(); */
    sync_send();
  }

  serial_input();
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <serial_transaction>:
// serial_master_buffer to the slave.
//
// Returns:
// 0 => no error
// 1 => slave did not respond
int serial_transaction(void) {
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
  // this code is very time dependent, so we need to disable interrupts
  cli();
     cea:	f8 94       	cli
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     cec:	50 9a       	sbi	0x0a, 0	; 10
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
     cee:	58 98       	cbi	0x0b, 0	; 11
     cf0:	85 e0       	ldi	r24, 0x05	; 5
     cf2:	8a 95       	dec	r24
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <serial_transaction+0xc>
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
     cf6:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     cf8:	58 9a       	sbi	0x0b, 0	; 11
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     cfa:	58 9a       	sbi	0x0b, 0	; 11
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	8a 95       	dec	r24
     d00:	f1 f7       	brne	.-4      	; 0xcfe <serial_transaction+0x18>
  serial_input();
  serial_high();
  _delay_us(SERIAL_DELAY);

  // check if the slave is present
  if (serial_read_pin()) {
     d02:	48 9b       	sbis	0x09, 0	; 9
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <serial_transaction+0x28>
    // slave failed to pull the line low, assume not present
    sei();
     d06:	78 94       	sei
     d08:	21 e0       	ldi	r18, 0x01	; 1
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	1b c0       	rjmp	.+54     	; 0xd44 <serial_transaction+0x5e>
    return 1;
  }

  // if the slave is present syncronize with it
  sync_recv();
     d0e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <sync_recv>
     d12:	c0 e0       	ldi	r28, 0x00	; 0
     d14:	d0 e0       	ldi	r29, 0x00	; 0

  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
     d16:	0e 94 02 06 	call	0xc04	; 0xc04 <serial_read_byte>
     d1a:	fe 01       	movw	r30, r28
     d1c:	ec 5c       	subi	r30, 0xCC	; 204
     d1e:	fe 4f       	sbci	r31, 0xFE	; 254
     d20:	80 83       	st	Z, r24
    sync_recv();
     d22:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <sync_recv>

  // if the slave is present syncronize with it
  sync_recv();

  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
     d26:	21 96       	adiw	r28, 0x01	; 1
     d28:	c7 30       	cpi	r28, 0x07	; 7
     d2a:	d1 05       	cpc	r29, r1
     d2c:	a1 f7       	brne	.-24     	; 0xd16 <serial_transaction+0x30>
    sync_recv();
  }

  // send data to the slave
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_master_buffer[i]);
     d2e:	80 91 3b 01 	lds	r24, 0x013B
     d32:	0e 94 17 06 	call	0xc2e	; 0xc2e <serial_write_byte>
    sync_recv();
     d36:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <sync_recv>
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
     d3a:	50 9a       	sbi	0x0a, 0	; 10
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
     d3c:	58 9a       	sbi	0x0b, 0	; 11

  // always, release the line when not in use
  serial_output();
  serial_high();

  sei();
     d3e:	78 94       	sei
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
  return 0;
}
     d44:	c9 01       	movw	r24, r18
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <has_usb>:


extern bool isLeftHand = true;

bool has_usb(void) {
   USBCON |= (1 << OTGPADE); //enables VBUS pad
     d4c:	e8 ed       	ldi	r30, 0xD8	; 216
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 61       	ori	r24, 0x10	; 16
     d54:	80 83       	st	Z, r24
     d56:	8a e1       	ldi	r24, 0x1A	; 26
     d58:	8a 95       	dec	r24
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <has_usb+0xc>
   _delay_us(5);
   return (USBSTA & (1<<VBUS));  //checks state of VBUS
     d5c:	80 91 d9 00 	lds	r24, 0x00D9
}
     d60:	81 70       	andi	r24, 0x01	; 1
     d62:	08 95       	ret

00000d64 <setup_set_handedness>:
    // for Console_Task
    USB_Device_EnableSOFEvents();
}

void setup_set_handedness(void) {
    isLeftHand = false;
     d64:	10 92 01 01 	sts	0x0101, r1
}
     d68:	08 95       	ret

00000d6a <setup_hardware>:
   return (USBSTA & (1<<VBUS));  //checks state of VBUS
}

void setup_hardware(void) {
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     d6a:	84 b7       	in	r24, 0x34	; 52
     d6c:	87 7f       	andi	r24, 0xF7	; 247
     d6e:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     d70:	88 e1       	ldi	r24, 0x18	; 24
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	80 93 60 00 	sts	0x0060, r24
     d7a:	10 92 60 00 	sts	0x0060, r1
     d7e:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	20 e8       	ldi	r18, 0x80	; 128
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	20 93 61 00 	sts	0x0061, r18
     d8e:	80 93 61 00 	sts	0x0061, r24
     d92:	0f be       	out	0x3f, r0	; 63

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     d94:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <USB_Disable>

    USB_Init();
     d98:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     d9c:	e2 ee       	ldi	r30, 0xE2	; 226
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	84 60       	ori	r24, 0x04	; 4
     da4:	80 83       	st	Z, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
}
     da6:	08 95       	ret

00000da8 <main>:
void matrix_slave_scan(void);

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_hardware();
     da8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <setup_hardware>
    setup_set_handedness();
     dac:	0e 94 b2 06 	call	0xd64	; 0xd64 <setup_set_handedness>
    sei();
     db0:	78 94       	sei
     db2:	28 ec       	ldi	r18, 0xC8	; 200
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	5e e4       	ldi	r21, 0x4E	; 78
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <main+0x18>
     dba:	ca 01       	movw	r24, r20
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <main+0x14>

    /* wait for USB startup to get ready for debug output */
    uint8_t timeout = 200;  // timeout when USB is not available
    while (timeout-- && USB_DeviceState != DEVICE_STATE_Configured) {
     dc0:	21 50       	subi	r18, 0x01	; 1
     dc2:	2f 3f       	cpi	r18, 0xFF	; 255
     dc4:	21 f0       	breq	.+8      	; 0xdce <main+0x26>
     dc6:	80 91 20 02 	lds	r24, 0x0220
     dca:	84 30       	cpi	r24, 0x04	; 4
     dcc:	b1 f7       	brne	.-20     	; 0xdba <main+0x12>
        USB_USBTask();
#endif
    }

    /* if (USB_DeviceState != DEVICE_STATE_Configured) { */
    if (!has_usb()) {
     dce:	0e 94 a6 06 	call	0xd4c	; 0xd4c <has_usb>
     dd2:	88 23       	and	r24, r24
     dd4:	39 f4       	brne	.+14     	; 0xde4 <main+0x3c>
        // USB failed to connect, so run this device in slave mode.
        matrix_init();
     dd6:	0e 94 5e 05 	call	0xabc	; 0xabc <matrix_init>
        serial_slave_init();
     dda:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <serial_slave_init>

        while (1) {
            matrix_slave_scan();
     dde:	0e 94 10 05 	call	0xa20	; 0xa20 <matrix_slave_scan>
     de2:	fd cf       	rjmp	.-6      	; 0xdde <main+0x36>
        }
    }

    /* init modules */
    keyboard_init();
     de4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <keyboard_init>
    host_set_driver(&lufa_driver);
     de8:	8c e0       	ldi	r24, 0x0C	; 12
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <host_set_driver>

#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif
#ifdef RGBLIGHT_ENABLE
        rgblight_init();
     df0:	0e 94 ae 0c 	call	0x195c	; 0x195c <rgblight_init>
#endif
    while (1) {
        keyboard_task();
     df4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <keyboard_task>
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <main+0x4c>

00000dfa <led_set>:

static int count = 0;

void led_set(uint8_t usb_led)
{
}
     dfa:	08 95       	ret

00000dfc <ws2812_sendarray_mask>:
#define w_nop4  w_nop2 w_nop2
#define w_nop8  w_nop4 w_nop4
#define w_nop16 w_nop8 w_nop8

void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
     dfc:	fc 01       	movw	r30, r24
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  masklo	=~maskhi&ws2812_PORTREG;
     dfe:	8b b1       	in	r24, 0x0b	; 11
     e00:	24 2f       	mov	r18, r20
     e02:	20 95       	com	r18
     e04:	28 23       	and	r18, r24
  maskhi |=        ws2812_PORTREG;
     e06:	9b b1       	in	r25, 0x0b	; 11
     e08:	94 2b       	or	r25, r20
  sreg_prev=SREG;
     e0a:	3f b7       	in	r19, 0x3f	; 63
  cli();
     e0c:	f8 94       	cli
     e0e:	12 c0       	rjmp	.+36     	; 0xe34 <loop28+0x20>

  while (datlen--) {
    curbyte=*data++;
     e10:	81 91       	ld	r24, Z+

    asm volatile(
     e12:	48 e0       	ldi	r20, 0x08	; 8

00000e14 <loop28>:
     e14:	9b b9       	out	0x0b, r25	; 11
     e16:	00 00       	nop
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <loop28+0x6>
     e1a:	87 ff       	sbrs	r24, 7
     e1c:	2b b9       	out	0x0b, r18	; 11
     e1e:	88 0f       	add	r24, r24
     e20:	00 00       	nop
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <loop28+0x10>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <loop28+0x12>
     e26:	00 c0       	rjmp	.+0      	; 0xe28 <loop28+0x14>
     e28:	2b b9       	out	0x0b, r18	; 11
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <loop28+0x18>
     e2c:	4a 95       	dec	r20
     e2e:	91 f7       	brne	.-28     	; 0xe14 <loop28>
     e30:	61 50       	subi	r22, 0x01	; 1
     e32:	70 40       	sbci	r23, 0x00	; 0
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();

  while (datlen--) {
     e34:	61 15       	cp	r22, r1
     e36:	71 05       	cpc	r23, r1
     e38:	59 f7       	brne	.-42     	; 0xe10 <ws2812_sendarray_mask+0x14>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }

  SREG=sreg_prev;
     e3a:	3f bf       	out	0x3f, r19	; 63
}
     e3c:	08 95       	ret

00000e3e <ws2812_setleds_pin>:
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
     e3e:	fb 01       	movw	r30, r22
  ws2812_DDRREG |= pinmask; // Enable DDR
     e40:	2a b1       	in	r18, 0x0a	; 10
     e42:	24 2b       	or	r18, r20
     e44:	2a b9       	out	0x0a, r18	; 10
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	6e 0f       	add	r22, r30
     e4c:	7f 1f       	adc	r23, r31
     e4e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <ws2812_sendarray_mask>
     e52:	88 ec       	ldi	r24, 0xC8	; 200
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <ws2812_setleds_pin+0x18>
  _delay_us(50);
}
     e5a:	08 95       	ret

00000e5c <ws2812_setleds>:
#include "debug.h"

// Setleds for standard RGB
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <ws2812_setleds_pin>
}
     e62:	08 95       	ret

00000e64 <setrgb>:
		}
	}
  setrgb(r,g,b, led1);
}

void setrgb(uint8_t r, uint8_t g, uint8_t b, struct cRGB *led1) {
     e64:	f9 01       	movw	r30, r18
  (*led1).r = r;
     e66:	81 83       	std	Z+1, r24	; 0x01
  (*led1).g = g;
     e68:	60 83       	st	Z, r22
  (*led1).b = b;
     e6a:	42 83       	std	Z+2, r20	; 0x02
}
     e6c:	08 95       	ret

00000e6e <sethsv>:
rgblight_config_t inmem_config;
struct cRGB led[RGBLED_NUM];
uint8_t rgblight_inited = 0;


void sethsv(uint16_t hue, uint8_t sat, uint8_t val, struct cRGB *led1) {
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	ec 01       	movw	r28, r24
     e80:	e4 2f       	mov	r30, r20
     e82:	69 01       	movw	r12, r18
	The DIM_CURVE is used only on brightness/value and on saturation (inverted).
	This looks the most natural.
	*/
  uint8_t r, g, b;

  val = pgm_read_byte(&DIM_CURVE[val]);
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	e0 5f       	subi	r30, 0xF0	; 240
     e88:	fd 4f       	sbci	r31, 0xFD	; 253
     e8a:	e4 90       	lpm	r14, Z+
	sat = 255 - pgm_read_byte(&DIM_CURVE[255 - sat]);
     e8c:	4f ef       	ldi	r20, 0xFF	; 255
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	fa 01       	movw	r30, r20
     e92:	e6 1b       	sub	r30, r22
     e94:	f1 09       	sbc	r31, r1
     e96:	e0 5f       	subi	r30, 0xF0	; 240
     e98:	fd 4f       	sbci	r31, 0xFD	; 253
     e9a:	84 91       	lpm	r24, Z+
     e9c:	80 95       	com	r24

	uint8_t base;

	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
     e9e:	21 f4       	brne	.+8      	; 0xea8 <sethsv+0x3a>
     ea0:	6e 2d       	mov	r22, r14
     ea2:	9e 2d       	mov	r25, r14
     ea4:	4e 2d       	mov	r20, r14
     ea6:	ba c0       	rjmp	.+372    	; 0x101c <sethsv+0x1ae>
		r = val;
		g = val;
		b = val;
	} else  {
		base = ((255 - sat) * val) >> 8;
     ea8:	ee 2d       	mov	r30, r14
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	48 1b       	sub	r20, r24
     eae:	51 09       	sbc	r21, r1
     eb0:	4e 9f       	mul	r20, r30
     eb2:	c0 01       	movw	r24, r0
     eb4:	4f 9f       	mul	r20, r31
     eb6:	90 0d       	add	r25, r0
     eb8:	5e 9f       	mul	r21, r30
     eba:	90 0d       	add	r25, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	09 2f       	mov	r16, r25
     ec0:	11 27       	eor	r17, r17
     ec2:	07 fd       	sbrc	r16, 7
     ec4:	1a 95       	dec	r17

		switch (hue / 60) {
     ec6:	2c e3       	ldi	r18, 0x3C	; 60
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	ce 01       	movw	r24, r28
     ecc:	6c e3       	ldi	r22, 0x3C	; 60
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     ed4:	62 30       	cpi	r22, 0x02	; 2
     ed6:	71 05       	cpc	r23, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <sethsv+0x6e>
     eda:	41 c0       	rjmp	.+130    	; 0xf5e <sethsv+0xf0>
     edc:	63 30       	cpi	r22, 0x03	; 3
     ede:	71 05       	cpc	r23, r1
     ee0:	40 f4       	brcc	.+16     	; 0xef2 <sethsv+0x84>
     ee2:	61 15       	cp	r22, r1
     ee4:	71 05       	cpc	r23, r1
     ee6:	91 f0       	breq	.+36     	; 0xf0c <sethsv+0x9e>
     ee8:	61 30       	cpi	r22, 0x01	; 1
     eea:	71 05       	cpc	r23, r1
     eec:	09 f0       	breq	.+2      	; 0xef0 <sethsv+0x82>
     eee:	96 c0       	rjmp	.+300    	; 0x101c <sethsv+0x1ae>
     ef0:	1e c0       	rjmp	.+60     	; 0xf2e <sethsv+0xc0>
     ef2:	64 30       	cpi	r22, 0x04	; 4
     ef4:	71 05       	cpc	r23, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <sethsv+0x8c>
     ef8:	62 c0       	rjmp	.+196    	; 0xfbe <sethsv+0x150>
     efa:	64 30       	cpi	r22, 0x04	; 4
     efc:	71 05       	cpc	r23, r1
     efe:	08 f4       	brcc	.+2      	; 0xf02 <sethsv+0x94>
     f00:	46 c0       	rjmp	.+140    	; 0xf8e <sethsv+0x120>
     f02:	65 30       	cpi	r22, 0x05	; 5
     f04:	71 05       	cpc	r23, r1
     f06:	09 f0       	breq	.+2      	; 0xf0a <sethsv+0x9c>
     f08:	89 c0       	rjmp	.+274    	; 0x101c <sethsv+0x1ae>
     f0a:	70 c0       	rjmp	.+224    	; 0xfec <sethsv+0x17e>
		case 0:
			r = val;
			g = (((val - base)*hue) / 60) + base;
     f0c:	e0 1b       	sub	r30, r16
     f0e:	f1 09       	sbc	r31, r1
     f10:	ec 9f       	mul	r30, r28
     f12:	c0 01       	movw	r24, r0
     f14:	ed 9f       	mul	r30, r29
     f16:	90 0d       	add	r25, r0
     f18:	fc 9f       	mul	r31, r28
     f1a:	90 0d       	add	r25, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	6c e3       	ldi	r22, 0x3C	; 60
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     f26:	96 2f       	mov	r25, r22
     f28:	90 0f       	add	r25, r16
     f2a:	6e 2d       	mov	r22, r14
     f2c:	16 c0       	rjmp	.+44     	; 0xf5a <sethsv+0xec>
			b = base;
			break;

		case 1:
			r = (((val - base)*(60 - (hue % 60))) / 60) + base;
     f2e:	e0 1b       	sub	r30, r16
     f30:	f1 09       	sbc	r31, r1
     f32:	ce 01       	movw	r24, r28
     f34:	6c e3       	ldi	r22, 0x3C	; 60
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     f3c:	28 1b       	sub	r18, r24
     f3e:	39 0b       	sbc	r19, r25
     f40:	e2 9f       	mul	r30, r18
     f42:	c0 01       	movw	r24, r0
     f44:	e3 9f       	mul	r30, r19
     f46:	90 0d       	add	r25, r0
     f48:	f2 9f       	mul	r31, r18
     f4a:	90 0d       	add	r25, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	6c e3       	ldi	r22, 0x3C	; 60
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     f56:	60 0f       	add	r22, r16
     f58:	9e 2d       	mov	r25, r14
     f5a:	40 2f       	mov	r20, r16
     f5c:	5f c0       	rjmp	.+190    	; 0x101c <sethsv+0x1ae>
			break;

		case 2:
			r = base;
			g = val;
			b = (((val - base)*(hue % 60)) / 60) + base;
     f5e:	e0 1b       	sub	r30, r16
     f60:	f1 09       	sbc	r31, r1
     f62:	ce 01       	movw	r24, r28
     f64:	6c e3       	ldi	r22, 0x3C	; 60
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     f6c:	9c 01       	movw	r18, r24
     f6e:	e2 9f       	mul	r30, r18
     f70:	c0 01       	movw	r24, r0
     f72:	e3 9f       	mul	r30, r19
     f74:	90 0d       	add	r25, r0
     f76:	f2 9f       	mul	r31, r18
     f78:	90 0d       	add	r25, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	6c e3       	ldi	r22, 0x3C	; 60
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     f84:	46 2f       	mov	r20, r22
     f86:	40 0f       	add	r20, r16
     f88:	60 2f       	mov	r22, r16
     f8a:	9e 2d       	mov	r25, r14
     f8c:	47 c0       	rjmp	.+142    	; 0x101c <sethsv+0x1ae>
			break;

		case 3:
			r = base;
			g = (((val - base)*(60 - (hue % 60))) / 60) + base;
     f8e:	e0 1b       	sub	r30, r16
     f90:	f1 09       	sbc	r31, r1
     f92:	ce 01       	movw	r24, r28
     f94:	6c e3       	ldi	r22, 0x3C	; 60
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     f9c:	28 1b       	sub	r18, r24
     f9e:	39 0b       	sbc	r19, r25
     fa0:	e2 9f       	mul	r30, r18
     fa2:	c0 01       	movw	r24, r0
     fa4:	e3 9f       	mul	r30, r19
     fa6:	90 0d       	add	r25, r0
     fa8:	f2 9f       	mul	r31, r18
     faa:	90 0d       	add	r25, r0
     fac:	11 24       	eor	r1, r1
     fae:	6c e3       	ldi	r22, 0x3C	; 60
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     fb6:	96 2f       	mov	r25, r22
     fb8:	90 0f       	add	r25, r16
     fba:	60 2f       	mov	r22, r16
     fbc:	15 c0       	rjmp	.+42     	; 0xfe8 <sethsv+0x17a>
			b = val;
			break;

		case 4:
			r = (((val - base)*(hue % 60)) / 60) + base;
     fbe:	e0 1b       	sub	r30, r16
     fc0:	f1 09       	sbc	r31, r1
     fc2:	ce 01       	movw	r24, r28
     fc4:	6c e3       	ldi	r22, 0x3C	; 60
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     fcc:	9c 01       	movw	r18, r24
     fce:	e2 9f       	mul	r30, r18
     fd0:	c0 01       	movw	r24, r0
     fd2:	e3 9f       	mul	r30, r19
     fd4:	90 0d       	add	r25, r0
     fd6:	f2 9f       	mul	r31, r18
     fd8:	90 0d       	add	r25, r0
     fda:	11 24       	eor	r1, r1
     fdc:	6c e3       	ldi	r22, 0x3C	; 60
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     fe4:	60 0f       	add	r22, r16
     fe6:	90 2f       	mov	r25, r16
     fe8:	4e 2d       	mov	r20, r14
     fea:	18 c0       	rjmp	.+48     	; 0x101c <sethsv+0x1ae>
			break;

		case 5:
			r = val;
			g = base;
			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
     fec:	e0 1b       	sub	r30, r16
     fee:	f1 09       	sbc	r31, r1
     ff0:	ce 01       	movw	r24, r28
     ff2:	6c e3       	ldi	r22, 0x3C	; 60
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
     ffa:	28 1b       	sub	r18, r24
     ffc:	39 0b       	sbc	r19, r25
     ffe:	e2 9f       	mul	r30, r18
    1000:	c0 01       	movw	r24, r0
    1002:	e3 9f       	mul	r30, r19
    1004:	90 0d       	add	r25, r0
    1006:	f2 9f       	mul	r31, r18
    1008:	90 0d       	add	r25, r0
    100a:	11 24       	eor	r1, r1
    100c:	6c e3       	ldi	r22, 0x3C	; 60
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
    1014:	46 2f       	mov	r20, r22
    1016:	40 0f       	add	r20, r16
    1018:	6e 2d       	mov	r22, r14
    101a:	90 2f       	mov	r25, r16
			break;
		}
	}
  setrgb(r,g,b, led1);
    101c:	86 2f       	mov	r24, r22
    101e:	69 2f       	mov	r22, r25
    1020:	96 01       	movw	r18, r12
    1022:	0e 94 32 07 	call	0xe64	; 0xe64 <setrgb>
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	08 95       	ret

00001038 <rgblight_timer_init>:
}

// Animation timer -- AVR Timer3
void rgblight_timer_init(void) {
	static uint8_t rgblight_timer_is_init = 0;
	if (rgblight_timer_is_init) {
    1038:	80 91 4e 01 	lds	r24, 0x014E
    103c:	88 23       	and	r24, r24
    103e:	79 f4       	brne	.+30     	; 0x105e <rgblight_timer_init+0x26>
		return;
	}
	rgblight_timer_is_init = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 4e 01 	sts	0x014E, r24
	/* Timer 3 setup */
	TCCR3B = _BV(WGM32) //CTC mode OCR3A as TOP
    1046:	89 e0       	ldi	r24, 0x09	; 9
    1048:	80 93 91 00 	sts	0x0091, r24
	      | _BV(CS30); //Clock selelct: clk/1
	/* Set TOP value */
	uint8_t sreg = SREG;
    104c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    104e:	f8 94       	cli
	OCR3AH = (RGBLED_TIMER_TOP>>8)&0xff;
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = RGBLED_TIMER_TOP&0xff;
    1056:	80 ed       	ldi	r24, 0xD0	; 208
    1058:	80 93 98 00 	sts	0x0098, r24
	SREG = sreg;
    105c:	9f bf       	out	0x3f, r25	; 63
    105e:	08 95       	ret

00001060 <rgblight_timer_enable>:
}
void rgblight_timer_enable(void) {
	TIMSK3 |= _BV(OCIE3A);
    1060:	e1 e7       	ldi	r30, 0x71	; 113
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	80 83       	st	Z, r24
	dprintf("TIMER3 enabled.\n");
}
    106a:	08 95       	ret

0000106c <rgblight_timer_disable>:
void rgblight_timer_disable(void) {
	TIMSK3 &= ~_BV(OCIE3A);
    106c:	e1 e7       	ldi	r30, 0x71	; 113
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8d 7f       	andi	r24, 0xFD	; 253
    1074:	80 83       	st	Z, r24
	dprintf("TIMER3 disabled.\n");
}
    1076:	08 95       	ret

00001078 <rgblight_set>:
  rgblight_set();

}

void rgblight_set(void) {
	if (rgblight_config.enable) {
    1078:	80 91 d8 01 	lds	r24, 0x01D8
    107c:	80 ff       	sbrs	r24, 0
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <rgblight_set+0xe>
		ws2812_setleds(led, RGBLED_NUM);
    1080:	80 ee       	ldi	r24, 0xE0	; 224
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0c c0       	rjmp	.+24     	; 0x109e <rgblight_set+0x26>
    1086:	e0 ee       	ldi	r30, 0xE0	; 224
    1088:	f1 e0       	ldi	r31, 0x01	; 1
	} else {
		for (uint8_t i=0;i<RGBLED_NUM;i++) {
	    led[i].r = 0;
    108a:	11 82       	std	Z+1, r1	; 0x01
	    led[i].g = 0;
    108c:	10 82       	st	Z, r1
	    led[i].b = 0;
    108e:	12 82       	std	Z+2, r1	; 0x02
    1090:	33 96       	adiw	r30, 0x03	; 3

void rgblight_set(void) {
	if (rgblight_config.enable) {
		ws2812_setleds(led, RGBLED_NUM);
	} else {
		for (uint8_t i=0;i<RGBLED_NUM;i++) {
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	ec 31       	cpi	r30, 0x1C	; 28
    1096:	f8 07       	cpc	r31, r24
    1098:	c1 f7       	brne	.-16     	; 0x108a <rgblight_set+0x12>
	    led[i].r = 0;
	    led[i].g = 0;
	    led[i].b = 0;
	  }
		ws2812_setleds(led, RGBLED_NUM);
    109a:	cf 01       	movw	r24, r30
    109c:	cc 97       	sbiw	r24, 0x3c	; 60
    109e:	64 e1       	ldi	r22, 0x14	; 20
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <ws2812_setleds>
    10a6:	08 95       	ret

000010a8 <rgblight_effect_knight>:
		pos = (pos+1)%RGBLED_NUM;
	}

}

void rgblight_effect_knight(uint8_t interval) {
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	ec 97       	sbiw	r28, 0x3c	; 60
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	18 2f       	mov	r17, r24
	static uint16_t last_timer = 0;
	uint8_t i,j,cur;
	int8_t k;
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
    10d4:	80 91 3d 01 	lds	r24, 0x013D
    10d8:	90 91 3e 01 	lds	r25, 0x013E
    10dc:	0e 94 28 18 	call	0x3050	; 0x3050 <timer_elapsed>
    10e0:	e1 2f       	mov	r30, r17
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e3 5e       	subi	r30, 0xE3	; 227
    10e6:	fb 4f       	sbci	r31, 0xFB	; 251
    10e8:	24 91       	lpm	r18, Z+
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	82 17       	cp	r24, r18
    10ee:	93 07       	cpc	r25, r19
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <rgblight_effect_knight+0x4c>
    10f2:	92 c0       	rjmp	.+292    	; 0x1218 <rgblight_effect_knight+0x170>
	last_timer = timer_read();
    10f4:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    10f8:	90 93 3e 01 	sts	0x013E, r25
    10fc:	80 93 3d 01 	sts	0x013D, r24
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
		preled[i].g=0;
		preled[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
			k = pos+j*increament;
    1100:	70 90 3f 01 	lds	r7, 0x013F
    1104:	80 91 02 01 	lds	r24, 0x0102
    1108:	a8 2e       	mov	r10, r24
    110a:	bb 24       	eor	r11, r11
    110c:	a7 fc       	sbrc	r10, 7
    110e:	b0 94       	com	r11
    1110:	8e 01       	movw	r16, r28
    1112:	0f 5f       	subi	r16, 0xFF	; 255
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	ee 24       	eor	r14, r14
    1118:	ff 24       	eor	r15, r15
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
    111a:	d8 01       	movw	r26, r16
    111c:	11 96       	adiw	r26, 0x01	; 1
    111e:	1c 92       	st	X, r1
    1120:	11 97       	sbiw	r26, 0x01	; 1
		preled[i].g=0;
    1122:	1c 92       	st	X, r1
		preled[i].b=0;
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	1c 92       	st	X, r1
    1128:	48 01       	movw	r8, r16
    112a:	cc 24       	eor	r12, r12
    112c:	57 e0       	ldi	r21, 0x07	; 7
    112e:	d5 2e       	mov	r13, r21
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
			k = pos+j*increament;
    1130:	ca 9c       	mul	r12, r10
    1132:	80 2d       	mov	r24, r0
    1134:	11 24       	eor	r1, r1
    1136:	87 0d       	add	r24, r7
			if (k<0) k = 0;
    1138:	87 ff       	sbrs	r24, 7
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <rgblight_effect_knight+0x98>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <rgblight_effect_knight+0x9e>
			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
    1140:	84 31       	cpi	r24, 0x14	; 20
    1142:	0c f0       	brlt	.+2      	; 0x1146 <rgblight_effect_knight+0x9e>
    1144:	83 e1       	ldi	r24, 0x13	; 19
			if (i==k) {
    1146:	99 27       	eor	r25, r25
    1148:	87 fd       	sbrc	r24, 7
    114a:	90 95       	com	r25
    114c:	e8 16       	cp	r14, r24
    114e:	f9 06       	cpc	r15, r25
    1150:	a1 f4       	brne	.+40     	; 0x117a <rgblight_effect_knight+0xd2>
				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
    1152:	20 91 d8 01 	lds	r18, 0x01D8
    1156:	22 1f       	adc	r18, r18
    1158:	22 27       	eor	r18, r18
    115a:	22 1f       	adc	r18, r18
    115c:	90 91 d9 01 	lds	r25, 0x01D9
    1160:	89 2f       	mov	r24, r25
    1162:	88 0f       	add	r24, r24
    1164:	82 2b       	or	r24, r18
    1166:	99 1f       	adc	r25, r25
    1168:	99 27       	eor	r25, r25
    116a:	99 1f       	adc	r25, r25
    116c:	60 91 da 01 	lds	r22, 0x01DA
    1170:	40 91 db 01 	lds	r20, 0x01DB
    1174:	94 01       	movw	r18, r8
    1176:	0e 94 37 07 	call	0xe6e	; 0xe6e <sethsv>
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
		preled[i].g=0;
		preled[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
    117a:	c3 94       	inc	r12
    117c:	da 94       	dec	r13
    117e:	c1 f6       	brne	.-80     	; 0x1130 <rgblight_effect_knight+0x88>
    1180:	08 94       	sec
    1182:	e1 1c       	adc	r14, r1
    1184:	f1 1c       	adc	r15, r1
    1186:	0d 5f       	subi	r16, 0xFD	; 253
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
	int8_t k;
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
    118a:	b4 e1       	ldi	r27, 0x14	; 20
    118c:	eb 16       	cp	r14, r27
    118e:	f1 04       	cpc	r15, r1
    1190:	21 f6       	brne	.-120    	; 0x111a <rgblight_effect_knight+0x72>
    1192:	20 ee       	ldi	r18, 0xE0	; 224
    1194:	31 e0       	ldi	r19, 0x01	; 1
    1196:	0b e0       	ldi	r16, 0x0B	; 11
    1198:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
			cur = (i+RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
			led[i].r = preled[cur].r;
    119a:	7e 01       	movw	r14, r28
    119c:	08 94       	sec
    119e:	e1 1c       	adc	r14, r1
    11a0:	f1 1c       	adc	r15, r1
    11a2:	c8 01       	movw	r24, r16
    11a4:	64 e1       	ldi	r22, 0x14	; 20
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divmodhi4>
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	e8 0f       	add	r30, r24
    11b6:	f9 1f       	adc	r31, r25
    11b8:	ee 0d       	add	r30, r14
    11ba:	ff 1d       	adc	r31, r15
    11bc:	81 81       	ldd	r24, Z+1	; 0x01
    11be:	d9 01       	movw	r26, r18
    11c0:	11 96       	adiw	r26, 0x01	; 1
    11c2:	8c 93       	st	X, r24
    11c4:	11 97       	sbiw	r26, 0x01	; 1
			led[i].g = preled[cur].g;
    11c6:	80 81       	ld	r24, Z
    11c8:	8c 93       	st	X, r24
			led[i].b = preled[cur].b;
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	12 96       	adiw	r26, 0x02	; 2
    11ce:	8c 93       	st	X, r24
    11d0:	0f 5f       	subi	r16, 0xFF	; 255
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	2d 5f       	subi	r18, 0xFD	; 253
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
			}
		}
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
    11d8:	0f 31       	cpi	r16, 0x1F	; 31
    11da:	11 05       	cpc	r17, r1
    11dc:	11 f7       	brne	.-60     	; 0x11a2 <rgblight_effect_knight+0xfa>
			led[i].r = preled[cur].r;
			led[i].g = preled[cur].g;
			led[i].b = preled[cur].b;
		}
	}
	rgblight_set();
    11de:	0e 94 3c 08 	call	0x1078	; 0x1078 <rgblight_set>
	if (increament == 1) {
    11e2:	80 91 02 01 	lds	r24, 0x0102
    11e6:	90 91 3f 01 	lds	r25, 0x013F
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	49 f4       	brne	.+18     	; 0x1200 <rgblight_effect_knight+0x158>
		if (pos - 1 < 0 - RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
    11ee:	9a 3f       	cpi	r25, 0xFA	; 250
    11f0:	2c f4       	brge	.+10     	; 0x11fc <rgblight_effect_knight+0x154>
			pos = 0- RGBLIGHT_EFFECT_KNIGHT_LENGTH;
    11f2:	89 ef       	ldi	r24, 0xF9	; 249
    11f4:	80 93 3f 01 	sts	0x013F, r24
			increament = -1;
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <rgblight_effect_knight+0x164>
		} else {
			pos -= 1;
    11fc:	91 50       	subi	r25, 0x01	; 1
    11fe:	0a c0       	rjmp	.+20     	; 0x1214 <rgblight_effect_knight+0x16c>
		}
	} else {
		if (pos+1>RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
    1200:	9b 31       	cpi	r25, 0x1B	; 27
    1202:	3c f0       	brlt	.+14     	; 0x1212 <rgblight_effect_knight+0x16a>
			pos = RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH-1;
    1204:	8a e1       	ldi	r24, 0x1A	; 26
    1206:	80 93 3f 01 	sts	0x013F, r24
			increament = 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 02 01 	sts	0x0102, r24
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <rgblight_effect_knight+0x170>
		} else {
			pos += 1;
    1212:	9f 5f       	subi	r25, 0xFF	; 255
    1214:	90 93 3f 01 	sts	0x013F, r25
		}
	}

}
    1218:	ec 96       	adiw	r28, 0x3c	; 60
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	bf 90       	pop	r11
    1236:	af 90       	pop	r10
    1238:	9f 90       	pop	r9
    123a:	8f 90       	pop	r8
    123c:	7f 90       	pop	r7
    123e:	08 95       	ret

00001240 <rgblight_effect_snake>:
			current_hue = current_hue - 1;
		}

	}
}
void rgblight_effect_snake(uint8_t interval) {
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	18 2f       	mov	r17, r24
	static uint8_t pos=0;
	static uint16_t last_timer = 0;
	uint8_t i,j;
	int8_t k;
	int8_t increament = 1;
	if (interval%2) increament = -1;
    1258:	80 fd       	sbrc	r24, 0
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <rgblight_effect_snake+0x22>
    125c:	cc 24       	eor	r12, r12
    125e:	c3 94       	inc	r12
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <rgblight_effect_snake+0x26>
    1262:	cc 24       	eor	r12, r12
    1264:	ca 94       	dec	r12
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
    1266:	80 91 40 01 	lds	r24, 0x0140
    126a:	90 91 41 01 	lds	r25, 0x0141
    126e:	0e 94 28 18 	call	0x3050	; 0x3050 <timer_elapsed>
    1272:	16 95       	lsr	r17
    1274:	e1 2f       	mov	r30, r17
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	e6 5e       	subi	r30, 0xE6	; 230
    127a:	fb 4f       	sbci	r31, 0xFB	; 251
    127c:	e4 91       	lpm	r30, Z+
    127e:	2e 2f       	mov	r18, r30
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	82 17       	cp	r24, r18
    1284:	93 07       	cpc	r25, r19
    1286:	08 f4       	brcc	.+2      	; 0x128a <rgblight_effect_snake+0x4a>
    1288:	63 c0       	rjmp	.+198    	; 0x1350 <rgblight_effect_snake+0x110>
	last_timer = timer_read();
    128a:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    128e:	90 93 41 01 	sts	0x0141, r25
    1292:	80 93 40 01 	sts	0x0140, r24
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
		led[i].g=0;
		led[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
			k = pos+j*increament;
    1296:	90 90 42 01 	lds	r9, 0x0142
    129a:	c0 ee       	ldi	r28, 0xE0	; 224
    129c:	d1 e0       	ldi	r29, 0x01	; 1
    129e:	ee 24       	eor	r14, r14
    12a0:	ff 24       	eor	r15, r15
	int8_t increament = 1;
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
    12a2:	19 82       	std	Y+1, r1	; 0x01
		led[i].g=0;
    12a4:	18 82       	st	Y, r1
		led[i].b=0;
    12a6:	1a 82       	std	Y+2, r1	; 0x02
    12a8:	5e 01       	movw	r10, r28
    12aa:	d9 2c       	mov	r13, r9
    12ac:	07 e0       	ldi	r16, 0x07	; 7
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	8d 2d       	mov	r24, r13
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
			k = pos+j*increament;
			if (k<0) k = k+RGBLED_NUM;
    12b2:	d7 fc       	sbrc	r13, 7
    12b4:	8c 5e       	subi	r24, 0xEC	; 236
			if (i==k) {
    12b6:	99 27       	eor	r25, r25
    12b8:	87 fd       	sbrc	r24, 7
    12ba:	90 95       	com	r25
    12bc:	e8 16       	cp	r14, r24
    12be:	f9 06       	cpc	r15, r25
    12c0:	21 f5       	brne	.+72     	; 0x130a <rgblight_effect_snake+0xca>
				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE_LENGTH), &led[i]);
    12c2:	20 91 d8 01 	lds	r18, 0x01D8
    12c6:	22 1f       	adc	r18, r18
    12c8:	22 27       	eor	r18, r18
    12ca:	22 1f       	adc	r18, r18
    12cc:	30 91 d9 01 	lds	r19, 0x01D9
    12d0:	e3 2f       	mov	r30, r19
    12d2:	ee 0f       	add	r30, r30
    12d4:	80 91 db 01 	lds	r24, 0x01DB
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	ac 01       	movw	r20, r24
    12dc:	04 9f       	mul	r16, r20
    12de:	c0 01       	movw	r24, r0
    12e0:	05 9f       	mul	r16, r21
    12e2:	90 0d       	add	r25, r0
    12e4:	14 9f       	mul	r17, r20
    12e6:	90 0d       	add	r25, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	67 e0       	ldi	r22, 0x07	; 7
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divmodhi4>
    12f2:	46 2f       	mov	r20, r22
    12f4:	8e 2f       	mov	r24, r30
    12f6:	82 2b       	or	r24, r18
    12f8:	93 2f       	mov	r25, r19
    12fa:	99 1f       	adc	r25, r25
    12fc:	99 27       	eor	r25, r25
    12fe:	99 1f       	adc	r25, r25
    1300:	60 91 da 01 	lds	r22, 0x01DA
    1304:	95 01       	movw	r18, r10
    1306:	0e 94 37 07 	call	0xe6e	; 0xe6e <sethsv>
    130a:	dc 0c       	add	r13, r12
    130c:	01 50       	subi	r16, 0x01	; 1
    130e:	10 40       	sbci	r17, 0x00	; 0
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
		led[i].g=0;
		led[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
    1310:	00 23       	and	r16, r16
    1312:	71 f6       	brne	.-100    	; 0x12b0 <rgblight_effect_snake+0x70>
    1314:	08 94       	sec
    1316:	e1 1c       	adc	r14, r1
    1318:	f1 1c       	adc	r15, r1
    131a:	23 96       	adiw	r28, 0x03	; 3
	int8_t k;
	int8_t increament = 1;
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
    131c:	54 e1       	ldi	r21, 0x14	; 20
    131e:	e5 16       	cp	r14, r21
    1320:	f1 04       	cpc	r15, r1
    1322:	09 f0       	breq	.+2      	; 0x1326 <rgblight_effect_snake+0xe6>
    1324:	be cf       	rjmp	.-132    	; 0x12a2 <rgblight_effect_snake+0x62>
			if (i==k) {
				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE_LENGTH), &led[i]);
			}
		}
	}
	rgblight_set();
    1326:	0e 94 3c 08 	call	0x1078	; 0x1078 <rgblight_set>
    132a:	80 91 42 01 	lds	r24, 0x0142
	if (increament == 1) {
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	c9 16       	cp	r12, r25
    1332:	31 f4       	brne	.+12     	; 0x1340 <rgblight_effect_snake+0x100>
		if (pos - 1 < 0) {
    1334:	88 23       	and	r24, r24
    1336:	11 f4       	brne	.+4      	; 0x133c <rgblight_effect_snake+0xfc>
			pos = 13;
    1338:	8d e0       	ldi	r24, 0x0D	; 13
    133a:	08 c0       	rjmp	.+16     	; 0x134c <rgblight_effect_snake+0x10c>
		} else {
			pos -= 1;
    133c:	81 50       	subi	r24, 0x01	; 1
    133e:	06 c0       	rjmp	.+12     	; 0x134c <rgblight_effect_snake+0x10c>
		}
	} else {
		pos = (pos+1)%RGBLED_NUM;
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	64 e1       	ldi	r22, 0x14	; 20
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divmodhi4>
    134c:	80 93 42 01 	sts	0x0142, r24
	}

}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	08 95       	ret

00001368 <rgblight_effect_rainbow_swirl>:
	last_timer = timer_read();
	rgblight_sethsv_noeeprom(current_hue, rgblight_config.sat, rgblight_config.val);
	current_hue = (current_hue+1) % 360;
}

void rgblight_effect_rainbow_swirl(uint8_t interval) {
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	f8 2e       	mov	r15, r24
	static uint16_t current_hue=0;
	static uint16_t last_timer = 0;
	uint16_t hue;
	uint8_t i;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
    1374:	80 91 43 01 	lds	r24, 0x0143
    1378:	90 91 44 01 	lds	r25, 0x0144
    137c:	0e 94 28 18 	call	0x3050	; 0x3050 <timer_elapsed>
    1380:	ef 2d       	mov	r30, r15
    1382:	e6 95       	lsr	r30
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	ec 5e       	subi	r30, 0xEC	; 236
    1388:	fb 4f       	sbci	r31, 0xFB	; 251
    138a:	e4 91       	lpm	r30, Z+
    138c:	2e 2f       	mov	r18, r30
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	82 17       	cp	r24, r18
    1392:	93 07       	cpc	r25, r19
    1394:	90 f1       	brcs	.+100    	; 0x13fa <rgblight_effect_rainbow_swirl+0x92>
	last_timer = timer_read();
    1396:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    139a:	90 93 44 01 	sts	0x0144, r25
    139e:	80 93 43 01 	sts	0x0143, r24
	for (i=0; i<RGBLED_NUM; i++) {
		hue = (360/RGBLED_NUM*i+current_hue)%360;
    13a2:	00 91 45 01 	lds	r16, 0x0145
    13a6:	10 91 46 01 	lds	r17, 0x0146
    13aa:	c0 ee       	ldi	r28, 0xE0	; 224
    13ac:	d1 e0       	ldi	r29, 0x01	; 1
		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
    13ae:	c8 01       	movw	r24, r16
    13b0:	68 e6       	ldi	r22, 0x68	; 104
    13b2:	71 e0       	ldi	r23, 0x01	; 1
    13b4:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
    13b8:	60 91 da 01 	lds	r22, 0x01DA
    13bc:	40 91 db 01 	lds	r20, 0x01DB
    13c0:	9e 01       	movw	r18, r28
    13c2:	0e 94 37 07 	call	0xe6e	; 0xe6e <sethsv>
    13c6:	0e 5e       	subi	r16, 0xEE	; 238
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	23 96       	adiw	r28, 0x03	; 3
	static uint16_t last_timer = 0;
	uint16_t hue;
	uint8_t i;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0; i<RGBLED_NUM; i++) {
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	cc 31       	cpi	r28, 0x1C	; 28
    13d0:	d8 07       	cpc	r29, r24
    13d2:	69 f7       	brne	.-38     	; 0x13ae <rgblight_effect_rainbow_swirl+0x46>
		hue = (360/RGBLED_NUM*i+current_hue)%360;
		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
	}
	rgblight_set();
    13d4:	0e 94 3c 08 	call	0x1078	; 0x1078 <rgblight_set>
    13d8:	80 91 45 01 	lds	r24, 0x0145
    13dc:	90 91 46 01 	lds	r25, 0x0146

	if (interval % 2) {
    13e0:	f0 fe       	sbrs	r15, 0
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <rgblight_effect_rainbow_swirl+0x88>
		current_hue = (current_hue+1) % 360;
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	68 e6       	ldi	r22, 0x68	; 104
    13e8:	71 e0       	ldi	r23, 0x01	; 1
    13ea:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <rgblight_effect_rainbow_swirl+0x8a>
	} else {
		if (current_hue -1 < 0) {
			current_hue = 359;
		} else {
			current_hue = current_hue - 1;
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	90 93 46 01 	sts	0x0146, r25
    13f6:	80 93 45 01 	sts	0x0145, r24
		}

	}
}
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	08 95       	ret

00001406 <rgblight_setrgb>:
		eeconfig_write_rgblight(rgblight_config.raw);
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}

void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
    1406:	e0 ee       	ldi	r30, 0xE0	; 224
    1408:	f1 e0       	ldi	r31, 0x01	; 1
  // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
  for (uint8_t i=0;i<RGBLED_NUM;i++) {
    led[i].r = r;
    140a:	81 83       	std	Z+1, r24	; 0x01
    led[i].g = g;
    140c:	60 83       	st	Z, r22
    led[i].b = b;
    140e:	42 83       	std	Z+2, r20	; 0x02
    1410:	33 96       	adiw	r30, 0x03	; 3
  }
}

void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
  // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
  for (uint8_t i=0;i<RGBLED_NUM;i++) {
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	ec 31       	cpi	r30, 0x1C	; 28
    1416:	f9 07       	cpc	r31, r25
    1418:	c1 f7       	brne	.-16     	; 0x140a <rgblight_setrgb+0x4>
    led[i].r = r;
    led[i].g = g;
    led[i].b = b;
  }
  rgblight_set();
    141a:	0e 94 3c 08 	call	0x1078	; 0x1078 <rgblight_set>

}
    141e:	08 95       	ret

00001420 <rgblight_sethsv_noeeprom>:
    val = rgblight_config.val-RGBLIGHT_VAL_STEP;
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
}

void rgblight_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val){
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <rgblight_sethsv_noeeprom+0xe>
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	18 2f       	mov	r17, r24
    1436:	09 2f       	mov	r16, r25
    1438:	f6 2e       	mov	r15, r22
    143a:	e4 2e       	mov	r14, r20
	inmem_config.raw = rgblight_config.raw;
    143c:	80 91 d8 01 	lds	r24, 0x01D8
    1440:	90 91 d9 01 	lds	r25, 0x01D9
    1444:	a0 91 da 01 	lds	r26, 0x01DA
    1448:	b0 91 db 01 	lds	r27, 0x01DB
    144c:	80 93 dc 01 	sts	0x01DC, r24
    1450:	90 93 dd 01 	sts	0x01DD, r25
    1454:	a0 93 de 01 	sts	0x01DE, r26
    1458:	b0 93 df 01 	sts	0x01DF, r27
  if (rgblight_config.enable) {
    145c:	80 91 d8 01 	lds	r24, 0x01D8
    1460:	80 ff       	sbrs	r24, 0
    1462:	21 c0       	rjmp	.+66     	; 0x14a6 <rgblight_sethsv_noeeprom+0x86>
    struct cRGB tmp_led;
    sethsv(hue, sat, val, &tmp_led);
    1464:	81 2f       	mov	r24, r17
    1466:	90 2f       	mov	r25, r16
    1468:	9e 01       	movw	r18, r28
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	0e 94 37 07 	call	0xe6e	; 0xe6e <sethsv>
		inmem_config.hue = hue;
    1472:	91 2f       	mov	r25, r17
    1474:	97 95       	ror	r25
    1476:	99 27       	eor	r25, r25
    1478:	97 95       	ror	r25
    147a:	80 91 dc 01 	lds	r24, 0x01DC
    147e:	8f 77       	andi	r24, 0x7F	; 127
    1480:	89 2b       	or	r24, r25
    1482:	80 93 dc 01 	sts	0x01DC, r24
    1486:	07 95       	ror	r16
    1488:	00 27       	eor	r16, r16
    148a:	07 95       	ror	r16
    148c:	16 95       	lsr	r17
    148e:	10 2b       	or	r17, r16
    1490:	10 93 dd 01 	sts	0x01DD, r17
		inmem_config.sat = sat;
    1494:	f0 92 de 01 	sts	0x01DE, r15
		inmem_config.val = val;
    1498:	e0 92 df 01 	sts	0x01DF, r14
    // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_config.val);
    rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	69 81       	ldd	r22, Y+1	; 0x01
    14a0:	4b 81       	ldd	r20, Y+3	; 0x03
    14a2:	0e 94 03 0a 	call	0x1406	; 0x1406 <rgblight_setrgb>
  }
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	08 95       	ret

000014ba <rgblight_effect_rainbow_mood>:

	rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, pgm_read_byte(&RGBLED_BREATHING_TABLE[pos]));
	pos = (pos+1) % 256;
}

void rgblight_effect_rainbow_mood(uint8_t interval) {
    14ba:	1f 93       	push	r17
    14bc:	18 2f       	mov	r17, r24
	static uint16_t current_hue=0;
	static uint16_t last_timer = 0;

	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval])) return;
    14be:	80 91 47 01 	lds	r24, 0x0147
    14c2:	90 91 48 01 	lds	r25, 0x0148
    14c6:	0e 94 28 18 	call	0x3050	; 0x3050 <timer_elapsed>
    14ca:	e1 2f       	mov	r30, r17
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	ec 5e       	subi	r30, 0xEC	; 236
    14d0:	fb 4f       	sbci	r31, 0xFB	; 251
    14d2:	24 91       	lpm	r18, Z+
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	82 17       	cp	r24, r18
    14d8:	93 07       	cpc	r25, r19
    14da:	e8 f0       	brcs	.+58     	; 0x1516 <rgblight_effect_rainbow_mood+0x5c>
	last_timer = timer_read();
    14dc:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    14e0:	90 93 48 01 	sts	0x0148, r25
    14e4:	80 93 47 01 	sts	0x0147, r24
	rgblight_sethsv_noeeprom(current_hue, rgblight_config.sat, rgblight_config.val);
    14e8:	80 91 49 01 	lds	r24, 0x0149
    14ec:	90 91 4a 01 	lds	r25, 0x014A
    14f0:	60 91 da 01 	lds	r22, 0x01DA
    14f4:	40 91 db 01 	lds	r20, 0x01DB
    14f8:	0e 94 10 0a 	call	0x1420	; 0x1420 <rgblight_sethsv_noeeprom>
	current_hue = (current_hue+1) % 360;
    14fc:	80 91 49 01 	lds	r24, 0x0149
    1500:	90 91 4a 01 	lds	r25, 0x014A
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	68 e6       	ldi	r22, 0x68	; 104
    1508:	71 e0       	ldi	r23, 0x01	; 1
    150a:	0e 94 ac 22 	call	0x4558	; 0x4558 <__udivmodhi4>
    150e:	90 93 4a 01 	sts	0x014A, r25
    1512:	80 93 49 01 	sts	0x0149, r24
}
    1516:	1f 91       	pop	r17
    1518:	08 95       	ret

0000151a <rgblight_effect_breathing>:
		rgblight_effect_knight(rgblight_config.mode-21);
	}
}

// effects
void rgblight_effect_breathing(uint8_t interval) {
    151a:	1f 93       	push	r17
    151c:	18 2f       	mov	r17, r24
	static uint8_t pos = 0;
	static uint16_t last_timer = 0;

	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_BREATHING_INTERVALS[interval])) return;
    151e:	80 91 4b 01 	lds	r24, 0x014B
    1522:	90 91 4c 01 	lds	r25, 0x014C
    1526:	0e 94 28 18 	call	0x3050	; 0x3050 <timer_elapsed>
    152a:	e1 2f       	mov	r30, r17
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	e0 5f       	subi	r30, 0xF0	; 240
    1530:	fb 4f       	sbci	r31, 0xFB	; 251
    1532:	24 91       	lpm	r18, Z+
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	82 17       	cp	r24, r18
    1538:	93 07       	cpc	r25, r19
    153a:	18 f1       	brcs	.+70     	; 0x1582 <rgblight_effect_breathing+0x68>
	last_timer = timer_read();
    153c:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    1540:	90 93 4c 01 	sts	0x014C, r25
    1544:	80 93 4b 01 	sts	0x014B, r24

	rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, pgm_read_byte(&RGBLED_BREATHING_TABLE[pos]));
    1548:	e0 91 4d 01 	lds	r30, 0x014D
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	e0 5f       	subi	r30, 0xF0	; 240
    1550:	fc 4f       	sbci	r31, 0xFC	; 252
    1552:	e4 91       	lpm	r30, Z+
    1554:	20 91 d8 01 	lds	r18, 0x01D8
    1558:	22 1f       	adc	r18, r18
    155a:	22 27       	eor	r18, r18
    155c:	22 1f       	adc	r18, r18
    155e:	90 91 d9 01 	lds	r25, 0x01D9
    1562:	89 2f       	mov	r24, r25
    1564:	88 0f       	add	r24, r24
    1566:	82 2b       	or	r24, r18
    1568:	99 1f       	adc	r25, r25
    156a:	99 27       	eor	r25, r25
    156c:	99 1f       	adc	r25, r25
    156e:	60 91 da 01 	lds	r22, 0x01DA
    1572:	4e 2f       	mov	r20, r30
    1574:	0e 94 10 0a 	call	0x1420	; 0x1420 <rgblight_sethsv_noeeprom>
	pos = (pos+1) % 256;
    1578:	80 91 4d 01 	lds	r24, 0x014D
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	80 93 4d 01 	sts	0x014D, r24
}
    1582:	1f 91       	pop	r17
    1584:	08 95       	ret

00001586 <__vector_32>:
void rgblight_timer_toggle(void) {
	TIMSK3 ^= _BV(OCIE3A);
	dprintf("TIMER3 toggled.\n");
}

ISR(TIMER3_COMPA_vect) {
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
	// Mode = 1, static light, do nothing here
	if (rgblight_config.mode>=2 && rgblight_config.mode<=5) {
    15a8:	90 91 d8 01 	lds	r25, 0x01D8
    15ac:	96 95       	lsr	r25
    15ae:	9f 73       	andi	r25, 0x3F	; 63
    15b0:	89 2f       	mov	r24, r25
    15b2:	82 5c       	subi	r24, 0xC2	; 194
    15b4:	8f 73       	andi	r24, 0x3F	; 63
    15b6:	84 30       	cpi	r24, 0x04	; 4
    15b8:	28 f4       	brcc	.+10     	; 0x15c4 <__vector_32+0x3e>
		// mode = 2 to 5, breathing mode
		rgblight_effect_breathing(rgblight_config.mode-2);
    15ba:	89 2f       	mov	r24, r25
    15bc:	82 50       	subi	r24, 0x02	; 2
    15be:	0e 94 8d 0a 	call	0x151a	; 0x151a <rgblight_effect_breathing>
    15c2:	27 c0       	rjmp	.+78     	; 0x1612 <__vector_32+0x8c>

	} else if (rgblight_config.mode>=6 && rgblight_config.mode<=8) {
    15c4:	89 2f       	mov	r24, r25
    15c6:	86 5c       	subi	r24, 0xC6	; 198
    15c8:	8f 73       	andi	r24, 0x3F	; 63
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	28 f4       	brcc	.+10     	; 0x15d8 <__vector_32+0x52>
		rgblight_effect_rainbow_mood(rgblight_config.mode-6);
    15ce:	89 2f       	mov	r24, r25
    15d0:	86 50       	subi	r24, 0x06	; 6
    15d2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <rgblight_effect_rainbow_mood>
    15d6:	1d c0       	rjmp	.+58     	; 0x1612 <__vector_32+0x8c>
	} else if (rgblight_config.mode>=9 && rgblight_config.mode<=14) {
    15d8:	89 2f       	mov	r24, r25
    15da:	89 5c       	subi	r24, 0xC9	; 201
    15dc:	8f 73       	andi	r24, 0x3F	; 63
    15de:	86 30       	cpi	r24, 0x06	; 6
    15e0:	28 f4       	brcc	.+10     	; 0x15ec <__vector_32+0x66>
		rgblight_effect_rainbow_swirl(rgblight_config.mode-9);
    15e2:	89 2f       	mov	r24, r25
    15e4:	89 50       	subi	r24, 0x09	; 9
    15e6:	0e 94 b4 09 	call	0x1368	; 0x1368 <rgblight_effect_rainbow_swirl>
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <__vector_32+0x8c>
	} else if (rgblight_config.mode>=15 && rgblight_config.mode<=20) {
    15ec:	89 2f       	mov	r24, r25
    15ee:	8f 5c       	subi	r24, 0xCF	; 207
    15f0:	8f 73       	andi	r24, 0x3F	; 63
    15f2:	86 30       	cpi	r24, 0x06	; 6
    15f4:	28 f4       	brcc	.+10     	; 0x1600 <__vector_32+0x7a>
		rgblight_effect_snake(rgblight_config.mode-15);
    15f6:	89 2f       	mov	r24, r25
    15f8:	8f 50       	subi	r24, 0x0F	; 15
    15fa:	0e 94 20 09 	call	0x1240	; 0x1240 <rgblight_effect_snake>
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <__vector_32+0x8c>
	} else if (rgblight_config.mode>=21 && rgblight_config.mode<=23) {
    1600:	89 2f       	mov	r24, r25
    1602:	85 5d       	subi	r24, 0xD5	; 213
    1604:	8f 73       	andi	r24, 0x3F	; 63
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	20 f4       	brcc	.+8      	; 0x1612 <__vector_32+0x8c>
		rgblight_effect_knight(rgblight_config.mode-21);
    160a:	89 2f       	mov	r24, r25
    160c:	85 51       	subi	r24, 0x15	; 21
    160e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <rgblight_effect_knight>
	}
}
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <eeconfig_write_rgblight>:


uint32_t eeconfig_read_rgblight(void) {
  return eeprom_read_dword(EECONFIG_RGBLIGHT);
}
void eeconfig_write_rgblight(uint32_t val) {
    1634:	ab 01       	movw	r20, r22
    1636:	bc 01       	movw	r22, r24
  eeprom_write_dword(EECONFIG_RGBLIGHT, val);
    1638:	87 e0       	ldi	r24, 0x07	; 7
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 ed 22 	call	0x45da	; 0x45da <__eewr_dword_m32u4>
}
    1640:	08 95       	ret

00001642 <rgblight_sethsv>:
		inmem_config.val = val;
    // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_config.val);
    rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
  }
}
void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val){
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	18 2f       	mov	r17, r24
    164c:	09 2f       	mov	r16, r25
    164e:	e6 2e       	mov	r14, r22
    1650:	f4 2e       	mov	r15, r20
  if (rgblight_config.enable) {
    1652:	20 91 d8 01 	lds	r18, 0x01D8
    1656:	20 ff       	sbrs	r18, 0
    1658:	42 c0       	rjmp	.+132    	; 0x16de <rgblight_sethsv+0x9c>
		if (rgblight_config.mode == 1) {
    165a:	82 2f       	mov	r24, r18
    165c:	8e 77       	andi	r24, 0x7E	; 126
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	21 f4       	brne	.+8      	; 0x166a <rgblight_sethsv+0x28>
			// same static color
			rgblight_sethsv_noeeprom(hue, sat, val);
    1662:	81 2f       	mov	r24, r17
    1664:	0e 94 10 0a 	call	0x1420	; 0x1420 <rgblight_sethsv_noeeprom>
    1668:	1b c0       	rjmp	.+54     	; 0x16a0 <rgblight_sethsv+0x5e>
		} else {
			// all LEDs in same color
			if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
    166a:	92 2f       	mov	r25, r18
    166c:	96 95       	lsr	r25
    166e:	9f 73       	andi	r25, 0x3F	; 63
    1670:	89 2f       	mov	r24, r25
    1672:	82 5c       	subi	r24, 0xC2	; 194
    1674:	8f 73       	andi	r24, 0x3F	; 63
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	18 f4       	brcc	.+6      	; 0x1680 <rgblight_sethsv+0x3e>
				// breathing mode, ignore the change of val, use in memory value instead
				val = rgblight_config.val;
    167a:	f0 90 db 01 	lds	r15, 0x01DB
    167e:	10 c0       	rjmp	.+32     	; 0x16a0 <rgblight_sethsv+0x5e>
			} else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
    1680:	96 5c       	subi	r25, 0xC6	; 198
    1682:	9f 73       	andi	r25, 0x3F	; 63
    1684:	99 30       	cpi	r25, 0x09	; 9
    1686:	60 f4       	brcc	.+24     	; 0x16a0 <rgblight_sethsv+0x5e>
				// rainbow mood and rainbow swirl, ignore the change of hue
				hue = rgblight_config.hue;
    1688:	22 1f       	adc	r18, r18
    168a:	22 27       	eor	r18, r18
    168c:	22 1f       	adc	r18, r18
    168e:	80 91 d9 01 	lds	r24, 0x01D9
    1692:	18 2f       	mov	r17, r24
    1694:	11 0f       	add	r17, r17
    1696:	12 2b       	or	r17, r18
    1698:	08 2f       	mov	r16, r24
    169a:	00 1f       	adc	r16, r16
    169c:	00 27       	eor	r16, r16
    169e:	00 1f       	adc	r16, r16
			}
		}
		rgblight_config.hue = hue;
    16a0:	91 2f       	mov	r25, r17
    16a2:	97 95       	ror	r25
    16a4:	99 27       	eor	r25, r25
    16a6:	97 95       	ror	r25
    16a8:	80 91 d8 01 	lds	r24, 0x01D8
    16ac:	8f 77       	andi	r24, 0x7F	; 127
    16ae:	89 2b       	or	r24, r25
    16b0:	80 93 d8 01 	sts	0x01D8, r24
    16b4:	07 95       	ror	r16
    16b6:	00 27       	eor	r16, r16
    16b8:	07 95       	ror	r16
    16ba:	16 95       	lsr	r17
    16bc:	10 2b       	or	r17, r16
    16be:	10 93 d9 01 	sts	0x01D9, r17
		rgblight_config.sat = sat;
    16c2:	e0 92 da 01 	sts	0x01DA, r14
		rgblight_config.val = val;
    16c6:	f0 92 db 01 	sts	0x01DB, r15
		eeconfig_write_rgblight(rgblight_config.raw);
    16ca:	60 91 d8 01 	lds	r22, 0x01D8
    16ce:	70 91 d9 01 	lds	r23, 0x01D9
    16d2:	80 91 da 01 	lds	r24, 0x01DA
    16d6:	90 91 db 01 	lds	r25, 0x01DB
    16da:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeconfig_write_rgblight>
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	08 95       	ret

000016e8 <rgblight_decrease_val>:
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
}
void rgblight_decrease_val(void) {
	uint8_t val;
  if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
    16e8:	40 91 db 01 	lds	r20, 0x01DB
    16ec:	84 2f       	mov	r24, r20
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	41 97       	sbiw	r24, 0x11	; 17
    16f2:	14 f4       	brge	.+4      	; 0x16f8 <rgblight_decrease_val+0x10>
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <rgblight_decrease_val+0x12>
    val = 0;
  } else {
    val = rgblight_config.val-RGBLIGHT_VAL_STEP;
    16f8:	41 51       	subi	r20, 0x11	; 17
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
    16fa:	20 91 d8 01 	lds	r18, 0x01D8
    16fe:	22 1f       	adc	r18, r18
    1700:	22 27       	eor	r18, r18
    1702:	22 1f       	adc	r18, r18
    1704:	90 91 d9 01 	lds	r25, 0x01D9
    1708:	89 2f       	mov	r24, r25
    170a:	88 0f       	add	r24, r24
    170c:	82 2b       	or	r24, r18
    170e:	99 1f       	adc	r25, r25
    1710:	99 27       	eor	r25, r25
    1712:	99 1f       	adc	r25, r25
    1714:	60 91 da 01 	lds	r22, 0x01DA
    1718:	0e 94 21 0b 	call	0x1642	; 0x1642 <rgblight_sethsv>
}
    171c:	08 95       	ret

0000171e <rgblight_increase_val>:
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_increase_val(void){
	uint8_t val;
  if (rgblight_config.val + RGBLIGHT_VAL_STEP > 255) {
    171e:	40 91 db 01 	lds	r20, 0x01DB
    1722:	84 2f       	mov	r24, r20
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	8f 3e       	cpi	r24, 0xEF	; 239
    1728:	91 05       	cpc	r25, r1
    172a:	14 f0       	brlt	.+4      	; 0x1730 <rgblight_increase_val+0x12>
    172c:	4f ef       	ldi	r20, 0xFF	; 255
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <rgblight_increase_val+0x14>
    val = 255;
  } else {
    val = rgblight_config.val+RGBLIGHT_VAL_STEP;
    1730:	4f 5e       	subi	r20, 0xEF	; 239
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
    1732:	20 91 d8 01 	lds	r18, 0x01D8
    1736:	22 1f       	adc	r18, r18
    1738:	22 27       	eor	r18, r18
    173a:	22 1f       	adc	r18, r18
    173c:	90 91 d9 01 	lds	r25, 0x01D9
    1740:	89 2f       	mov	r24, r25
    1742:	88 0f       	add	r24, r24
    1744:	82 2b       	or	r24, r18
    1746:	99 1f       	adc	r25, r25
    1748:	99 27       	eor	r25, r25
    174a:	99 1f       	adc	r25, r25
    174c:	60 91 da 01 	lds	r22, 0x01DA
    1750:	0e 94 21 0b 	call	0x1642	; 0x1642 <rgblight_sethsv>
}
    1754:	08 95       	ret

00001756 <rgblight_decrease_sat>:
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_decrease_sat(void){
	uint8_t sat;
  if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
    1756:	60 91 da 01 	lds	r22, 0x01DA
    175a:	86 2f       	mov	r24, r22
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	41 97       	sbiw	r24, 0x11	; 17
    1760:	14 f4       	brge	.+4      	; 0x1766 <rgblight_decrease_sat+0x10>
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <rgblight_decrease_sat+0x12>
    sat = 0;
  } else {
    sat = rgblight_config.sat-RGBLIGHT_SAT_STEP;
    1766:	61 51       	subi	r22, 0x11	; 17
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
    1768:	20 91 d8 01 	lds	r18, 0x01D8
    176c:	22 1f       	adc	r18, r18
    176e:	22 27       	eor	r18, r18
    1770:	22 1f       	adc	r18, r18
    1772:	90 91 d9 01 	lds	r25, 0x01D9
    1776:	89 2f       	mov	r24, r25
    1778:	88 0f       	add	r24, r24
    177a:	82 2b       	or	r24, r18
    177c:	99 1f       	adc	r25, r25
    177e:	99 27       	eor	r25, r25
    1780:	99 1f       	adc	r25, r25
    1782:	40 91 db 01 	lds	r20, 0x01DB
    1786:	0e 94 21 0b 	call	0x1642	; 0x1642 <rgblight_sethsv>
}
    178a:	08 95       	ret

0000178c <rgblight_increase_sat>:
	}
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
}
void rgblight_increase_sat(void) {
	uint8_t sat;
  if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
    178c:	60 91 da 01 	lds	r22, 0x01DA
    1790:	86 2f       	mov	r24, r22
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	8f 3e       	cpi	r24, 0xEF	; 239
    1796:	91 05       	cpc	r25, r1
    1798:	14 f0       	brlt	.+4      	; 0x179e <rgblight_increase_sat+0x12>
    179a:	6f ef       	ldi	r22, 0xFF	; 255
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <rgblight_increase_sat+0x14>
    sat = 255;
  } else {
    sat = rgblight_config.sat+RGBLIGHT_SAT_STEP;
    179e:	6f 5e       	subi	r22, 0xEF	; 239
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
    17a0:	20 91 d8 01 	lds	r18, 0x01D8
    17a4:	22 1f       	adc	r18, r18
    17a6:	22 27       	eor	r18, r18
    17a8:	22 1f       	adc	r18, r18
    17aa:	90 91 d9 01 	lds	r25, 0x01D9
    17ae:	89 2f       	mov	r24, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	82 2b       	or	r24, r18
    17b4:	99 1f       	adc	r25, r25
    17b6:	99 27       	eor	r25, r25
    17b8:	99 1f       	adc	r25, r25
    17ba:	40 91 db 01 	lds	r20, 0x01DB
    17be:	0e 94 21 0b 	call	0x1642	; 0x1642 <rgblight_sethsv>
}
    17c2:	08 95       	ret

000017c4 <rgblight_decrease_hue>:
  hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
}
void rgblight_decrease_hue(void){
	uint16_t hue;
	if (rgblight_config.hue-RGBLIGHT_HUE_STEP <0 ) {
    17c4:	80 91 d8 01 	lds	r24, 0x01D8
    17c8:	88 1f       	adc	r24, r24
    17ca:	88 27       	eor	r24, r24
    17cc:	88 1f       	adc	r24, r24
    17ce:	20 91 d9 01 	lds	r18, 0x01D9
    17d2:	92 2f       	mov	r25, r18
    17d4:	99 0f       	add	r25, r25
    17d6:	89 2b       	or	r24, r25
    17d8:	92 2f       	mov	r25, r18
    17da:	99 1f       	adc	r25, r25
    17dc:	99 27       	eor	r25, r25
    17de:	99 1f       	adc	r25, r25
    17e0:	8a 30       	cpi	r24, 0x0A	; 10
    17e2:	91 05       	cpc	r25, r1
    17e4:	1c f4       	brge	.+6      	; 0x17ec <rgblight_decrease_hue+0x28>
		hue = (rgblight_config.hue+360-RGBLIGHT_HUE_STEP) % 360;
    17e6:	82 5a       	subi	r24, 0xA2	; 162
    17e8:	9e 4f       	sbci	r25, 0xFE	; 254
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <rgblight_decrease_hue+0x2a>
	} else {
		hue = (rgblight_config.hue-RGBLIGHT_HUE_STEP) % 360;
    17ec:	0a 97       	sbiw	r24, 0x0a	; 10
    17ee:	68 e6       	ldi	r22, 0x68	; 104
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divmodhi4>
	}
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
    17f6:	60 91 da 01 	lds	r22, 0x01DA
    17fa:	40 91 db 01 	lds	r20, 0x01DB
    17fe:	0e 94 21 0b 	call	0x1642	; 0x1642 <rgblight_sethsv>
}
    1802:	08 95       	ret

00001804 <rgblight_increase_hue>:


void rgblight_increase_hue(void){
	uint16_t hue;
  hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
    1804:	20 91 d8 01 	lds	r18, 0x01D8
    1808:	22 1f       	adc	r18, r18
    180a:	22 27       	eor	r18, r18
    180c:	22 1f       	adc	r18, r18
    180e:	40 91 d9 01 	lds	r20, 0x01D9
    1812:	34 2f       	mov	r19, r20
    1814:	33 0f       	add	r19, r19
    1816:	83 2f       	mov	r24, r19
    1818:	82 2b       	or	r24, r18
    181a:	94 2f       	mov	r25, r20
    181c:	99 1f       	adc	r25, r25
    181e:	99 27       	eor	r25, r25
    1820:	99 1f       	adc	r25, r25
    1822:	0a 96       	adiw	r24, 0x0a	; 10
    1824:	68 e6       	ldi	r22, 0x68	; 104
    1826:	71 e0       	ldi	r23, 0x01	; 1
    1828:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divmodhi4>
    182c:	60 91 da 01 	lds	r22, 0x01DA
    1830:	40 91 db 01 	lds	r20, 0x01DB
    1834:	0e 94 21 0b 	call	0x1642	; 0x1642 <rgblight_sethsv>
}
    1838:	08 95       	ret

0000183a <rgblight_mode>:
  }
	rgblight_mode(mode);
}

void rgblight_mode(uint8_t mode) {
	if (!rgblight_config.enable) {
    183a:	90 91 d8 01 	lds	r25, 0x01D8
    183e:	90 ff       	sbrs	r25, 0
    1840:	3c c0       	rjmp	.+120    	; 0x18ba <rgblight_mode+0x80>
		return;
	}
  if (mode<1) {
    1842:	88 23       	and	r24, r24
    1844:	19 f4       	brne	.+6      	; 0x184c <rgblight_mode+0x12>
		rgblight_config.mode = 1;
    1846:	91 78       	andi	r25, 0x81	; 129
    1848:	92 60       	ori	r25, 0x02	; 2
    184a:	08 c0       	rjmp	.+16     	; 0x185c <rgblight_mode+0x22>
    184c:	91 78       	andi	r25, 0x81	; 129
	} else if (mode > RGBLIGHT_MODES) {
    184e:	88 31       	cpi	r24, 0x18	; 24
    1850:	10 f0       	brcs	.+4      	; 0x1856 <rgblight_mode+0x1c>
		rgblight_config.mode = RGBLIGHT_MODES;
    1852:	9e 62       	ori	r25, 0x2E	; 46
    1854:	03 c0       	rjmp	.+6      	; 0x185c <rgblight_mode+0x22>
	} else {
		rgblight_config.mode = mode;
    1856:	8f 73       	andi	r24, 0x3F	; 63
    1858:	88 0f       	add	r24, r24
    185a:	98 2b       	or	r25, r24
    185c:	90 93 d8 01 	sts	0x01D8, r25
	}
  eeconfig_write_rgblight(rgblight_config.raw);
    1860:	60 91 d8 01 	lds	r22, 0x01D8
    1864:	70 91 d9 01 	lds	r23, 0x01D9
    1868:	80 91 da 01 	lds	r24, 0x01DA
    186c:	90 91 db 01 	lds	r25, 0x01DB
    1870:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeconfig_write_rgblight>
  dprintf("rgblight mode: %u\n", rgblight_config.mode);
	if (rgblight_config.mode == 1) {
    1874:	90 91 d8 01 	lds	r25, 0x01D8
    1878:	89 2f       	mov	r24, r25
    187a:	8e 77       	andi	r24, 0x7E	; 126
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	19 f4       	brne	.+6      	; 0x1886 <rgblight_mode+0x4c>
		rgblight_timer_disable();
    1880:	0e 94 36 08 	call	0x106c	; 0x106c <rgblight_timer_disable>
    1884:	07 c0       	rjmp	.+14     	; 0x1894 <rgblight_mode+0x5a>
	} else if (rgblight_config.mode >=2 && rgblight_config.mode <=23) {
    1886:	96 95       	lsr	r25
    1888:	92 5c       	subi	r25, 0xC2	; 194
    188a:	9f 73       	andi	r25, 0x3F	; 63
    188c:	96 31       	cpi	r25, 0x16	; 22
    188e:	10 f4       	brcc	.+4      	; 0x1894 <rgblight_mode+0x5a>
		// MODE 2-5, breathing
		// MODE 6-8, rainbow mood
		// MODE 9-14, rainbow swirl
		// MODE 15-20, snake
		// MODE 21-23, knight
		rgblight_timer_enable();
    1890:	0e 94 30 08 	call	0x1060	; 0x1060 <rgblight_timer_enable>
	}
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
    1894:	20 91 d8 01 	lds	r18, 0x01D8
    1898:	22 1f       	adc	r18, r18
    189a:	22 27       	eor	r18, r18
    189c:	22 1f       	adc	r18, r18
    189e:	90 91 d9 01 	lds	r25, 0x01D9
    18a2:	89 2f       	mov	r24, r25
    18a4:	88 0f       	add	r24, r24
    18a6:	82 2b       	or	r24, r18
    18a8:	99 1f       	adc	r25, r25
    18aa:	99 27       	eor	r25, r25
    18ac:	99 1f       	adc	r25, r25
    18ae:	60 91 da 01 	lds	r22, 0x01DA
    18b2:	40 91 db 01 	lds	r20, 0x01DB
    18b6:	0e 94 21 0b 	call	0x1642	; 0x1642 <rgblight_sethsv>
    18ba:	08 95       	ret

000018bc <rgblight_step>:
	rgblight_mode(mode);
}

void rgblight_step(void) {
	uint8_t mode;
  mode = rgblight_config.mode + 1;
    18bc:	80 91 d8 01 	lds	r24, 0x01D8
    18c0:	86 95       	lsr	r24
    18c2:	8f 73       	andi	r24, 0x3F	; 63
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
  if (mode > RGBLIGHT_MODES) {
    18c6:	88 31       	cpi	r24, 0x18	; 24
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <rgblight_step+0x10>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    mode = 1;
  }
	rgblight_mode(mode);
    18cc:	0e 94 1d 0c 	call	0x183a	; 0x183a <rgblight_mode>
}
    18d0:	08 95       	ret

000018d2 <rgblight_toggle>:
	}
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
}

void rgblight_toggle(void) {
  rgblight_config.enable ^= 1;
    18d2:	80 91 d8 01 	lds	r24, 0x01D8
    18d6:	98 2f       	mov	r25, r24
    18d8:	90 95       	com	r25
    18da:	91 70       	andi	r25, 0x01	; 1
    18dc:	8e 7f       	andi	r24, 0xFE	; 254
    18de:	89 2b       	or	r24, r25
    18e0:	80 93 d8 01 	sts	0x01D8, r24
  eeconfig_write_rgblight(rgblight_config.raw);
    18e4:	60 91 d8 01 	lds	r22, 0x01D8
    18e8:	70 91 d9 01 	lds	r23, 0x01D9
    18ec:	80 91 da 01 	lds	r24, 0x01DA
    18f0:	90 91 db 01 	lds	r25, 0x01DB
    18f4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeconfig_write_rgblight>
  dprintf("rgblight toggle: rgblight_config.enable = %u\n", rgblight_config.enable);
	if (rgblight_config.enable) {
    18f8:	80 91 d8 01 	lds	r24, 0x01D8
    18fc:	80 ff       	sbrs	r24, 0
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <rgblight_toggle+0x38>
		rgblight_mode(rgblight_config.mode);
    1900:	86 95       	lsr	r24
    1902:	8f 73       	andi	r24, 0x3F	; 63
    1904:	0e 94 1d 0c 	call	0x183a	; 0x183a <rgblight_mode>
    1908:	08 95       	ret
	} else {
		rgblight_timer_disable();
    190a:	0e 94 36 08 	call	0x106c	; 0x106c <rgblight_timer_disable>
    190e:	84 ef       	ldi	r24, 0xF4	; 244
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	20 e9       	ldi	r18, 0x90	; 144
    1914:	31 e0       	ldi	r19, 0x01	; 1
    1916:	f9 01       	movw	r30, r18
    1918:	31 97       	sbiw	r30, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <rgblight_toggle+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191e:	d9 f7       	brne	.-10     	; 0x1916 <rgblight_toggle+0x44>
		_delay_ms(50);
		rgblight_set();
    1920:	0e 94 3c 08 	call	0x1078	; 0x1078 <rgblight_set>
    1924:	08 95       	ret

00001926 <eeconfig_write_rgblight_default>:
}
void eeconfig_write_rgblight_default(void) {
	dprintf("eeconfig_write_rgblight_default\n");
	rgblight_config.enable = 1;
	rgblight_config.mode = 1;
	rgblight_config.hue = 200;
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	80 93 d8 01 	sts	0x01D8, r24
    192c:	84 e6       	ldi	r24, 0x64	; 100
    192e:	80 93 d9 01 	sts	0x01D9, r24
	rgblight_config.sat = 204;
    1932:	8c ec       	ldi	r24, 0xCC	; 204
    1934:	80 93 da 01 	sts	0x01DA, r24
	rgblight_config.val = 204;
    1938:	80 93 db 01 	sts	0x01DB, r24
	eeconfig_write_rgblight(rgblight_config.raw);
    193c:	60 91 d8 01 	lds	r22, 0x01D8
    1940:	70 91 d9 01 	lds	r23, 0x01D9
    1944:	80 91 da 01 	lds	r24, 0x01DA
    1948:	90 91 db 01 	lds	r25, 0x01DB
    194c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeconfig_write_rgblight>
}
    1950:	08 95       	ret

00001952 <eeconfig_read_rgblight>:
  (*led1).b = b;
}


uint32_t eeconfig_read_rgblight(void) {
  return eeprom_read_dword(EECONFIG_RGBLIGHT);
    1952:	87 e0       	ldi	r24, 0x07	; 7
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__eerd_dword_m32u4>
}
    195a:	08 95       	ret

0000195c <rgblight_init>:
	dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
	dprintf("rgblight_config.val = %d\n", rgblight_config.val);
}

void rgblight_init(void) {
  debug_enable = 1; // Debug ON!
    195c:	80 91 af 01 	lds	r24, 0x01AF
    1960:	81 60       	ori	r24, 0x01	; 1
    1962:	80 93 af 01 	sts	0x01AF, r24
	dprintf("rgblight_init called.\n");
  rgblight_inited = 1;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	80 93 3c 01 	sts	0x013C, r24
	dprintf("rgblight_init start!\n");
  if (!eeconfig_is_enabled()) {
    196c:	0e 94 9d 1a 	call	0x353a	; 0x353a <eeconfig_is_enabled>
    1970:	88 23       	and	r24, r24
    1972:	21 f4       	brne	.+8      	; 0x197c <rgblight_init+0x20>
		dprintf("rgblight_init eeconfig is not enabled.\n");
    eeconfig_init();
    1974:	0e 94 a8 1a 	call	0x3550	; 0x3550 <eeconfig_init>
		eeconfig_write_rgblight_default();
    1978:	0e 94 93 0c 	call	0x1926	; 0x1926 <eeconfig_write_rgblight_default>
  }
  rgblight_config.raw = eeconfig_read_rgblight();
    197c:	0e 94 a9 0c 	call	0x1952	; 0x1952 <eeconfig_read_rgblight>
    1980:	60 93 d8 01 	sts	0x01D8, r22
    1984:	70 93 d9 01 	sts	0x01D9, r23
    1988:	80 93 da 01 	sts	0x01DA, r24
    198c:	90 93 db 01 	sts	0x01DB, r25
	if (!rgblight_config.mode) {
    1990:	6e 77       	andi	r22, 0x7E	; 126
    1992:	61 f4       	brne	.+24     	; 0x19ac <rgblight_init+0x50>
		dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
		eeconfig_write_rgblight_default();
    1994:	0e 94 93 0c 	call	0x1926	; 0x1926 <eeconfig_write_rgblight_default>
		rgblight_config.raw = eeconfig_read_rgblight();
    1998:	0e 94 a9 0c 	call	0x1952	; 0x1952 <eeconfig_read_rgblight>
    199c:	60 93 d8 01 	sts	0x01D8, r22
    19a0:	70 93 d9 01 	sts	0x01D9, r23
    19a4:	80 93 da 01 	sts	0x01DA, r24
    19a8:	90 93 db 01 	sts	0x01DB, r25
	}
	eeconfig_debug_rgblight(); // display current eeprom values

	rgblight_timer_init(); // setup the timer
    19ac:	0e 94 1c 08 	call	0x1038	; 0x1038 <rgblight_timer_init>

  if (rgblight_config.enable) {
    19b0:	80 91 d8 01 	lds	r24, 0x01D8
    19b4:	80 ff       	sbrs	r24, 0
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <rgblight_init+0x64>
    rgblight_mode(rgblight_config.mode);
    19b8:	86 95       	lsr	r24
    19ba:	8f 73       	andi	r24, 0x3F	; 63
    19bc:	0e 94 1d 0c 	call	0x183a	; 0x183a <rgblight_mode>
    19c0:	08 95       	ret

000019c2 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    19c2:	90 93 54 01 	sts	0x0154, r25
    19c6:	80 93 53 01 	sts	0x0153, r24
}
    19ca:	08 95       	ret

000019cc <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    19cc:	e0 91 53 01 	lds	r30, 0x0153
    19d0:	f0 91 54 01 	lds	r31, 0x0154
    19d4:	30 97       	sbiw	r30, 0x00	; 0
    19d6:	11 f4       	brne	.+4      	; 0x19dc <host_keyboard_leds+0x10>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	08 95       	ret
    return (*driver->keyboard_leds)();
    19dc:	01 90       	ld	r0, Z+
    19de:	f0 81       	ld	r31, Z
    19e0:	e0 2d       	mov	r30, r0
    19e2:	09 95       	icall
}
    19e4:	08 95       	ret

000019e6 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
    19e6:	e0 91 53 01 	lds	r30, 0x0153
    19ea:	f0 91 54 01 	lds	r31, 0x0154
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	21 f0       	breq	.+8      	; 0x19fa <host_keyboard_send+0x14>
    (*driver->send_keyboard)(report);
    19f2:	02 80       	ldd	r0, Z+2	; 0x02
    19f4:	f3 81       	ldd	r31, Z+3	; 0x03
    19f6:	e0 2d       	mov	r30, r0
    19f8:	09 95       	icall
    19fa:	08 95       	ret

000019fc <host_mouse_send>:
    }
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    19fc:	e0 91 53 01 	lds	r30, 0x0153
    1a00:	f0 91 54 01 	lds	r31, 0x0154
    1a04:	30 97       	sbiw	r30, 0x00	; 0
    1a06:	21 f0       	breq	.+8      	; 0x1a10 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1a08:	04 80       	ldd	r0, Z+4	; 0x04
    1a0a:	f5 81       	ldd	r31, Z+5	; 0x05
    1a0c:	e0 2d       	mov	r30, r0
    1a0e:	09 95       	icall
    1a10:	08 95       	ret

00001a12 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    1a12:	9c 01       	movw	r18, r24
    if (report == last_system_report) return;
    1a14:	80 91 51 01 	lds	r24, 0x0151
    1a18:	90 91 52 01 	lds	r25, 0x0152
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	79 f0       	breq	.+30     	; 0x1a40 <host_system_send+0x2e>
    last_system_report = report;
    1a22:	30 93 52 01 	sts	0x0152, r19
    1a26:	20 93 51 01 	sts	0x0151, r18

    if (!driver) return;
    1a2a:	e0 91 53 01 	lds	r30, 0x0153
    1a2e:	f0 91 54 01 	lds	r31, 0x0154
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	29 f0       	breq	.+10     	; 0x1a40 <host_system_send+0x2e>
    (*driver->send_system)(report);
    1a36:	06 80       	ldd	r0, Z+6	; 0x06
    1a38:	f7 81       	ldd	r31, Z+7	; 0x07
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	c9 01       	movw	r24, r18
    1a3e:	09 95       	icall
    1a40:	08 95       	ret

00001a42 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    1a42:	9c 01       	movw	r18, r24
    if (report == last_consumer_report) return;
    1a44:	80 91 4f 01 	lds	r24, 0x014F
    1a48:	90 91 50 01 	lds	r25, 0x0150
    1a4c:	28 17       	cp	r18, r24
    1a4e:	39 07       	cpc	r19, r25
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <host_consumer_send+0x2e>
    last_consumer_report = report;
    1a52:	30 93 50 01 	sts	0x0150, r19
    1a56:	20 93 4f 01 	sts	0x014F, r18

    if (!driver) return;
    1a5a:	e0 91 53 01 	lds	r30, 0x0153
    1a5e:	f0 91 54 01 	lds	r31, 0x0154
    1a62:	30 97       	sbiw	r30, 0x00	; 0
    1a64:	29 f0       	breq	.+10     	; 0x1a70 <host_consumer_send+0x2e>
    (*driver->send_consumer)(report);
    1a66:	00 84       	ldd	r0, Z+8	; 0x08
    1a68:	f1 85       	ldd	r31, Z+9	; 0x09
    1a6a:	e0 2d       	mov	r30, r0
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	09 95       	icall
    1a70:	08 95       	ret

00001a72 <keyboard_set_leds>:
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    1a72:	0e 94 fd 06 	call	0xdfa	; 0xdfa <led_set>
}
    1a76:	08 95       	ret

00001a78 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1a9a:	0e 94 2b 05 	call	0xa56	; 0xa56 <matrix_scan>
    1a9e:	ee 24       	eor	r14, r14
    1aa0:	ff 24       	eor	r15, r15
    1aa2:	be 2c       	mov	r11, r14
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1aa4:	8e 2d       	mov	r24, r14
    1aa6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <matrix_get_row>
    1aaa:	c8 2e       	mov	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1aac:	f7 01       	movw	r30, r14
    1aae:	ea 5a       	subi	r30, 0xAA	; 170
    1ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab2:	d0 80       	ld	r13, Z
    1ab4:	d8 26       	eor	r13, r24
        if (matrix_change) {
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <keyboard_task+0x42>
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <keyboard_task+0xc0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1aba:	80 91 af 01 	lds	r24, 0x01AF
    1abe:	81 ff       	sbrs	r24, 1
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <keyboard_task+0x4e>
    1ac2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <matrix_print>
    1ac6:	00 e0       	ldi	r16, 0x00	; 0
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1aca:	ed 2d       	mov	r30, r13
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	cf 01       	movw	r24, r30
    1ad0:	00 2e       	mov	r0, r16
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <keyboard_task+0x60>
    1ad4:	95 95       	asr	r25
    1ad6:	87 95       	ror	r24
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <keyboard_task+0x5c>
    1adc:	80 ff       	sbrs	r24, 0
    1ade:	27 c0       	rjmp	.+78     	; 0x1b2e <keyboard_task+0xb6>
                    action_exec((keyevent_t){
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
    1ae0:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    1ae4:	09 83       	std	Y+1, r16	; 0x01
    1ae6:	ba 82       	std	Y+2, r11	; 0x02
    1ae8:	6c 2d       	mov	r22, r12
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	00 2e       	mov	r0, r16
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <keyboard_task+0x7c>
    1af0:	75 95       	asr	r23
    1af2:	67 95       	ror	r22
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <keyboard_task+0x78>
    1af8:	61 70       	andi	r22, 0x01	; 1
    1afa:	70 70       	andi	r23, 0x00	; 0
    1afc:	6b 83       	std	Y+3, r22	; 0x03
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	9d 83       	std	Y+5, r25	; 0x05
    1b02:	8c 83       	std	Y+4, r24	; 0x04
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1b04:	40 2f       	mov	r20, r16
    1b06:	5b 2d       	mov	r21, r11
    1b08:	78 2f       	mov	r23, r24
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	0e 94 a1 11 	call	0x2342	; 0x2342 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1b10:	f7 01       	movw	r30, r14
    1b12:	ea 5a       	subi	r30, 0xAA	; 170
    1b14:	fe 4f       	sbci	r31, 0xFE	; 254
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	00 2e       	mov	r0, r16
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <keyboard_task+0xaa>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <keyboard_task+0xa6>
    1b26:	20 81       	ld	r18, Z
    1b28:	28 27       	eor	r18, r24
    1b2a:	20 83       	st	Z, r18
    1b2c:	1d c0       	rjmp	.+58     	; 0x1b68 <keyboard_task+0xf0>
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    1b2e:	0f 5f       	subi	r16, 0xFF	; 255
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1b32:	06 30       	cpi	r16, 0x06	; 6
    1b34:	11 05       	cpc	r17, r1
    1b36:	59 f6       	brne	.-106    	; 0x1ace <keyboard_task+0x56>
    1b38:	08 94       	sec
    1b3a:	e1 1c       	adc	r14, r1
    1b3c:	f1 1c       	adc	r15, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1b3e:	8e e0       	ldi	r24, 0x0E	; 14
    1b40:	e8 16       	cp	r14, r24
    1b42:	f1 04       	cpc	r15, r1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <keyboard_task+0xd0>
    1b46:	ad cf       	rjmp	.-166    	; 0x1aa2 <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1b48:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    1b4c:	2f ef       	ldi	r18, 0xFF	; 255
    1b4e:	2e 83       	std	Y+6, r18	; 0x06
    1b50:	2f 83       	std	Y+7, r18	; 0x07
    1b52:	18 86       	std	Y+8, r1	; 0x08
    1b54:	81 60       	ori	r24, 0x01	; 1
    1b56:	78 2f       	mov	r23, r24
    1b58:	9a 87       	std	Y+10, r25	; 0x0a
    1b5a:	89 87       	std	Y+9, r24	; 0x09
    1b5c:	4f ef       	ldi	r20, 0xFF	; 255
    1b5e:	5f ef       	ldi	r21, 0xFF	; 255
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b64:	0e 94 a1 11 	call	0x2342	; 0x2342 <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    1b68:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1b6c:	10 91 55 01 	lds	r17, 0x0155
    1b70:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1b74:	18 17       	cp	r17, r24
    1b76:	31 f0       	breq	.+12     	; 0x1b84 <keyboard_task+0x10c>
        led_status = host_keyboard_leds();
    1b78:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1b7c:	80 93 55 01 	sts	0x0155, r24
        keyboard_set_leds(led_status);
    1b80:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <keyboard_set_leds>
    }
}
    1b84:	2a 96       	adiw	r28, 0x0a	; 10
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	bf 90       	pop	r11
    1ba2:	08 95       	ret

00001ba4 <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    1ba4:	0e 94 12 18 	call	0x3024	; 0x3024 <timer_init>
    matrix_init();
    1ba8:	0e 94 5e 05 	call	0xabc	; 0xabc <matrix_init>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    1bac:	08 95       	ret

00001bae <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <debug_event+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <debug_event+0x8>
    1bb6:	0f 92       	push	r0
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <debug_record>:

void debug_record(keyrecord_t record)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <debug_record+0x6>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <debug_record+0x8>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <debug_record+0xa>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    1bda:	26 96       	adiw	r28, 0x06	; 6
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    1bec:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <layer_switch_get_action>
    1bf0:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    1bf2:	89 2f       	mov	r24, r25
    1bf4:	82 95       	swap	r24
    1bf6:	8f 70       	andi	r24, 0x0F	; 15
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	2c 30       	cpi	r18, 0x0C	; 12
    1bfe:	31 05       	cpc	r19, r1
    1c00:	4c f4       	brge	.+18     	; 0x1c14 <is_tap_key+0x28>
    1c02:	2a 30       	cpi	r18, 0x0A	; 10
    1c04:	31 05       	cpc	r19, r1
    1c06:	6c f4       	brge	.+26     	; 0x1c22 <is_tap_key+0x36>
    1c08:	22 50       	subi	r18, 0x02	; 2
    1c0a:	30 40       	sbci	r19, 0x00	; 0
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	c0 f4       	brcc	.+48     	; 0x1c42 <is_tap_key+0x56>
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <is_tap_key+0x36>
    1c14:	2c 30       	cpi	r18, 0x0C	; 12
    1c16:	31 05       	cpc	r19, r1
    1c18:	51 f0       	breq	.+20     	; 0x1c2e <is_tap_key+0x42>
    1c1a:	2f 30       	cpi	r18, 0x0F	; 15
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	89 f4       	brne	.+34     	; 0x1c42 <is_tap_key+0x56>
    1c20:	06 c0       	rjmp	.+12     	; 0x1c2e <is_tap_key+0x42>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1c22:	40 3e       	cpi	r20, 0xE0	; 224
    1c24:	10 f0       	brcs	.+4      	; 0x1c2a <is_tap_key+0x3e>
    1c26:	40 3f       	cpi	r20, 0xF0	; 240
    1c28:	61 f4       	brne	.+24     	; 0x1c42 <is_tap_key+0x56>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	08 95       	ret
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    1c2e:	9f 70       	andi	r25, 0x0F	; 15
    1c30:	89 2f       	mov	r24, r25
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	23 e0       	ldi	r18, 0x03	; 3
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
    1c3a:	2a 95       	dec	r18
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <is_tap_key+0x4a>
    1c3e:	81 70       	andi	r24, 0x01	; 1
    1c40:	08 95       	ret
    1c42:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return false;
}
    1c44:	08 95       	ret

00001c46 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    1c46:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <clear_weak_mods>
    clear_keys();
    1c4a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <clear_keys>
    send_keyboard_report();
    1c4e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    1c52:	0e 94 e5 19 	call	0x33ca	; 0x33ca <mousekey_clear>
    mousekey_send();
    1c56:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <host_system_send>
    host_consumer_send(0);
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <host_consumer_send>
#endif
}
    1c6a:	08 95       	ret

00001c6c <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    1c6c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <clear_mods>
    clear_keyboard_but_mods();
    1c70:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <clear_keyboard_but_mods>
}
    1c74:	08 95       	ret

00001c76 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    1c76:	88 23       	and	r24, r24
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <unregister_mods+0xc>
        del_mods(mods);
    1c7a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <del_mods>
        send_keyboard_report();
    1c7e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
    1c82:	08 95       	ret

00001c84 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    1c84:	88 23       	and	r24, r24
    1c86:	21 f0       	breq	.+8      	; 0x1c90 <register_mods+0xc>
        add_mods(mods);
    1c88:	0e 94 89 17 	call	0x2f12	; 0x2f12 <add_mods>
        send_keyboard_report();
    1c8c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
    1c90:	08 95       	ret

00001c92 <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
    1c92:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    1c94:	88 23       	and	r24, r24
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <unregister_code+0x8>
    1c98:	4e c0       	rjmp	.+156    	; 0x1d36 <unregister_code+0xa4>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    1c9a:	82 38       	cpi	r24, 0x82	; 130
    1c9c:	59 f4       	brne	.+22     	; 0x1cb4 <unregister_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    1c9e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1ca2:	81 ff       	sbrs	r24, 1
    1ca4:	48 c0       	rjmp	.+144    	; 0x1d36 <unregister_code+0xa4>
#endif
        add_key(KC_CAPSLOCK);
    1ca6:	89 e3       	ldi	r24, 0x39	; 57
    1ca8:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <add_key>
        send_keyboard_report();
    1cac:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    1cb0:	89 e3       	ldi	r24, 0x39	; 57
    1cb2:	0c c0       	rjmp	.+24     	; 0x1ccc <unregister_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    1cb4:	83 38       	cpi	r24, 0x83	; 131
    1cb6:	69 f4       	brne	.+26     	; 0x1cd2 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    1cb8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1cbc:	80 ff       	sbrs	r24, 0
    1cbe:	3b c0       	rjmp	.+118    	; 0x1d36 <unregister_code+0xa4>
#endif
        add_key(KC_NUMLOCK);
    1cc0:	83 e5       	ldi	r24, 0x53	; 83
    1cc2:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <add_key>
        send_keyboard_report();
    1cc6:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    1cca:	83 e5       	ldi	r24, 0x53	; 83
    1ccc:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <del_key>
    1cd0:	1f c0       	rjmp	.+62     	; 0x1d10 <unregister_code+0x7e>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    1cd2:	84 38       	cpi	r24, 0x84	; 132
    1cd4:	59 f4       	brne	.+22     	; 0x1cec <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    1cd6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1cda:	82 ff       	sbrs	r24, 2
    1cdc:	2c c0       	rjmp	.+88     	; 0x1d36 <unregister_code+0xa4>
#endif
        add_key(KC_SCROLLLOCK);
    1cde:	87 e4       	ldi	r24, 0x47	; 71
    1ce0:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <add_key>
        send_keyboard_report();
    1ce4:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    1ce8:	87 e4       	ldi	r24, 0x47	; 71
    1cea:	f0 cf       	rjmp	.-32     	; 0x1ccc <unregister_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1cec:	84 50       	subi	r24, 0x04	; 4
    1cee:	81 3a       	cpi	r24, 0xA1	; 161
    1cf0:	10 f4       	brcc	.+4      	; 0x1cf6 <unregister_code+0x64>
        del_key(code);
    1cf2:	82 2f       	mov	r24, r18
    1cf4:	eb cf       	rjmp	.-42     	; 0x1ccc <unregister_code+0x3a>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    1cf6:	82 2f       	mov	r24, r18
    1cf8:	80 5e       	subi	r24, 0xE0	; 224
    1cfa:	88 30       	cpi	r24, 0x08	; 8
    1cfc:	60 f4       	brcc	.+24     	; 0x1d16 <unregister_code+0x84>
        del_mods(MOD_BIT(code));
    1cfe:	27 70       	andi	r18, 0x07	; 7
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <unregister_code+0x76>
    1d06:	88 0f       	add	r24, r24
    1d08:	2a 95       	dec	r18
    1d0a:	ea f7       	brpl	.-6      	; 0x1d06 <unregister_code+0x74>
    1d0c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <del_mods>
        send_keyboard_report();
    1d10:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
    1d14:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    1d16:	82 2f       	mov	r24, r18
    1d18:	85 5a       	subi	r24, 0xA5	; 165
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	28 f4       	brcc	.+10     	; 0x1d28 <unregister_code+0x96>
        host_system_send(0);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <host_system_send>
    1d26:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    1d28:	28 5a       	subi	r18, 0xA8	; 168
    1d2a:	23 31       	cpi	r18, 0x13	; 19
    1d2c:	20 f4       	brcc	.+8      	; 0x1d36 <unregister_code+0xa4>
        host_consumer_send(0);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <host_consumer_send>
    1d36:	08 95       	ret

00001d38 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    1d38:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    1d3a:	88 23       	and	r24, r24
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <register_code+0x8>
    1d3e:	ca c0       	rjmp	.+404    	; 0x1ed4 <register_code+0x19c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    1d40:	82 38       	cpi	r24, 0x82	; 130
    1d42:	59 f4       	brne	.+22     	; 0x1d5a <register_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    1d44:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1d48:	81 fd       	sbrc	r24, 1
    1d4a:	c4 c0       	rjmp	.+392    	; 0x1ed4 <register_code+0x19c>
#endif
        add_key(KC_CAPSLOCK);
    1d4c:	89 e3       	ldi	r24, 0x39	; 57
    1d4e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <add_key>
        send_keyboard_report();
    1d52:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    1d56:	89 e3       	ldi	r24, 0x39	; 57
    1d58:	0c c0       	rjmp	.+24     	; 0x1d72 <register_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    1d5a:	83 38       	cpi	r24, 0x83	; 131
    1d5c:	69 f4       	brne	.+26     	; 0x1d78 <register_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    1d5e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1d62:	80 fd       	sbrc	r24, 0
    1d64:	b7 c0       	rjmp	.+366    	; 0x1ed4 <register_code+0x19c>
#endif
        add_key(KC_NUMLOCK);
    1d66:	83 e5       	ldi	r24, 0x53	; 83
    1d68:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <add_key>
        send_keyboard_report();
    1d6c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    1d70:	83 e5       	ldi	r24, 0x53	; 83
    1d72:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <del_key>
    1d76:	21 c0       	rjmp	.+66     	; 0x1dba <register_code+0x82>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    1d78:	84 38       	cpi	r24, 0x84	; 132
    1d7a:	59 f4       	brne	.+22     	; 0x1d92 <register_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    1d7c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <host_keyboard_leds>
    1d80:	82 fd       	sbrc	r24, 2
    1d82:	a8 c0       	rjmp	.+336    	; 0x1ed4 <register_code+0x19c>
#endif
        add_key(KC_SCROLLLOCK);
    1d84:	87 e4       	ldi	r24, 0x47	; 71
    1d86:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <add_key>
        send_keyboard_report();
    1d8a:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    1d8e:	87 e4       	ldi	r24, 0x47	; 71
    1d90:	f0 cf       	rjmp	.-32     	; 0x1d72 <register_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1d92:	84 50       	subi	r24, 0x04	; 4
    1d94:	81 3a       	cpi	r24, 0xA1	; 161
    1d96:	20 f4       	brcc	.+8      	; 0x1da0 <register_code+0x68>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    1d98:	82 2f       	mov	r24, r18
    1d9a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <add_key>
    1d9e:	0d c0       	rjmp	.+26     	; 0x1dba <register_code+0x82>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    1da0:	82 2f       	mov	r24, r18
    1da2:	80 5e       	subi	r24, 0xE0	; 224
    1da4:	88 30       	cpi	r24, 0x08	; 8
    1da6:	60 f4       	brcc	.+24     	; 0x1dc0 <register_code+0x88>
        add_mods(MOD_BIT(code));
    1da8:	27 70       	andi	r18, 0x07	; 7
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <register_code+0x7a>
    1db0:	88 0f       	add	r24, r24
    1db2:	2a 95       	dec	r18
    1db4:	ea f7       	brpl	.-6      	; 0x1db0 <register_code+0x78>
    1db6:	0e 94 89 17 	call	0x2f12	; 0x2f12 <add_mods>
        send_keyboard_report();
    1dba:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
    1dbe:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    1dc0:	82 2f       	mov	r24, r18
    1dc2:	85 5a       	subi	r24, 0xA5	; 165
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	a0 f4       	brcc	.+40     	; 0x1df0 <register_code+0xb8>
        host_system_send(KEYCODE2SYSTEM(code));
    1dc8:	25 3a       	cpi	r18, 0xA5	; 165
    1dca:	19 f4       	brne	.+6      	; 0x1dd2 <register_code+0x9a>
    1dcc:	81 e8       	ldi	r24, 0x81	; 129
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0c c0       	rjmp	.+24     	; 0x1dea <register_code+0xb2>
    1dd2:	26 3a       	cpi	r18, 0xA6	; 166
    1dd4:	19 f4       	brne	.+6      	; 0x1ddc <register_code+0xa4>
    1dd6:	82 e8       	ldi	r24, 0x82	; 130
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	07 c0       	rjmp	.+14     	; 0x1dea <register_code+0xb2>
    1ddc:	27 3a       	cpi	r18, 0xA7	; 167
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <register_code+0xae>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <register_code+0xb2>
    1de6:	83 e8       	ldi	r24, 0x83	; 131
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <host_system_send>
    1dee:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    1df0:	82 2f       	mov	r24, r18
    1df2:	88 5a       	subi	r24, 0xA8	; 168
    1df4:	83 31       	cpi	r24, 0x13	; 19
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <register_code+0xc2>
    1df8:	6d c0       	rjmp	.+218    	; 0x1ed4 <register_code+0x19c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    1dfa:	28 3a       	cpi	r18, 0xA8	; 168
    1dfc:	19 f4       	brne	.+6      	; 0x1e04 <register_code+0xcc>
    1dfe:	82 ee       	ldi	r24, 0xE2	; 226
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	66 c0       	rjmp	.+204    	; 0x1ed0 <register_code+0x198>
    1e04:	29 3a       	cpi	r18, 0xA9	; 169
    1e06:	19 f4       	brne	.+6      	; 0x1e0e <register_code+0xd6>
    1e08:	89 ee       	ldi	r24, 0xE9	; 233
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	61 c0       	rjmp	.+194    	; 0x1ed0 <register_code+0x198>
    1e0e:	2a 3a       	cpi	r18, 0xAA	; 170
    1e10:	19 f4       	brne	.+6      	; 0x1e18 <register_code+0xe0>
    1e12:	8a ee       	ldi	r24, 0xEA	; 234
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	5c c0       	rjmp	.+184    	; 0x1ed0 <register_code+0x198>
    1e18:	2b 3a       	cpi	r18, 0xAB	; 171
    1e1a:	19 f4       	brne	.+6      	; 0x1e22 <register_code+0xea>
    1e1c:	85 eb       	ldi	r24, 0xB5	; 181
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	57 c0       	rjmp	.+174    	; 0x1ed0 <register_code+0x198>
    1e22:	2c 3a       	cpi	r18, 0xAC	; 172
    1e24:	19 f4       	brne	.+6      	; 0x1e2c <register_code+0xf4>
    1e26:	86 eb       	ldi	r24, 0xB6	; 182
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	52 c0       	rjmp	.+164    	; 0x1ed0 <register_code+0x198>
    1e2c:	2b 3b       	cpi	r18, 0xBB	; 187
    1e2e:	19 f4       	brne	.+6      	; 0x1e36 <register_code+0xfe>
    1e30:	83 eb       	ldi	r24, 0xB3	; 179
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	4d c0       	rjmp	.+154    	; 0x1ed0 <register_code+0x198>
    1e36:	2c 3b       	cpi	r18, 0xBC	; 188
    1e38:	19 f4       	brne	.+6      	; 0x1e40 <register_code+0x108>
    1e3a:	84 eb       	ldi	r24, 0xB4	; 180
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	48 c0       	rjmp	.+144    	; 0x1ed0 <register_code+0x198>
    1e40:	2d 3a       	cpi	r18, 0xAD	; 173
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <register_code+0x112>
    1e44:	87 eb       	ldi	r24, 0xB7	; 183
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	43 c0       	rjmp	.+134    	; 0x1ed0 <register_code+0x198>
    1e4a:	20 3b       	cpi	r18, 0xB0	; 176
    1e4c:	19 f4       	brne	.+6      	; 0x1e54 <register_code+0x11c>
    1e4e:	8c ec       	ldi	r24, 0xCC	; 204
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	3e c0       	rjmp	.+124    	; 0x1ed0 <register_code+0x198>
    1e54:	2e 3a       	cpi	r18, 0xAE	; 174
    1e56:	19 f4       	brne	.+6      	; 0x1e5e <register_code+0x126>
    1e58:	8d ec       	ldi	r24, 0xCD	; 205
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	39 c0       	rjmp	.+114    	; 0x1ed0 <register_code+0x198>
    1e5e:	2f 3a       	cpi	r18, 0xAF	; 175
    1e60:	19 f4       	brne	.+6      	; 0x1e68 <register_code+0x130>
    1e62:	83 e8       	ldi	r24, 0x83	; 131
    1e64:	91 e0       	ldi	r25, 0x01	; 1
    1e66:	34 c0       	rjmp	.+104    	; 0x1ed0 <register_code+0x198>
    1e68:	21 3b       	cpi	r18, 0xB1	; 177
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <register_code+0x13a>
    1e6c:	8a e8       	ldi	r24, 0x8A	; 138
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	2f c0       	rjmp	.+94     	; 0x1ed0 <register_code+0x198>
    1e72:	22 3b       	cpi	r18, 0xB2	; 178
    1e74:	19 f4       	brne	.+6      	; 0x1e7c <register_code+0x144>
    1e76:	82 e9       	ldi	r24, 0x92	; 146
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	2a c0       	rjmp	.+84     	; 0x1ed0 <register_code+0x198>
    1e7c:	23 3b       	cpi	r18, 0xB3	; 179
    1e7e:	19 f4       	brne	.+6      	; 0x1e86 <register_code+0x14e>
    1e80:	84 e9       	ldi	r24, 0x94	; 148
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	25 c0       	rjmp	.+74     	; 0x1ed0 <register_code+0x198>
    1e86:	24 3b       	cpi	r18, 0xB4	; 180
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <register_code+0x158>
    1e8a:	81 e2       	ldi	r24, 0x21	; 33
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	20 c0       	rjmp	.+64     	; 0x1ed0 <register_code+0x198>
    1e90:	25 3b       	cpi	r18, 0xB5	; 181
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <register_code+0x162>
    1e94:	83 e2       	ldi	r24, 0x23	; 35
    1e96:	92 e0       	ldi	r25, 0x02	; 2
    1e98:	1b c0       	rjmp	.+54     	; 0x1ed0 <register_code+0x198>
    1e9a:	26 3b       	cpi	r18, 0xB6	; 182
    1e9c:	19 f4       	brne	.+6      	; 0x1ea4 <register_code+0x16c>
    1e9e:	84 e2       	ldi	r24, 0x24	; 36
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	16 c0       	rjmp	.+44     	; 0x1ed0 <register_code+0x198>
    1ea4:	27 3b       	cpi	r18, 0xB7	; 183
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <register_code+0x176>
    1ea8:	85 e2       	ldi	r24, 0x25	; 37
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	11 c0       	rjmp	.+34     	; 0x1ed0 <register_code+0x198>
    1eae:	28 3b       	cpi	r18, 0xB8	; 184
    1eb0:	19 f4       	brne	.+6      	; 0x1eb8 <register_code+0x180>
    1eb2:	86 e2       	ldi	r24, 0x26	; 38
    1eb4:	92 e0       	ldi	r25, 0x02	; 2
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <register_code+0x198>
    1eb8:	29 3b       	cpi	r18, 0xB9	; 185
    1eba:	19 f4       	brne	.+6      	; 0x1ec2 <register_code+0x18a>
    1ebc:	87 e2       	ldi	r24, 0x27	; 39
    1ebe:	92 e0       	ldi	r25, 0x02	; 2
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <register_code+0x198>
    1ec2:	2a 3b       	cpi	r18, 0xBA	; 186
    1ec4:	19 f0       	breq	.+6      	; 0x1ecc <register_code+0x194>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <register_code+0x198>
    1ecc:	8a e2       	ldi	r24, 0x2A	; 42
    1ece:	92 e0       	ldi	r25, 0x02	; 2
    1ed0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <host_consumer_send>
    1ed4:	08 95       	ret

00001ed6 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	2a 97       	sbiw	r28, 0x0a	; 10
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    1efc:	de 01       	movw	r26, r28
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	fc 01       	movw	r30, r24
    1f02:	85 e0       	ldi	r24, 0x05	; 5
    1f04:	01 90       	ld	r0, Z+
    1f06:	0d 92       	st	X+, r0
    1f08:	81 50       	subi	r24, 0x01	; 1
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <process_action+0x2e>
    1f0c:	0b 81       	ldd	r16, Y+3	; 0x03
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    1f0e:	f5 01       	movw	r30, r10
    1f10:	f5 80       	ldd	r15, Z+5	; 0x05
    1f12:	f2 94       	swap	r15
    1f14:	4f e0       	ldi	r20, 0x0F	; 15
    1f16:	f4 22       	and	r15, r20
#endif

    if (IS_NOEVENT(event)) { return; }
    1f18:	de 01       	movw	r26, r28
    1f1a:	16 96       	adiw	r26, 0x06	; 6
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	31 96       	adiw	r30, 0x01	; 1
    1f20:	85 e0       	ldi	r24, 0x05	; 5
    1f22:	01 90       	ld	r0, Z+
    1f24:	0d 92       	st	X+, r0
    1f26:	81 50       	subi	r24, 0x01	; 1
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <process_action+0x4c>
    1f2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f2c:	2f 81       	ldd	r18, Y+7	; 0x07

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	89 2b       	or	r24, r25
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <process_action+0x62>
    1f36:	f4 c1       	rjmp	.+1000   	; 0x2320 <process_action+0x44a>
    1f38:	2f 3f       	cpi	r18, 0xFF	; 255
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <process_action+0x68>
    1f3c:	c4 c1       	rjmp	.+904    	; 0x22c6 <process_action+0x3f0>
    1f3e:	3f 3f       	cpi	r19, 0xFF	; 255
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <process_action+0x6e>
    1f42:	c1 c1       	rjmp	.+898    	; 0x22c6 <process_action+0x3f0>
    1f44:	ed c1       	rjmp	.+986    	; 0x2320 <process_action+0x44a>
    1f46:	8d 2d       	mov	r24, r13
    1f48:	8f 70       	andi	r24, 0x0F	; 15
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
    1f4a:	22 23       	and	r18, r18
    1f4c:	11 f4       	brne	.+4      	; 0x1f52 <process_action+0x7c>
    1f4e:	18 2f       	mov	r17, r24
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <process_action+0x82>
    1f52:	18 2f       	mov	r17, r24
    1f54:	12 95       	swap	r17
    1f56:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    1f58:	00 23       	and	r16, r16
    1f5a:	49 f0       	breq	.+18     	; 0x1f6e <process_action+0x98>
                    if (mods) {
    1f5c:	11 23       	and	r17, r17
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <process_action+0x8c>
    1f60:	8c c1       	rjmp	.+792    	; 0x227a <process_action+0x3a4>
                        add_weak_mods(mods);
    1f62:	81 2f       	mov	r24, r17
    1f64:	0e 94 99 17 	call	0x2f32	; 0x2f32 <add_weak_mods>
                        send_keyboard_report();
    1f68:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
    1f6c:	86 c1       	rjmp	.+780    	; 0x227a <process_action+0x3a4>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    1f6e:	8c 2d       	mov	r24, r12
    1f70:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <unregister_code>
                    if (mods) {
    1f74:	11 23       	and	r17, r17
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <process_action+0xa4>
    1f78:	d3 c1       	rjmp	.+934    	; 0x2320 <process_action+0x44a>
                        del_weak_mods(mods);
    1f7a:	81 2f       	mov	r24, r17
    1f7c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <del_weak_mods>
                        send_keyboard_report();
    1f80:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <send_keyboard_report>
    1f84:	cd c1       	rjmp	.+922    	; 0x2320 <process_action+0x44a>
    1f86:	8d 2d       	mov	r24, r13
    1f88:	8f 70       	andi	r24, 0x0F	; 15
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
                                                                    action.key.mods<<4;
    1f8a:	20 32       	cpi	r18, 0x20	; 32
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <process_action+0xbc>
    1f8e:	18 2f       	mov	r17, r24
    1f90:	03 c0       	rjmp	.+6      	; 0x1f98 <process_action+0xc2>
    1f92:	18 2f       	mov	r17, r24
    1f94:	12 95       	swap	r17
    1f96:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.layer_tap.code) {
    1f98:	cc 20       	and	r12, r12
    1f9a:	21 f0       	breq	.+8      	; 0x1fa4 <process_action+0xce>
    1f9c:	f1 e0       	ldi	r31, 0x01	; 1
    1f9e:	cf 16       	cp	r12, r31
    1fa0:	09 f5       	brne	.+66     	; 0x1fe4 <process_action+0x10e>
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <process_action+0xf6>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    1fa4:	00 23       	and	r16, r16
    1fa6:	49 f0       	breq	.+18     	; 0x1fba <process_action+0xe4>
                            if (tap_count == 0) {
    1fa8:	ff 20       	and	r15, r15
    1faa:	31 f1       	breq	.+76     	; 0x1ff8 <process_action+0x122>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1fac:	21 e0       	ldi	r18, 0x01	; 1
    1fae:	f2 16       	cp	r15, r18
    1fb0:	19 f5       	brne	.+70     	; 0x1ff8 <process_action+0x122>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1fb2:	81 2f       	mov	r24, r17
    1fb4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <set_oneshot_mods>
    1fb8:	b3 c1       	rjmp	.+870    	; 0x2320 <process_action+0x44a>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1fba:	ff 20       	and	r15, r15
    1fbc:	21 f0       	breq	.+8      	; 0x1fc6 <process_action+0xf0>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	f8 16       	cp	r15, r24
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <process_action+0xf0>
    1fc4:	ad c1       	rjmp	.+858    	; 0x2320 <process_action+0x44a>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    1fc6:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <clear_oneshot_mods>
    1fca:	2b c1       	rjmp	.+598    	; 0x2222 <process_action+0x34c>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    1fcc:	00 23       	and	r16, r16
    1fce:	29 f0       	breq	.+10     	; 0x1fda <process_action+0x104>
                            if (tap_count <= TAPPING_TOGGLE) {
    1fd0:	e5 e0       	ldi	r30, 0x05	; 5
    1fd2:	ef 15       	cp	r30, r15
    1fd4:	08 f4       	brcc	.+2      	; 0x1fd8 <process_action+0x102>
    1fd6:	a4 c1       	rjmp	.+840    	; 0x2320 <process_action+0x44a>
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <process_action+0x122>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    1fda:	f4 e0       	ldi	r31, 0x04	; 4
    1fdc:	ff 15       	cp	r31, r15
    1fde:	08 f4       	brcc	.+2      	; 0x1fe2 <process_action+0x10c>
    1fe0:	9f c1       	rjmp	.+830    	; 0x2320 <process_action+0x44a>
    1fe2:	1f c1       	rjmp	.+574    	; 0x2222 <process_action+0x34c>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    1fe4:	00 23       	and	r16, r16
    1fe6:	61 f0       	breq	.+24     	; 0x2000 <process_action+0x12a>
                            if (tap_count > 0) {
    1fe8:	ff 20       	and	r15, r15
    1fea:	31 f0       	breq	.+12     	; 0x1ff8 <process_action+0x122>
                                if (record->tap.interrupted) {
    1fec:	f5 01       	movw	r30, r10
    1fee:	85 81       	ldd	r24, Z+5	; 0x05
    1ff0:	80 ff       	sbrs	r24, 0
    1ff2:	43 c1       	rjmp	.+646    	; 0x227a <process_action+0x3a4>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    1ff4:	8f 70       	andi	r24, 0x0F	; 15
    1ff6:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    1ff8:	81 2f       	mov	r24, r17
    1ffa:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <register_mods>
    1ffe:	90 c1       	rjmp	.+800    	; 0x2320 <process_action+0x44a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2000:	ff 20       	and	r15, r15
    2002:	09 f4       	brne	.+2      	; 0x2006 <process_action+0x130>
    2004:	0e c1       	rjmp	.+540    	; 0x2222 <process_action+0x34c>
    2006:	44 c1       	rjmp	.+648    	; 0x2290 <process_action+0x3ba>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2008:	8d 2d       	mov	r24, r13
    200a:	86 95       	lsr	r24
    200c:	86 95       	lsr	r24
    200e:	83 70       	andi	r24, 0x03	; 3
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	21 f0       	breq	.+8      	; 0x201e <process_action+0x148>
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	09 f0       	breq	.+2      	; 0x201c <process_action+0x146>
    201a:	82 c1       	rjmp	.+772    	; 0x2320 <process_action+0x44a>
    201c:	0a c0       	rjmp	.+20     	; 0x2032 <process_action+0x15c>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    201e:	00 23       	and	r16, r16
    2020:	19 f0       	breq	.+6      	; 0x2028 <process_action+0x152>
                        host_system_send(action.usage.code);
    2022:	c6 01       	movw	r24, r12
    2024:	93 70       	andi	r25, 0x03	; 3
    2026:	02 c0       	rjmp	.+4      	; 0x202c <process_action+0x156>
                    } else {
                        host_system_send(0);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <host_system_send>
    2030:	77 c1       	rjmp	.+750    	; 0x2320 <process_action+0x44a>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2032:	00 23       	and	r16, r16
    2034:	19 f0       	breq	.+6      	; 0x203c <process_action+0x166>
                        host_consumer_send(action.usage.code);
    2036:	c6 01       	movw	r24, r12
    2038:	93 70       	andi	r25, 0x03	; 3
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <process_action+0x16a>
                    } else {
                        host_consumer_send(0);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <host_consumer_send>
    2044:	6d c1       	rjmp	.+730    	; 0x2320 <process_action+0x44a>
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2046:	00 23       	and	r16, r16
    2048:	21 f0       	breq	.+8      	; 0x2052 <process_action+0x17c>
                mousekey_on(action.key.code);
    204a:	8c 2d       	mov	r24, r12
    204c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <mousekey_on>
    2050:	03 c0       	rjmp	.+6      	; 0x2058 <process_action+0x182>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2052:	8c 2d       	mov	r24, r12
    2054:	0e 94 5d 19 	call	0x32ba	; 0x32ba <mousekey_off>
                mousekey_send();
    2058:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <mousekey_send>
    205c:	61 c1       	rjmp	.+706    	; 0x2320 <process_action+0x44a>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    205e:	8d 2d       	mov	r24, r13
    2060:	83 70       	andi	r24, 0x03	; 3
    2062:	09 f0       	breq	.+2      	; 0x2066 <process_action+0x190>
    2064:	5e c0       	rjmp	.+188    	; 0x2122 <process_action+0x24c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2066:	00 23       	and	r16, r16
    2068:	09 f0       	breq	.+2      	; 0x206c <process_action+0x196>
    206a:	5a c1       	rjmp	.+692    	; 0x2320 <process_action+0x44a>
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    206c:	2c 2d       	mov	r18, r12
    206e:	22 95       	swap	r18
    2070:	26 95       	lsr	r18
    2072:	27 70       	andi	r18, 0x07	; 7
    2074:	22 0f       	add	r18, r18
    2076:	22 0f       	add	r18, r18
    2078:	8c 2d       	mov	r24, r12
    207a:	8f 70       	andi	r24, 0x0F	; 15
    207c:	e8 2e       	mov	r14, r24
    207e:	ff 24       	eor	r15, r15
    2080:	00 e0       	ldi	r16, 0x00	; 0
    2082:	10 e0       	ldi	r17, 0x00	; 0
    2084:	02 2e       	mov	r0, r18
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <process_action+0x1ba>
    2088:	ee 0c       	add	r14, r14
    208a:	ff 1c       	adc	r15, r15
    208c:	00 1f       	adc	r16, r16
    208e:	11 1f       	adc	r17, r17
    2090:	0a 94       	dec	r0
    2092:	d2 f7       	brpl	.-12     	; 0x2088 <process_action+0x1b2>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2094:	c4 fc       	sbrc	r12, 4
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <process_action+0x1cc>
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <process_action+0x1ea>
    20a2:	6f e0       	ldi	r22, 0x0F	; 15
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <process_action+0x1de>
    20ac:	66 0f       	add	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	2a 95       	dec	r18
    20b6:	d2 f7       	brpl	.-12     	; 0x20ac <process_action+0x1d6>
    20b8:	60 95       	com	r22
    20ba:	70 95       	com	r23
    20bc:	80 95       	com	r24
    20be:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    20c0:	d6 94       	lsr	r13
    20c2:	d6 94       	lsr	r13
    20c4:	f3 e0       	ldi	r31, 0x03	; 3
    20c6:	df 22       	and	r13, r31
    20c8:	4d 2d       	mov	r20, r13
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	41 30       	cpi	r20, 0x01	; 1
    20ce:	51 05       	cpc	r21, r1
    20d0:	a9 f0       	breq	.+42     	; 0x20fc <process_action+0x226>
    20d2:	42 30       	cpi	r20, 0x02	; 2
    20d4:	51 05       	cpc	r21, r1
    20d6:	1c f4       	brge	.+6      	; 0x20de <process_action+0x208>
    20d8:	45 2b       	or	r20, r21
    20da:	49 f0       	breq	.+18     	; 0x20ee <process_action+0x218>
    20dc:	21 c1       	rjmp	.+578    	; 0x2320 <process_action+0x44a>
    20de:	42 30       	cpi	r20, 0x02	; 2
    20e0:	51 05       	cpc	r21, r1
    20e2:	89 f0       	breq	.+34     	; 0x2106 <process_action+0x230>
    20e4:	43 30       	cpi	r20, 0x03	; 3
    20e6:	51 05       	cpc	r21, r1
    20e8:	09 f0       	breq	.+2      	; 0x20ec <process_action+0x216>
    20ea:	1a c1       	rjmp	.+564    	; 0x2320 <process_action+0x44a>
    20ec:	13 c0       	rjmp	.+38     	; 0x2114 <process_action+0x23e>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    20ee:	6e 29       	or	r22, r14
    20f0:	7f 29       	or	r23, r15
    20f2:	80 2b       	or	r24, r16
    20f4:	91 2b       	or	r25, r17
    20f6:	0e 94 28 17 	call	0x2e50	; 0x2e50 <default_layer_and>
    20fa:	12 c1       	rjmp	.+548    	; 0x2320 <process_action+0x44a>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    20fc:	6e 29       	or	r22, r14
    20fe:	7f 29       	or	r23, r15
    2100:	80 2b       	or	r24, r16
    2102:	91 2b       	or	r25, r17
    2104:	0b c0       	rjmp	.+22     	; 0x211c <process_action+0x246>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2106:	6e 29       	or	r22, r14
    2108:	7f 29       	or	r23, r15
    210a:	80 2b       	or	r24, r16
    210c:	91 2b       	or	r25, r17
    210e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <default_layer_xor>
    2112:	06 c1       	rjmp	.+524    	; 0x2320 <process_action+0x44a>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2114:	0e 94 28 17 	call	0x2e50	; 0x2e50 <default_layer_and>
    2118:	c8 01       	movw	r24, r16
    211a:	b7 01       	movw	r22, r14
    211c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <default_layer_or>
    2120:	ff c0       	rjmp	.+510    	; 0x2320 <process_action+0x44a>
    2122:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2124:	00 23       	and	r16, r16
    2126:	11 f4       	brne	.+4      	; 0x212c <process_action+0x256>
    2128:	96 95       	lsr	r25
    212a:	87 95       	ror	r24
    212c:	81 70       	andi	r24, 0x01	; 1
    212e:	09 f4       	brne	.+2      	; 0x2132 <process_action+0x25c>
    2130:	f7 c0       	rjmp	.+494    	; 0x2320 <process_action+0x44a>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2132:	2c 2d       	mov	r18, r12
    2134:	22 95       	swap	r18
    2136:	26 95       	lsr	r18
    2138:	27 70       	andi	r18, 0x07	; 7
    213a:	22 0f       	add	r18, r18
    213c:	22 0f       	add	r18, r18
    213e:	8c 2d       	mov	r24, r12
    2140:	8f 70       	andi	r24, 0x0F	; 15
    2142:	e8 2e       	mov	r14, r24
    2144:	ff 24       	eor	r15, r15
    2146:	00 e0       	ldi	r16, 0x00	; 0
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	02 2e       	mov	r0, r18
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <process_action+0x280>
    214e:	ee 0c       	add	r14, r14
    2150:	ff 1c       	adc	r15, r15
    2152:	00 1f       	adc	r16, r16
    2154:	11 1f       	adc	r17, r17
    2156:	0a 94       	dec	r0
    2158:	d2 f7       	brpl	.-12     	; 0x214e <process_action+0x278>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    215a:	c4 fc       	sbrc	r12, 4
    215c:	05 c0       	rjmp	.+10     	; 0x2168 <process_action+0x292>
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <process_action+0x2b0>
    2168:	6f e0       	ldi	r22, 0x0F	; 15
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	04 c0       	rjmp	.+8      	; 0x217a <process_action+0x2a4>
    2172:	66 0f       	add	r22, r22
    2174:	77 1f       	adc	r23, r23
    2176:	88 1f       	adc	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	2a 95       	dec	r18
    217c:	d2 f7       	brpl	.-12     	; 0x2172 <process_action+0x29c>
    217e:	60 95       	com	r22
    2180:	70 95       	com	r23
    2182:	80 95       	com	r24
    2184:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2186:	d6 94       	lsr	r13
    2188:	d6 94       	lsr	r13
    218a:	23 e0       	ldi	r18, 0x03	; 3
    218c:	d2 22       	and	r13, r18
    218e:	4d 2d       	mov	r20, r13
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	41 30       	cpi	r20, 0x01	; 1
    2194:	51 05       	cpc	r21, r1
    2196:	a9 f0       	breq	.+42     	; 0x21c2 <process_action+0x2ec>
    2198:	42 30       	cpi	r20, 0x02	; 2
    219a:	51 05       	cpc	r21, r1
    219c:	1c f4       	brge	.+6      	; 0x21a4 <process_action+0x2ce>
    219e:	45 2b       	or	r20, r21
    21a0:	49 f0       	breq	.+18     	; 0x21b4 <process_action+0x2de>
    21a2:	be c0       	rjmp	.+380    	; 0x2320 <process_action+0x44a>
    21a4:	42 30       	cpi	r20, 0x02	; 2
    21a6:	51 05       	cpc	r21, r1
    21a8:	89 f0       	breq	.+34     	; 0x21cc <process_action+0x2f6>
    21aa:	43 30       	cpi	r20, 0x03	; 3
    21ac:	51 05       	cpc	r21, r1
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <process_action+0x2dc>
    21b0:	b7 c0       	rjmp	.+366    	; 0x2320 <process_action+0x44a>
    21b2:	13 c0       	rjmp	.+38     	; 0x21da <process_action+0x304>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    21b4:	6e 29       	or	r22, r14
    21b6:	7f 29       	or	r23, r15
    21b8:	80 2b       	or	r24, r16
    21ba:	91 2b       	or	r25, r17
    21bc:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <layer_and>
    21c0:	af c0       	rjmp	.+350    	; 0x2320 <process_action+0x44a>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    21c2:	6e 29       	or	r22, r14
    21c4:	7f 29       	or	r23, r15
    21c6:	80 2b       	or	r24, r16
    21c8:	91 2b       	or	r25, r17
    21ca:	0b c0       	rjmp	.+22     	; 0x21e2 <process_action+0x30c>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    21cc:	6e 29       	or	r22, r14
    21ce:	7f 29       	or	r23, r15
    21d0:	80 2b       	or	r24, r16
    21d2:	91 2b       	or	r25, r17
    21d4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <layer_xor>
    21d8:	a3 c0       	rjmp	.+326    	; 0x2320 <process_action+0x44a>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    21da:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <layer_and>
    21de:	c8 01       	movw	r24, r16
    21e0:	b7 01       	movw	r22, r14
    21e2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <layer_or>
    21e6:	9c c0       	rjmp	.+312    	; 0x2320 <process_action+0x44a>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    21e8:	80 ef       	ldi	r24, 0xF0	; 240
    21ea:	c8 16       	cp	r12, r24
    21ec:	f1 f0       	breq	.+60     	; 0x222a <process_action+0x354>
    21ee:	8c 15       	cp	r24, r12
    21f0:	20 f0       	brcs	.+8      	; 0x21fa <process_action+0x324>
    21f2:	e0 ee       	ldi	r30, 0xE0	; 224
    21f4:	ce 16       	cp	r12, r30
    21f6:	e8 f1       	brcs	.+122    	; 0x2272 <process_action+0x39c>
    21f8:	09 c0       	rjmp	.+18     	; 0x220c <process_action+0x336>
    21fa:	f2 ef       	ldi	r31, 0xF2	; 242
    21fc:	cf 16       	cp	r12, r31
    21fe:	51 f1       	breq	.+84     	; 0x2254 <process_action+0x37e>
    2200:	cf 16       	cp	r12, r31
    2202:	18 f1       	brcs	.+70     	; 0x224a <process_action+0x374>
    2204:	23 ef       	ldi	r18, 0xF3	; 243
    2206:	c2 16       	cp	r12, r18
    2208:	a1 f5       	brne	.+104    	; 0x2272 <process_action+0x39c>
    220a:	29 c0       	rjmp	.+82     	; 0x225e <process_action+0x388>
    220c:	1c 2d       	mov	r17, r12
    220e:	1f 70       	andi	r17, 0x0F	; 15
    2210:	8d 2d       	mov	r24, r13
    2212:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2214:	00 23       	and	r16, r16
    2216:	19 f0       	breq	.+6      	; 0x221e <process_action+0x348>
                        layer_on(action.layer_tap.val);
    2218:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <layer_on>
    221c:	ed ce       	rjmp	.-550    	; 0x1ff8 <process_action+0x122>
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
    221e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2222:	81 2f       	mov	r24, r17
    2224:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <unregister_mods>
    2228:	7b c0       	rjmp	.+246    	; 0x2320 <process_action+0x44a>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    222a:	00 23       	and	r16, r16
    222c:	29 f0       	breq	.+10     	; 0x2238 <process_action+0x362>
                        if (tap_count < TAPPING_TOGGLE) {
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	8f 15       	cp	r24, r15
    2232:	08 f4       	brcc	.+2      	; 0x2236 <process_action+0x360>
    2234:	75 c0       	rjmp	.+234    	; 0x2320 <process_action+0x44a>
    2236:	04 c0       	rjmp	.+8      	; 0x2240 <process_action+0x36a>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2238:	e5 e0       	ldi	r30, 0x05	; 5
    223a:	ef 15       	cp	r30, r15
    223c:	08 f4       	brcc	.+2      	; 0x2240 <process_action+0x36a>
    223e:	70 c0       	rjmp	.+224    	; 0x2320 <process_action+0x44a>
                            layer_invert(action.layer_tap.val);
    2240:	8d 2d       	mov	r24, r13
    2242:	8f 71       	andi	r24, 0x1F	; 31
    2244:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <layer_invert>
    2248:	6b c0       	rjmp	.+214    	; 0x2320 <process_action+0x44a>
    224a:	8d 2d       	mov	r24, r13
    224c:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    224e:	00 23       	and	r16, r16
    2250:	29 f1       	breq	.+74     	; 0x229c <process_action+0x3c6>
    2252:	19 c0       	rjmp	.+50     	; 0x2286 <process_action+0x3b0>
    2254:	8d 2d       	mov	r24, r13
    2256:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2258:	00 23       	and	r16, r16
    225a:	a9 f0       	breq	.+42     	; 0x2286 <process_action+0x3b0>
    225c:	1f c0       	rjmp	.+62     	; 0x229c <process_action+0x3c6>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    225e:	00 23       	and	r16, r16
    2260:	29 f0       	breq	.+10     	; 0x226c <process_action+0x396>
    2262:	8d 2d       	mov	r24, r13
    2264:	8f 71       	andi	r24, 0x1F	; 31
    2266:	0e 94 f5 16 	call	0x2dea	; 0x2dea <layer_move>
    226a:	5a c0       	rjmp	.+180    	; 0x2320 <process_action+0x44a>
    226c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <layer_clear>
    2270:	57 c0       	rjmp	.+174    	; 0x2320 <process_action+0x44a>
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2272:	00 23       	and	r16, r16
    2274:	59 f0       	breq	.+22     	; 0x228c <process_action+0x3b6>
                        if (tap_count > 0) {
    2276:	ff 20       	and	r15, r15
    2278:	21 f0       	breq	.+8      	; 0x2282 <process_action+0x3ac>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    227a:	8c 2d       	mov	r24, r12
    227c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <register_code>
    2280:	4f c0       	rjmp	.+158    	; 0x2320 <process_action+0x44a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    2282:	8d 2d       	mov	r24, r13
    2284:	8f 71       	andi	r24, 0x1F	; 31
    2286:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <layer_on>
    228a:	4a c0       	rjmp	.+148    	; 0x2320 <process_action+0x44a>
                        }
                    } else {
                        if (tap_count > 0) {
    228c:	ff 20       	and	r15, r15
    228e:	21 f0       	breq	.+8      	; 0x2298 <process_action+0x3c2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2290:	8c 2d       	mov	r24, r12
    2292:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <unregister_code>
    2296:	44 c0       	rjmp	.+136    	; 0x2320 <process_action+0x44a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    2298:	8d 2d       	mov	r24, r13
    229a:	8f 71       	andi	r24, 0x1F	; 31
    229c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <layer_off>
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <process_action+0x44a>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    22a2:	ff e0       	ldi	r31, 0x0F	; 15
    22a4:	df 22       	and	r13, r31
    22a6:	c5 01       	movw	r24, r10
    22a8:	6c 2d       	mov	r22, r12
    22aa:	4d 2d       	mov	r20, r13
    22ac:	0e 94 3e 03 	call	0x67c	; 0x67c <action_get_macro>
    22b0:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <action_macro_play>
    22b4:	35 c0       	rjmp	.+106    	; 0x2320 <process_action+0x44a>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    22b6:	2f e0       	ldi	r18, 0x0F	; 15
    22b8:	d2 22       	and	r13, r18
    22ba:	c5 01       	movw	r24, r10
    22bc:	6c 2d       	mov	r22, r12
    22be:	4d 2d       	mov	r20, r13
    22c0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <action_function>
    22c4:	2d c0       	rjmp	.+90     	; 0x2320 <process_action+0x44a>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <layer_switch_get_action>
    22ce:	6c 01       	movw	r12, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    22d0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    22d4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    22d8:	8d 2d       	mov	r24, r13
    22da:	82 95       	swap	r24
    22dc:	8f 70       	andi	r24, 0x0F	; 15
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	85 30       	cpi	r24, 0x05	; 5
    22e2:	91 05       	cpc	r25, r1
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <process_action+0x412>
    22e6:	af ce       	rjmp	.-674    	; 0x2046 <process_action+0x170>
    22e8:	86 30       	cpi	r24, 0x06	; 6
    22ea:	91 05       	cpc	r25, r1
    22ec:	54 f4       	brge	.+20     	; 0x2302 <process_action+0x42c>
    22ee:	84 30       	cpi	r24, 0x04	; 4
    22f0:	91 05       	cpc	r25, r1
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <process_action+0x420>
    22f4:	89 ce       	rjmp	.-750    	; 0x2008 <process_action+0x132>
    22f6:	2d 2d       	mov	r18, r13
    22f8:	20 7f       	andi	r18, 0xF0	; 240
    22fa:	02 97       	sbiw	r24, 0x02	; 2
    22fc:	0c f0       	brlt	.+2      	; 0x2300 <process_action+0x42a>
    22fe:	43 ce       	rjmp	.-890    	; 0x1f86 <process_action+0xb0>
    2300:	22 ce       	rjmp	.-956    	; 0x1f46 <process_action+0x70>
    2302:	8c 30       	cpi	r24, 0x0C	; 12
    2304:	91 05       	cpc	r25, r1
    2306:	3c f4       	brge	.+14     	; 0x2316 <process_action+0x440>
    2308:	8a 30       	cpi	r24, 0x0A	; 10
    230a:	91 05       	cpc	r25, r1
    230c:	0c f0       	brlt	.+2      	; 0x2310 <process_action+0x43a>
    230e:	6c cf       	rjmp	.-296    	; 0x21e8 <process_action+0x312>
    2310:	08 97       	sbiw	r24, 0x08	; 8
    2312:	31 f4       	brne	.+12     	; 0x2320 <process_action+0x44a>
    2314:	a4 ce       	rjmp	.-696    	; 0x205e <process_action+0x188>
    2316:	8c 30       	cpi	r24, 0x0C	; 12
    2318:	91 05       	cpc	r25, r1
    231a:	19 f2       	breq	.-122    	; 0x22a2 <process_action+0x3cc>
    231c:	0f 97       	sbiw	r24, 0x0f	; 15
    231e:	59 f2       	breq	.-106    	; 0x22b6 <process_action+0x3e0>
            break;
#endif
        default:
            break;
    }
}
    2320:	2a 96       	adiw	r28, 0x0a	; 10
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	bf 90       	pop	r11
    233e:	af 90       	pop	r10
    2340:	08 95       	ret

00002342 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	2b 97       	sbiw	r28, 0x0b	; 11
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	34 2f       	mov	r19, r20
    2358:	4f 83       	std	Y+7, r20	; 0x07
    235a:	25 2f       	mov	r18, r21
    235c:	58 87       	std	Y+8, r21	; 0x08
    235e:	69 87       	std	Y+9, r22	; 0x09
    2360:	7a 87       	std	Y+10, r23	; 0x0a
    2362:	8b 87       	std	Y+11, r24	; 0x0b
    2364:	47 2f       	mov	r20, r23
    2366:	58 2f       	mov	r21, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2368:	fe 01       	movw	r30, r28
    236a:	31 96       	adiw	r30, 0x01	; 1
    236c:	86 e0       	ldi	r24, 0x06	; 6
    236e:	df 01       	movw	r26, r30
    2370:	1d 92       	st	X+, r1
    2372:	8a 95       	dec	r24
    2374:	e9 f7       	brne	.-6      	; 0x2370 <action_exec+0x2e>
    2376:	6b 83       	std	Y+3, r22	; 0x03
    2378:	39 83       	std	Y+1, r19	; 0x01
    237a:	2a 83       	std	Y+2, r18	; 0x02
    237c:	4c 83       	std	Y+4, r20	; 0x04
    237e:	5d 83       	std	Y+5, r21	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2380:	43 2f       	mov	r20, r19
    2382:	52 2f       	mov	r21, r18
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	0e 94 de 14 	call	0x29bc	; 0x29bc <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    238c:	2b 96       	adiw	r28, 0x0b	; 11
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    23a2:	00 91 6b 01 	lds	r16, 0x016B
    23a6:	15 c0       	rjmp	.+42     	; 0x23d2 <debug_waiting_buffer+0x34>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    23a8:	10 e0       	ldi	r17, 0x00	; 0
    23aa:	f8 01       	movw	r30, r16
    23ac:	ee 0f       	add	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	e0 0f       	add	r30, r16
    23b2:	f1 1f       	adc	r31, r17
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	e4 59       	subi	r30, 0x94	; 148
    23ba:	fe 4f       	sbci	r31, 0xFE	; 254
    23bc:	40 81       	ld	r20, Z
    23be:	51 81       	ldd	r21, Z+1	; 0x01
    23c0:	62 81       	ldd	r22, Z+2	; 0x02
    23c2:	73 81       	ldd	r23, Z+3	; 0x03
    23c4:	84 81       	ldd	r24, Z+4	; 0x04
    23c6:	95 81       	ldd	r25, Z+5	; 0x05
    23c8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    23cc:	0f 5f       	subi	r16, 0xFF	; 255
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	07 70       	andi	r16, 0x07	; 7
    23d2:	80 91 6a 01 	lds	r24, 0x016A
    23d6:	08 17       	cp	r16, r24
    23d8:	39 f7       	brne	.-50     	; 0x23a8 <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    23e0:	40 91 64 01 	lds	r20, 0x0164
    23e4:	50 91 65 01 	lds	r21, 0x0165
    23e8:	60 91 66 01 	lds	r22, 0x0166
    23ec:	70 91 67 01 	lds	r23, 0x0167
    23f0:	80 91 68 01 	lds	r24, 0x0168
    23f4:	90 91 69 01 	lds	r25, 0x0169
    23f8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <debug_record>
}
    23fc:	08 95       	ret

000023fe <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2406:	80 91 69 01 	lds	r24, 0x0169
    240a:	82 95       	swap	r24
    240c:	8f 70       	andi	r24, 0x0F	; 15
    240e:	09 f0       	breq	.+2      	; 0x2412 <waiting_buffer_scan_tap+0x14>
    2410:	6d c0       	rjmp	.+218    	; 0x24ec <waiting_buffer_scan_tap+0xee>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2412:	80 91 66 01 	lds	r24, 0x0166
    2416:	88 23       	and	r24, r24
    2418:	09 f4       	brne	.+2      	; 0x241c <waiting_buffer_scan_tap+0x1e>
    241a:	68 c0       	rjmp	.+208    	; 0x24ec <waiting_buffer_scan_tap+0xee>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    241c:	60 91 6b 01 	lds	r22, 0x016B
    2420:	00 91 6a 01 	lds	r16, 0x016A
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2424:	40 91 67 01 	lds	r20, 0x0167
    2428:	50 91 68 01 	lds	r21, 0x0168
    242c:	10 91 65 01 	lds	r17, 0x0165
    2430:	70 91 64 01 	lds	r23, 0x0164
    2434:	ea 01       	movw	r28, r20
    2436:	c0 95       	com	r28
    2438:	d0 95       	com	r29
    243a:	55 c0       	rjmp	.+170    	; 0x24e6 <waiting_buffer_scan_tap+0xe8>
    243c:	41 15       	cp	r20, r1
    243e:	51 05       	cpc	r21, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <waiting_buffer_scan_tap+0x46>
    2442:	4f c0       	rjmp	.+158    	; 0x24e2 <waiting_buffer_scan_tap+0xe4>
    2444:	1f 3f       	cpi	r17, 0xFF	; 255
    2446:	49 f4       	brne	.+18     	; 0x245a <waiting_buffer_scan_tap+0x5c>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	7f 3f       	cpi	r23, 0xFF	; 255
    244e:	11 f4       	brne	.+4      	; 0x2454 <waiting_buffer_scan_tap+0x56>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	88 23       	and	r24, r24
    2456:	09 f0       	breq	.+2      	; 0x245a <waiting_buffer_scan_tap+0x5c>
    2458:	44 c0       	rjmp	.+136    	; 0x24e2 <waiting_buffer_scan_tap+0xe4>
    245a:	26 2f       	mov	r18, r22
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	f9 01       	movw	r30, r18
    2460:	ee 0f       	add	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	e2 0f       	add	r30, r18
    2466:	f3 1f       	adc	r31, r19
    2468:	df 01       	movw	r26, r30
    246a:	aa 0f       	add	r26, r26
    246c:	bb 1f       	adc	r27, r27
    246e:	a4 59       	subi	r26, 0x94	; 148
    2470:	be 4f       	sbci	r27, 0xFE	; 254
    2472:	11 96       	adiw	r26, 0x01	; 1
    2474:	8c 91       	ld	r24, X
    2476:	11 97       	sbiw	r26, 0x01	; 1
    2478:	18 17       	cp	r17, r24
    247a:	99 f5       	brne	.+102    	; 0x24e2 <waiting_buffer_scan_tap+0xe4>
    247c:	8c 91       	ld	r24, X
    247e:	78 17       	cp	r23, r24
    2480:	81 f5       	brne	.+96     	; 0x24e2 <waiting_buffer_scan_tap+0xe4>
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	e2 59       	subi	r30, 0x92	; 146
    2488:	fe 4f       	sbci	r31, 0xFE	; 254
    248a:	80 81       	ld	r24, Z
    248c:	88 23       	and	r24, r24
    248e:	49 f5       	brne	.+82     	; 0x24e2 <waiting_buffer_scan_tap+0xe4>
    2490:	13 96       	adiw	r26, 0x03	; 3
    2492:	8d 91       	ld	r24, X+
    2494:	9c 91       	ld	r25, X
    2496:	14 97       	sbiw	r26, 0x04	; 4
    2498:	84 17       	cp	r24, r20
    249a:	95 07       	cpc	r25, r21
    249c:	18 f0       	brcs	.+6      	; 0x24a4 <waiting_buffer_scan_tap+0xa6>
    249e:	84 1b       	sub	r24, r20
    24a0:	95 0b       	sbc	r25, r21
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <waiting_buffer_scan_tap+0xaa>
    24a4:	8c 0f       	add	r24, r28
    24a6:	9d 1f       	adc	r25, r29
    24a8:	88 3c       	cpi	r24, 0xC8	; 200
    24aa:	91 05       	cpc	r25, r1
    24ac:	d0 f4       	brcc	.+52     	; 0x24e2 <waiting_buffer_scan_tap+0xe4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
    24ae:	80 91 69 01 	lds	r24, 0x0169
    24b2:	8f 70       	andi	r24, 0x0F	; 15
    24b4:	80 61       	ori	r24, 0x10	; 16
    24b6:	80 93 69 01 	sts	0x0169, r24
            waiting_buffer[i].tap.count = 1;
    24ba:	f9 01       	movw	r30, r18
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	ee 0f       	add	r30, r30
    24c6:	ff 1f       	adc	r31, r31
    24c8:	ef 58       	subi	r30, 0x8F	; 143
    24ca:	fe 4f       	sbci	r31, 0xFE	; 254
    24cc:	80 81       	ld	r24, Z
    24ce:	8f 70       	andi	r24, 0x0F	; 15
    24d0:	80 61       	ori	r24, 0x10	; 16
    24d2:	80 83       	st	Z, r24
            process_action(&tapping_key);
    24d4:	84 e6       	ldi	r24, 0x64	; 100
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    24dc:	0e 94 cf 11 	call	0x239e	; 0x239e <debug_waiting_buffer>
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <waiting_buffer_scan_tap+0xee>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    24e2:	6f 5f       	subi	r22, 0xFF	; 255
    24e4:	67 70       	andi	r22, 0x07	; 7
    24e6:	60 17       	cp	r22, r16
    24e8:	09 f0       	breq	.+2      	; 0x24ec <waiting_buffer_scan_tap+0xee>
    24ea:	a8 cf       	rjmp	.-176    	; 0x243c <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	08 95       	ret

000024f6 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	6b 97       	sbiw	r28, 0x1b	; 27
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2516:	dc 01       	movw	r26, r24
    2518:	12 96       	adiw	r26, 0x02	; 2
    251a:	dc 90       	ld	r13, X
    251c:	12 97       	sbiw	r26, 0x02	; 2
    251e:	4c 91       	ld	r20, X
    2520:	11 96       	adiw	r26, 0x01	; 1
    2522:	5c 91       	ld	r21, X
    2524:	11 97       	sbiw	r26, 0x01	; 1
    2526:	13 96       	adiw	r26, 0x03	; 3
    2528:	ed 90       	ld	r14, X+
    252a:	fc 90       	ld	r15, X
    252c:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    252e:	20 91 67 01 	lds	r18, 0x0167
    2532:	30 91 68 01 	lds	r19, 0x0168
    2536:	60 91 65 01 	lds	r22, 0x0165
    253a:	70 91 64 01 	lds	r23, 0x0164
    253e:	21 15       	cp	r18, r1
    2540:	31 05       	cpc	r19, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <process_tapping+0x50>
    2544:	db c1       	rjmp	.+950    	; 0x28fc <process_tapping+0x406>
    2546:	6f 3f       	cpi	r22, 0xFF	; 255
    2548:	09 f0       	breq	.+2      	; 0x254c <process_tapping+0x56>
    254a:	03 c2       	rjmp	.+1030   	; 0x2952 <process_tapping+0x45c>
    254c:	7f 3f       	cpi	r23, 0xFF	; 255
    254e:	09 f0       	breq	.+2      	; 0x2552 <process_tapping+0x5c>
    2550:	00 c2       	rjmp	.+1024   	; 0x2952 <process_tapping+0x45c>
    2552:	d4 c1       	rjmp	.+936    	; 0x28fc <process_tapping+0x406>
        if (WITHIN_TAPPING_TERM(event)) {
    2554:	e2 16       	cp	r14, r18
    2556:	f3 06       	cpc	r15, r19
    2558:	40 f0       	brcs	.+16     	; 0x256a <process_tapping+0x74>
    255a:	c7 01       	movw	r24, r14
    255c:	82 1b       	sub	r24, r18
    255e:	93 0b       	sbc	r25, r19
    2560:	88 3c       	cpi	r24, 0xC8	; 200
    2562:	91 05       	cpc	r25, r1
    2564:	08 f0       	brcs	.+2      	; 0x2568 <process_tapping+0x72>
    2566:	ee c0       	rjmp	.+476    	; 0x2744 <process_tapping+0x24e>
    2568:	08 c0       	rjmp	.+16     	; 0x257a <process_tapping+0x84>
    256a:	20 95       	com	r18
    256c:	30 95       	com	r19
    256e:	2e 0d       	add	r18, r14
    2570:	3f 1d       	adc	r19, r15
    2572:	28 3c       	cpi	r18, 0xC8	; 200
    2574:	31 05       	cpc	r19, r1
    2576:	08 f0       	brcs	.+2      	; 0x257a <process_tapping+0x84>
    2578:	e5 c0       	rjmp	.+458    	; 0x2744 <process_tapping+0x24e>
            if (tapping_key.tap.count == 0) {
    257a:	80 91 69 01 	lds	r24, 0x0169
    257e:	80 7f       	andi	r24, 0xF0	; 240
    2580:	09 f0       	breq	.+2      	; 0x2584 <process_tapping+0x8e>
    2582:	95 c0       	rjmp	.+298    	; 0x26ae <process_tapping+0x1b8>
    2584:	6f 3f       	cpi	r22, 0xFF	; 255
    2586:	09 f0       	breq	.+2      	; 0x258a <process_tapping+0x94>
    2588:	ea c1       	rjmp	.+980    	; 0x295e <process_tapping+0x468>
    258a:	7f 3f       	cpi	r23, 0xFF	; 255
    258c:	09 f0       	breq	.+2      	; 0x2590 <process_tapping+0x9a>
    258e:	e7 c1       	rjmp	.+974    	; 0x295e <process_tapping+0x468>
    2590:	15 c0       	rjmp	.+42     	; 0x25bc <process_tapping+0xc6>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2592:	74 17       	cp	r23, r20
    2594:	99 f4       	brne	.+38     	; 0x25bc <process_tapping+0xc6>
    2596:	dd 20       	and	r13, r13
    2598:	89 f4       	brne	.+34     	; 0x25bc <process_tapping+0xc6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    259a:	80 91 69 01 	lds	r24, 0x0169
    259e:	8f 70       	andi	r24, 0x0F	; 15
    25a0:	80 61       	ori	r24, 0x10	; 16
    25a2:	80 93 69 01 	sts	0x0169, r24
                    debug_tapping_key();
    25a6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <debug_tapping_key>
                    process_action(&tapping_key);
    25aa:	84 e6       	ldi	r24, 0x64	; 100
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    25b2:	80 91 69 01 	lds	r24, 0x0169
    25b6:	f8 01       	movw	r30, r16
    25b8:	85 83       	std	Z+5, r24	; 0x05
    25ba:	bc c1       	rjmp	.+888    	; 0x2934 <process_tapping+0x43e>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    25bc:	fd 82       	std	Y+5, r15	; 0x05
    25be:	ec 82       	std	Y+4, r14	; 0x04
    25c0:	5a 83       	std	Y+2, r21	; 0x02
    25c2:	49 83       	std	Y+1, r20	; 0x01
    25c4:	db 82       	std	Y+3, r13	; 0x03
    25c6:	de 01       	movw	r26, r28
    25c8:	16 96       	adiw	r26, 0x06	; 6
    25ca:	fe 01       	movw	r30, r28
    25cc:	31 96       	adiw	r30, 0x01	; 1
    25ce:	85 e0       	ldi	r24, 0x05	; 5
    25d0:	01 90       	ld	r0, Z+
    25d2:	0d 92       	st	X+, r0
    25d4:	81 50       	subi	r24, 0x01	; 1
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <process_tapping+0xda>
    25d8:	68 85       	ldd	r22, Y+8	; 0x08
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    25da:	de 01       	movw	r26, r28
    25dc:	1b 96       	adiw	r26, 0x0b	; 11
    25de:	fe 01       	movw	r30, r28
    25e0:	36 96       	adiw	r30, 0x06	; 6
    25e2:	85 e0       	ldi	r24, 0x05	; 5
    25e4:	01 90       	ld	r0, Z+
    25e6:	0d 92       	st	X+, r0
    25e8:	81 50       	subi	r24, 0x01	; 1
    25ea:	e1 f7       	brne	.-8      	; 0x25e4 <process_tapping+0xee>
    25ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    25ee:	3b 85       	ldd	r19, Y+11	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    25f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f4:	89 2b       	or	r24, r25
    25f6:	09 f4       	brne	.+2      	; 0x25fa <process_tapping+0x104>
    25f8:	51 c0       	rjmp	.+162    	; 0x269c <process_tapping+0x1a6>
    25fa:	2f 3f       	cpi	r18, 0xFF	; 255
    25fc:	09 f0       	breq	.+2      	; 0x2600 <process_tapping+0x10a>
    25fe:	b3 c1       	rjmp	.+870    	; 0x2966 <process_tapping+0x470>
    2600:	3f 3f       	cpi	r19, 0xFF	; 255
    2602:	09 f0       	breq	.+2      	; 0x2606 <process_tapping+0x110>
    2604:	b0 c1       	rjmp	.+864    	; 0x2966 <process_tapping+0x470>
    2606:	4a c0       	rjmp	.+148    	; 0x269c <process_tapping+0x1a6>
    2608:	fd 82       	std	Y+5, r15	; 0x05
    260a:	ec 82       	std	Y+4, r14	; 0x04
    260c:	5a 83       	std	Y+2, r21	; 0x02
    260e:	49 83       	std	Y+1, r20	; 0x01
    2610:	db 82       	std	Y+3, r13	; 0x03
    2612:	de 01       	movw	r26, r28
    2614:	1b 96       	adiw	r26, 0x0b	; 11
    2616:	fe 01       	movw	r30, r28
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	85 e0       	ldi	r24, 0x05	; 5
    261c:	01 90       	ld	r0, Z+
    261e:	0d 92       	st	X+, r0
    2620:	81 50       	subi	r24, 0x01	; 1
    2622:	e1 f7       	brne	.-8      	; 0x261c <process_tapping+0x126>
    2624:	fc 84       	ldd	r15, Y+12	; 0x0c
    2626:	7b 85       	ldd	r23, Y+11	; 0x0b
    2628:	6d 85       	ldd	r22, Y+13	; 0x0d
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    262a:	80 91 6b 01 	lds	r24, 0x016B
    262e:	90 91 6a 01 	lds	r25, 0x016A
    2632:	1f c0       	rjmp	.+62     	; 0x2672 <process_tapping+0x17c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	f9 01       	movw	r30, r18
    263a:	ee 0f       	add	r30, r30
    263c:	ff 1f       	adc	r31, r31
    263e:	e2 0f       	add	r30, r18
    2640:	f3 1f       	adc	r31, r19
    2642:	df 01       	movw	r26, r30
    2644:	aa 0f       	add	r26, r26
    2646:	bb 1f       	adc	r27, r27
    2648:	a4 59       	subi	r26, 0x94	; 148
    264a:	be 4f       	sbci	r27, 0xFE	; 254
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	8c 91       	ld	r24, X
    2650:	11 97       	sbiw	r26, 0x01	; 1
    2652:	f8 16       	cp	r15, r24
    2654:	51 f4       	brne	.+20     	; 0x266a <process_tapping+0x174>
    2656:	8c 91       	ld	r24, X
    2658:	78 17       	cp	r23, r24
    265a:	39 f4       	brne	.+14     	; 0x266a <process_tapping+0x174>
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	e2 59       	subi	r30, 0x92	; 146
    2662:	fe 4f       	sbci	r31, 0xFE	; 254
    2664:	80 81       	ld	r24, Z
    2666:	68 17       	cp	r22, r24
    2668:	c9 f4       	brne	.+50     	; 0x269c <process_tapping+0x1a6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    266a:	2f 5f       	subi	r18, 0xFF	; 255
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	82 2f       	mov	r24, r18
    2670:	87 70       	andi	r24, 0x07	; 7
    2672:	89 17       	cp	r24, r25
    2674:	f9 f6       	brne	.-66     	; 0x2634 <process_tapping+0x13e>
    2676:	8d c1       	rjmp	.+794    	; 0x2992 <process_tapping+0x49c>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2678:	9f 70       	andi	r25, 0x0F	; 15
    267a:	59 f0       	breq	.+22     	; 0x2692 <process_tapping+0x19c>
    267c:	44 23       	and	r20, r20
    267e:	49 f4       	brne	.+18     	; 0x2692 <process_tapping+0x19c>
    2680:	59 c1       	rjmp	.+690    	; 0x2934 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2682:	9f 70       	andi	r25, 0x0F	; 15
    2684:	31 f0       	breq	.+12     	; 0x2692 <process_tapping+0x19c>
    2686:	d8 01       	movw	r26, r16
    2688:	15 96       	adiw	r26, 0x05	; 5
    268a:	8c 91       	ld	r24, X
    268c:	80 7f       	andi	r24, 0xF0	; 240
    268e:	09 f4       	brne	.+2      	; 0x2692 <process_tapping+0x19c>
    2690:	51 c1       	rjmp	.+674    	; 0x2934 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
    2692:	40 5e       	subi	r20, 0xE0	; 224
    2694:	48 30       	cpi	r20, 0x08	; 8
    2696:	08 f4       	brcc	.+2      	; 0x269a <process_tapping+0x1a4>
    2698:	4d c1       	rjmp	.+666    	; 0x2934 <process_tapping+0x43e>
    269a:	48 c1       	rjmp	.+656    	; 0x292c <process_tapping+0x436>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    269c:	dd 20       	and	r13, r13
    269e:	09 f4       	brne	.+2      	; 0x26a2 <process_tapping+0x1ac>
    26a0:	49 c1       	rjmp	.+658    	; 0x2934 <process_tapping+0x43e>
                        tapping_key.tap.interrupted = true;
    26a2:	80 91 69 01 	lds	r24, 0x0169
    26a6:	81 60       	ori	r24, 0x01	; 1
    26a8:	80 93 69 01 	sts	0x0169, r24
    26ac:	43 c1       	rjmp	.+646    	; 0x2934 <process_tapping+0x43e>
    26ae:	6f 3f       	cpi	r22, 0xFF	; 255
    26b0:	09 f0       	breq	.+2      	; 0x26b4 <process_tapping+0x1be>
    26b2:	5d c1       	rjmp	.+698    	; 0x296e <process_tapping+0x478>
    26b4:	7f 3f       	cpi	r23, 0xFF	; 255
    26b6:	09 f0       	breq	.+2      	; 0x26ba <process_tapping+0x1c4>
    26b8:	5a c1       	rjmp	.+692    	; 0x296e <process_tapping+0x478>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <process_tapping+0x1ee>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    26bc:	74 17       	cp	r23, r20
    26be:	91 f4       	brne	.+36     	; 0x26e4 <process_tapping+0x1ee>
    26c0:	dd 20       	and	r13, r13
    26c2:	81 f4       	brne	.+32     	; 0x26e4 <process_tapping+0x1ee>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    26c4:	80 91 69 01 	lds	r24, 0x0169
    26c8:	f8 01       	movw	r30, r16
    26ca:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    26cc:	c8 01       	movw	r24, r16
    26ce:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>
                    tapping_key = *keyp;
    26d2:	a4 e6       	ldi	r26, 0x64	; 100
    26d4:	b1 e0       	ldi	r27, 0x01	; 1
    26d6:	f8 01       	movw	r30, r16
    26d8:	86 e0       	ldi	r24, 0x06	; 6
    26da:	01 90       	ld	r0, Z+
    26dc:	0d 92       	st	X+, r0
    26de:	81 50       	subi	r24, 0x01	; 1
    26e0:	e1 f7       	brne	.-8      	; 0x26da <process_tapping+0x1e4>
    26e2:	20 c1       	rjmp	.+576    	; 0x2924 <process_tapping+0x42e>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    26e4:	5a 83       	std	Y+2, r21	; 0x02
    26e6:	49 83       	std	Y+1, r20	; 0x01
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <is_tap_key>
    26f0:	88 23       	and	r24, r24
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <process_tapping+0x200>
    26f4:	1b c1       	rjmp	.+566    	; 0x292c <process_tapping+0x436>
    26f6:	dd 20       	and	r13, r13
    26f8:	09 f4       	brne	.+2      	; 0x26fc <process_tapping+0x206>
    26fa:	18 c1       	rjmp	.+560    	; 0x292c <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    26fc:	30 91 69 01 	lds	r19, 0x0169
    2700:	83 2f       	mov	r24, r19
    2702:	82 95       	swap	r24
    2704:	8f 70       	andi	r24, 0x0F	; 15
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	02 97       	sbiw	r24, 0x02	; 2
    270a:	9c f0       	brlt	.+38     	; 0x2732 <process_tapping+0x23c>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    270c:	90 91 65 01 	lds	r25, 0x0165
    2710:	20 91 64 01 	lds	r18, 0x0164
    2714:	fe 01       	movw	r30, r28
    2716:	70 96       	adiw	r30, 0x10	; 16
    2718:	86 e0       	ldi	r24, 0x06	; 6
    271a:	df 01       	movw	r26, r30
    271c:	1d 92       	st	X+, r1
    271e:	8a 95       	dec	r24
    2720:	e9 f7       	brne	.-6      	; 0x271c <process_tapping+0x226>
    2722:	99 8b       	std	Y+17, r25	; 0x11
    2724:	28 8b       	std	Y+16, r18	; 0x10
    2726:	fc 8a       	std	Y+20, r15	; 0x14
    2728:	eb 8a       	std	Y+19, r14	; 0x13
    272a:	3d 8b       	std	Y+21, r19	; 0x15
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    272c:	cf 01       	movw	r24, r30
    272e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    2732:	a4 e6       	ldi	r26, 0x64	; 100
    2734:	b1 e0       	ldi	r27, 0x01	; 1
    2736:	f8 01       	movw	r30, r16
    2738:	86 e0       	ldi	r24, 0x06	; 6
    273a:	01 90       	ld	r0, Z+
    273c:	0d 92       	st	X+, r0
    273e:	81 50       	subi	r24, 0x01	; 1
    2740:	e1 f7       	brne	.-8      	; 0x273a <process_tapping+0x244>
    2742:	ee c0       	rjmp	.+476    	; 0x2920 <process_tapping+0x42a>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2744:	80 91 69 01 	lds	r24, 0x0169
    2748:	80 7f       	andi	r24, 0xF0	; 240
    274a:	a9 f4       	brne	.+42     	; 0x2776 <process_tapping+0x280>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    274c:	7e 2d       	mov	r23, r14
    274e:	fd 82       	std	Y+5, r15	; 0x05
    2750:	ec 82       	std	Y+4, r14	; 0x04
    2752:	5a 83       	std	Y+2, r21	; 0x02
    2754:	49 83       	std	Y+1, r20	; 0x01
    2756:	db 82       	std	Y+3, r13	; 0x03
    2758:	6d 2d       	mov	r22, r13
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <debug_event>
                process_action(&tapping_key);
    2760:	04 e6       	ldi	r16, 0x64	; 100
    2762:	11 e0       	ldi	r17, 0x01	; 1
    2764:	c8 01       	movw	r24, r16
    2766:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>
                tapping_key = (keyrecord_t){};
    276a:	86 e0       	ldi	r24, 0x06	; 6
    276c:	f8 01       	movw	r30, r16
    276e:	11 92       	st	Z+, r1
    2770:	8a 95       	dec	r24
    2772:	e9 f7       	brne	.-6      	; 0x276e <process_tapping+0x278>
    2774:	c0 c0       	rjmp	.+384    	; 0x28f6 <process_tapping+0x400>
    2776:	6f 3f       	cpi	r22, 0xFF	; 255
    2778:	09 f0       	breq	.+2      	; 0x277c <process_tapping+0x286>
    277a:	fd c0       	rjmp	.+506    	; 0x2976 <process_tapping+0x480>
    277c:	7f 3f       	cpi	r23, 0xFF	; 255
    277e:	09 f0       	breq	.+2      	; 0x2782 <process_tapping+0x28c>
    2780:	fa c0       	rjmp	.+500    	; 0x2976 <process_tapping+0x480>
    2782:	14 c0       	rjmp	.+40     	; 0x27ac <process_tapping+0x2b6>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2784:	74 17       	cp	r23, r20
    2786:	91 f4       	brne	.+36     	; 0x27ac <process_tapping+0x2b6>
    2788:	dd 20       	and	r13, r13
    278a:	81 f4       	brne	.+32     	; 0x27ac <process_tapping+0x2b6>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    278c:	80 91 69 01 	lds	r24, 0x0169
    2790:	d8 01       	movw	r26, r16
    2792:	15 96       	adiw	r26, 0x05	; 5
    2794:	8c 93       	st	X, r24
                    process_action(keyp);
    2796:	c8 01       	movw	r24, r16
    2798:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>
                    tapping_key = (keyrecord_t){};
    279c:	e4 e6       	ldi	r30, 0x64	; 100
    279e:	f1 e0       	ldi	r31, 0x01	; 1
    27a0:	86 e0       	ldi	r24, 0x06	; 6
    27a2:	df 01       	movw	r26, r30
    27a4:	1d 92       	st	X+, r1
    27a6:	8a 95       	dec	r24
    27a8:	e9 f7       	brne	.-6      	; 0x27a4 <process_tapping+0x2ae>
    27aa:	be c0       	rjmp	.+380    	; 0x2928 <process_tapping+0x432>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    27ac:	5a 83       	std	Y+2, r21	; 0x02
    27ae:	49 83       	std	Y+1, r20	; 0x01
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <is_tap_key>
    27b8:	88 23       	and	r24, r24
    27ba:	09 f4       	brne	.+2      	; 0x27be <process_tapping+0x2c8>
    27bc:	b7 c0       	rjmp	.+366    	; 0x292c <process_tapping+0x436>
    27be:	dd 20       	and	r13, r13
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <process_tapping+0x2ce>
    27c2:	b4 c0       	rjmp	.+360    	; 0x292c <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    27c4:	30 91 69 01 	lds	r19, 0x0169
    27c8:	83 2f       	mov	r24, r19
    27ca:	82 95       	swap	r24
    27cc:	8f 70       	andi	r24, 0x0F	; 15
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	02 97       	sbiw	r24, 0x02	; 2
    27d2:	9c f0       	brlt	.+38     	; 0x27fa <process_tapping+0x304>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    27d4:	90 91 65 01 	lds	r25, 0x0165
    27d8:	20 91 64 01 	lds	r18, 0x0164
    27dc:	fe 01       	movw	r30, r28
    27de:	76 96       	adiw	r30, 0x16	; 22
    27e0:	86 e0       	ldi	r24, 0x06	; 6
    27e2:	df 01       	movw	r26, r30
    27e4:	1d 92       	st	X+, r1
    27e6:	8a 95       	dec	r24
    27e8:	e9 f7       	brne	.-6      	; 0x27e4 <process_tapping+0x2ee>
    27ea:	9f 8b       	std	Y+23, r25	; 0x17
    27ec:	2e 8b       	std	Y+22, r18	; 0x16
    27ee:	fa 8e       	std	Y+26, r15	; 0x1a
    27f0:	e9 8e       	std	Y+25, r14	; 0x19
    27f2:	3b 8f       	std	Y+27, r19	; 0x1b
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    27f4:	cf 01       	movw	r24, r30
    27f6:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    27fa:	a4 e6       	ldi	r26, 0x64	; 100
    27fc:	b1 e0       	ldi	r27, 0x01	; 1
    27fe:	f8 01       	movw	r30, r16
    2800:	86 e0       	ldi	r24, 0x06	; 6
    2802:	01 90       	ld	r0, Z+
    2804:	0d 92       	st	X+, r0
    2806:	81 50       	subi	r24, 0x01	; 1
    2808:	e1 f7       	brne	.-8      	; 0x2802 <process_tapping+0x30c>
    280a:	8a c0       	rjmp	.+276    	; 0x2920 <process_tapping+0x42a>
    280c:	6f 3f       	cpi	r22, 0xFF	; 255
    280e:	09 f0       	breq	.+2      	; 0x2812 <process_tapping+0x31c>
    2810:	b6 c0       	rjmp	.+364    	; 0x297e <process_tapping+0x488>
    2812:	7f 3f       	cpi	r23, 0xFF	; 255
    2814:	09 f0       	breq	.+2      	; 0x2818 <process_tapping+0x322>
    2816:	b3 c0       	rjmp	.+358    	; 0x297e <process_tapping+0x488>
    2818:	71 c0       	rjmp	.+226    	; 0x28fc <process_tapping+0x406>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    281a:	e2 16       	cp	r14, r18
    281c:	f3 06       	cpc	r15, r19
    281e:	40 f0       	brcs	.+16     	; 0x2830 <process_tapping+0x33a>
    2820:	c7 01       	movw	r24, r14
    2822:	82 1b       	sub	r24, r18
    2824:	93 0b       	sbc	r25, r19
    2826:	88 3c       	cpi	r24, 0xC8	; 200
    2828:	91 05       	cpc	r25, r1
    282a:	08 f0       	brcs	.+2      	; 0x282e <process_tapping+0x338>
    282c:	53 c0       	rjmp	.+166    	; 0x28d4 <process_tapping+0x3de>
    282e:	08 c0       	rjmp	.+16     	; 0x2840 <process_tapping+0x34a>
    2830:	20 95       	com	r18
    2832:	30 95       	com	r19
    2834:	2e 0d       	add	r18, r14
    2836:	3f 1d       	adc	r19, r15
    2838:	28 3c       	cpi	r18, 0xC8	; 200
    283a:	31 05       	cpc	r19, r1
    283c:	08 f0       	brcs	.+2      	; 0x2840 <process_tapping+0x34a>
    283e:	4a c0       	rjmp	.+148    	; 0x28d4 <process_tapping+0x3de>
            if (event.pressed) {
    2840:	dd 20       	and	r13, r13
    2842:	09 f4       	brne	.+2      	; 0x2846 <process_tapping+0x350>
    2844:	73 c0       	rjmp	.+230    	; 0x292c <process_tapping+0x436>
    2846:	6f 3f       	cpi	r22, 0xFF	; 255
    2848:	09 f0       	breq	.+2      	; 0x284c <process_tapping+0x356>
    284a:	9f c0       	rjmp	.+318    	; 0x298a <process_tapping+0x494>
    284c:	7f 3f       	cpi	r23, 0xFF	; 255
    284e:	09 f0       	breq	.+2      	; 0x2852 <process_tapping+0x35c>
    2850:	9c c0       	rjmp	.+312    	; 0x298a <process_tapping+0x494>
    2852:	29 c0       	rjmp	.+82     	; 0x28a6 <process_tapping+0x3b0>
                if (IS_TAPPING_KEY(event.key)) {
    2854:	74 17       	cp	r23, r20
    2856:	39 f5       	brne	.+78     	; 0x28a6 <process_tapping+0x3b0>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2858:	90 91 69 01 	lds	r25, 0x0169
    285c:	90 fd       	sbrc	r25, 0
    285e:	1a c0       	rjmp	.+52     	; 0x2894 <process_tapping+0x39e>
    2860:	89 2f       	mov	r24, r25
    2862:	82 95       	swap	r24
    2864:	8f 70       	andi	r24, 0x0F	; 15
    2866:	b1 f0       	breq	.+44     	; 0x2894 <process_tapping+0x39e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2868:	f8 01       	movw	r30, r16
    286a:	95 83       	std	Z+5, r25	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    286c:	8f 30       	cpi	r24, 0x0F	; 15
    286e:	31 f0       	breq	.+12     	; 0x287c <process_tapping+0x386>
    2870:	8f 5f       	subi	r24, 0xFF	; 255
    2872:	82 95       	swap	r24
    2874:	80 7f       	andi	r24, 0xF0	; 240
    2876:	9f 70       	andi	r25, 0x0F	; 15
    2878:	98 2b       	or	r25, r24
    287a:	95 83       	std	Z+5, r25	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    287c:	c8 01       	movw	r24, r16
    287e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>
                        tapping_key = *keyp;
    2882:	a4 e6       	ldi	r26, 0x64	; 100
    2884:	b1 e0       	ldi	r27, 0x01	; 1
    2886:	f8 01       	movw	r30, r16
    2888:	86 e0       	ldi	r24, 0x06	; 6
    288a:	01 90       	ld	r0, Z+
    288c:	0d 92       	st	X+, r0
    288e:	81 50       	subi	r24, 0x01	; 1
    2890:	e1 f7       	brne	.-8      	; 0x288a <process_tapping+0x394>
    2892:	48 c0       	rjmp	.+144    	; 0x2924 <process_tapping+0x42e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2894:	a4 e6       	ldi	r26, 0x64	; 100
    2896:	b1 e0       	ldi	r27, 0x01	; 1
    2898:	f8 01       	movw	r30, r16
    289a:	86 e0       	ldi	r24, 0x06	; 6
    289c:	01 90       	ld	r0, Z+
    289e:	0d 92       	st	X+, r0
    28a0:	81 50       	subi	r24, 0x01	; 1
    28a2:	e1 f7       	brne	.-8      	; 0x289c <process_tapping+0x3a6>
    28a4:	41 c0       	rjmp	.+130    	; 0x2928 <process_tapping+0x432>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    28a6:	5a 83       	std	Y+2, r21	; 0x02
    28a8:	49 83       	std	Y+1, r20	; 0x01
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <is_tap_key>
    28b2:	88 23       	and	r24, r24
    28b4:	49 f0       	breq	.+18     	; 0x28c8 <process_tapping+0x3d2>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    28b6:	a4 e6       	ldi	r26, 0x64	; 100
    28b8:	b1 e0       	ldi	r27, 0x01	; 1
    28ba:	f8 01       	movw	r30, r16
    28bc:	86 e0       	ldi	r24, 0x06	; 6
    28be:	01 90       	ld	r0, Z+
    28c0:	0d 92       	st	X+, r0
    28c2:	81 50       	subi	r24, 0x01	; 1
    28c4:	e1 f7       	brne	.-8      	; 0x28be <process_tapping+0x3c8>
    28c6:	2c c0       	rjmp	.+88     	; 0x2920 <process_tapping+0x42a>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    28c8:	80 91 69 01 	lds	r24, 0x0169
    28cc:	81 60       	ori	r24, 0x01	; 1
    28ce:	80 93 69 01 	sts	0x0169, r24
    28d2:	2c c0       	rjmp	.+88     	; 0x292c <process_tapping+0x436>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    28d4:	7e 2d       	mov	r23, r14
    28d6:	fd 82       	std	Y+5, r15	; 0x05
    28d8:	ec 82       	std	Y+4, r14	; 0x04
    28da:	5a 83       	std	Y+2, r21	; 0x02
    28dc:	49 83       	std	Y+1, r20	; 0x01
    28de:	db 82       	std	Y+3, r13	; 0x03
    28e0:	6d 2d       	mov	r22, r13
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <debug_event>
            tapping_key = (keyrecord_t){};
    28e8:	e4 e6       	ldi	r30, 0x64	; 100
    28ea:	f1 e0       	ldi	r31, 0x01	; 1
    28ec:	86 e0       	ldi	r24, 0x06	; 6
    28ee:	df 01       	movw	r26, r30
    28f0:	1d 92       	st	X+, r1
    28f2:	8a 95       	dec	r24
    28f4:	e9 f7       	brne	.-6      	; 0x28f0 <process_tapping+0x3fa>
            debug_tapping_key();
    28f6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <debug_tapping_key>
    28fa:	1c c0       	rjmp	.+56     	; 0x2934 <process_tapping+0x43e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    28fc:	dd 20       	and	r13, r13
    28fe:	b1 f0       	breq	.+44     	; 0x292c <process_tapping+0x436>
    2900:	5a 83       	std	Y+2, r21	; 0x02
    2902:	49 83       	std	Y+1, r20	; 0x01
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <is_tap_key>
    290c:	88 23       	and	r24, r24
    290e:	71 f0       	breq	.+28     	; 0x292c <process_tapping+0x436>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    2910:	a4 e6       	ldi	r26, 0x64	; 100
    2912:	b1 e0       	ldi	r27, 0x01	; 1
    2914:	f8 01       	movw	r30, r16
    2916:	86 e0       	ldi	r24, 0x06	; 6
    2918:	01 90       	ld	r0, Z+
    291a:	0d 92       	st	X+, r0
    291c:	81 50       	subi	r24, 0x01	; 1
    291e:	e1 f7       	brne	.-8      	; 0x2918 <process_tapping+0x422>
            waiting_buffer_scan_tap();
    2920:	0e 94 ff 11 	call	0x23fe	; 0x23fe <waiting_buffer_scan_tap>
            debug_tapping_key();
    2924:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <debug_tapping_key>
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <process_tapping+0x440>
            return true;
        } else {
            process_action(keyp);
    292c:	c8 01       	movw	r24, r16
    292e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <process_action>
    2932:	fa cf       	rjmp	.-12     	; 0x2928 <process_tapping+0x432>
            return true;
    2934:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    2936:	6b 96       	adiw	r28, 0x1b	; 27
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	08 95       	ret
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2952:	80 91 66 01 	lds	r24, 0x0166
    2956:	88 23       	and	r24, r24
    2958:	09 f4       	brne	.+2      	; 0x295c <process_tapping+0x466>
    295a:	58 cf       	rjmp	.-336    	; 0x280c <process_tapping+0x316>
    295c:	fb cd       	rjmp	.-1034   	; 0x2554 <process_tapping+0x5e>
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    295e:	65 17       	cp	r22, r21
    2960:	09 f0       	breq	.+2      	; 0x2964 <process_tapping+0x46e>
    2962:	2c ce       	rjmp	.-936    	; 0x25bc <process_tapping+0xc6>
    2964:	16 ce       	rjmp	.-980    	; 0x2592 <process_tapping+0x9c>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2966:	61 30       	cpi	r22, 0x01	; 1
    2968:	09 f4       	brne	.+2      	; 0x296c <process_tapping+0x476>
    296a:	98 ce       	rjmp	.-720    	; 0x269c <process_tapping+0x1a6>
    296c:	4d ce       	rjmp	.-870    	; 0x2608 <process_tapping+0x112>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    296e:	65 17       	cp	r22, r21
    2970:	09 f0       	breq	.+2      	; 0x2974 <process_tapping+0x47e>
    2972:	b8 ce       	rjmp	.-656    	; 0x26e4 <process_tapping+0x1ee>
    2974:	a3 ce       	rjmp	.-698    	; 0x26bc <process_tapping+0x1c6>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2976:	65 17       	cp	r22, r21
    2978:	09 f0       	breq	.+2      	; 0x297c <process_tapping+0x486>
    297a:	18 cf       	rjmp	.-464    	; 0x27ac <process_tapping+0x2b6>
    297c:	03 cf       	rjmp	.-506    	; 0x2784 <process_tapping+0x28e>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
    297e:	80 91 66 01 	lds	r24, 0x0166
    2982:	88 23       	and	r24, r24
    2984:	09 f0       	breq	.+2      	; 0x2988 <process_tapping+0x492>
    2986:	ba cf       	rjmp	.-140    	; 0x28fc <process_tapping+0x406>
    2988:	48 cf       	rjmp	.-368    	; 0x281a <process_tapping+0x324>
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
    298a:	65 17       	cp	r22, r21
    298c:	09 f0       	breq	.+2      	; 0x2990 <process_tapping+0x49a>
    298e:	8b cf       	rjmp	.-234    	; 0x28a6 <process_tapping+0x3b0>
    2990:	61 cf       	rjmp	.-318    	; 0x2854 <process_tapping+0x35e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2992:	5a 83       	std	Y+2, r21	; 0x02
    2994:	49 83       	std	Y+1, r20	; 0x01
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <layer_switch_get_action>
    299e:	48 2f       	mov	r20, r24
                    switch (action.kind.id) {
    29a0:	89 2f       	mov	r24, r25
    29a2:	82 95       	swap	r24
    29a4:	8f 70       	andi	r24, 0x0F	; 15
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	22 30       	cpi	r18, 0x02	; 2
    29ac:	31 05       	cpc	r19, r1
    29ae:	0c f4       	brge	.+2      	; 0x29b2 <process_tapping+0x4bc>
    29b0:	63 ce       	rjmp	.-826    	; 0x2678 <process_tapping+0x182>
    29b2:	24 30       	cpi	r18, 0x04	; 4
    29b4:	31 05       	cpc	r19, r1
    29b6:	0c f0       	brlt	.+2      	; 0x29ba <process_tapping+0x4c4>
    29b8:	b9 cf       	rjmp	.-142    	; 0x292c <process_tapping+0x436>
    29ba:	63 ce       	rjmp	.-826    	; 0x2682 <process_tapping+0x18c>

000029bc <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	2c 97       	sbiw	r28, 0x0c	; 12
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	4f 83       	std	Y+7, r20	; 0x07
    29d6:	58 87       	std	Y+8, r21	; 0x08
    29d8:	69 87       	std	Y+9, r22	; 0x09
    29da:	7a 87       	std	Y+10, r23	; 0x0a
    29dc:	8b 87       	std	Y+11, r24	; 0x0b
    29de:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    29e0:	8e 01       	movw	r16, r28
    29e2:	09 5f       	subi	r16, 0xF9	; 249
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	c8 01       	movw	r24, r16
    29e8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <process_tapping>
    29ec:	88 23       	and	r24, r24
    29ee:	d9 f0       	breq	.+54     	; 0x2a26 <action_tapping_process+0x6a>
        if (!IS_NOEVENT(record.event)) {
    29f0:	28 85       	ldd	r18, Y+8	; 0x08
    29f2:	3f 81       	ldd	r19, Y+7	; 0x07
    29f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    29f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    29f8:	89 2b       	or	r24, r25
    29fa:	09 f4       	brne	.+2      	; 0x29fe <action_tapping_process+0x42>
    29fc:	6b c0       	rjmp	.+214    	; 0x2ad4 <action_tapping_process+0x118>
    29fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2a00:	49 f4       	brne	.+18     	; 0x2a14 <action_tapping_process+0x58>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	3f 3f       	cpi	r19, 0xFF	; 255
    2a08:	11 f4       	brne	.+4      	; 0x2a0e <action_tapping_process+0x52>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	88 23       	and	r24, r24
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <action_tapping_process+0x58>
    2a12:	60 c0       	rjmp	.+192    	; 0x2ad4 <action_tapping_process+0x118>
            debug("processed: "); debug_record(record); debug("\n");
    2a14:	4f 81       	ldd	r20, Y+7	; 0x07
    2a16:	58 85       	ldd	r21, Y+8	; 0x08
    2a18:	69 85       	ldd	r22, Y+9	; 0x09
    2a1a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a20:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <debug_record>
    2a24:	57 c0       	rjmp	.+174    	; 0x2ad4 <action_tapping_process+0x118>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
    2a26:	de 01       	movw	r26, r28
    2a28:	11 96       	adiw	r26, 0x01	; 1
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	86 e0       	ldi	r24, 0x06	; 6
    2a2e:	01 90       	ld	r0, Z+
    2a30:	0d 92       	st	X+, r0
    2a32:	81 50       	subi	r24, 0x01	; 1
    2a34:	e1 f7       	brne	.-8      	; 0x2a2e <action_tapping_process+0x72>
    2a36:	f9 81       	ldd	r31, Y+1	; 0x01
    2a38:	ea 81       	ldd	r30, Y+2	; 0x02
    2a3a:	4c 81       	ldd	r20, Y+4	; 0x04
    2a3c:	5d 81       	ldd	r21, Y+5	; 0x05
    2a3e:	41 15       	cp	r20, r1
    2a40:	51 05       	cpc	r21, r1
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <action_tapping_process+0x8a>
    2a44:	47 c0       	rjmp	.+142    	; 0x2ad4 <action_tapping_process+0x118>
    2a46:	ef 3f       	cpi	r30, 0xFF	; 255
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <action_tapping_process+0x90>
    2a4a:	4c c0       	rjmp	.+152    	; 0x2ae4 <action_tapping_process+0x128>
    2a4c:	ff 3f       	cpi	r31, 0xFF	; 255
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <action_tapping_process+0x96>
    2a50:	49 c0       	rjmp	.+146    	; 0x2ae4 <action_tapping_process+0x128>
    2a52:	40 c0       	rjmp	.+128    	; 0x2ad4 <action_tapping_process+0x118>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2a54:	f9 83       	std	Y+1, r31	; 0x01
    2a56:	ea 83       	std	Y+2, r30	; 0x02
    2a58:	5d 83       	std	Y+5, r21	; 0x05
    2a5a:	4c 83       	std	Y+4, r20	; 0x04
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	ee 0f       	add	r30, r30
    2a60:	ff 1f       	adc	r31, r31
    2a62:	e2 0f       	add	r30, r18
    2a64:	f3 1f       	adc	r31, r19
    2a66:	ee 0f       	add	r30, r30
    2a68:	ff 1f       	adc	r31, r31
    2a6a:	e4 59       	subi	r30, 0x94	; 148
    2a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6e:	de 01       	movw	r26, r28
    2a70:	11 96       	adiw	r26, 0x01	; 1
    2a72:	86 e0       	ldi	r24, 0x06	; 6
    2a74:	0d 90       	ld	r0, X+
    2a76:	01 92       	st	Z+, r0
    2a78:	81 50       	subi	r24, 0x01	; 1
    2a7a:	e1 f7       	brne	.-8      	; 0x2a74 <action_tapping_process+0xb8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2a7c:	60 93 6a 01 	sts	0x016A, r22

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2a80:	0e 94 cf 11 	call	0x239e	; 0x239e <debug_waiting_buffer>
    2a84:	27 c0       	rjmp	.+78     	; 0x2ad4 <action_tapping_process+0x118>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2a86:	91 9f       	mul	r25, r17
    2a88:	c0 01       	movw	r24, r0
    2a8a:	11 24       	eor	r1, r1
    2a8c:	84 59       	subi	r24, 0x94	; 148
    2a8e:	9e 4f       	sbci	r25, 0xFE	; 254
    2a90:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <process_tapping>
    2a94:	88 23       	and	r24, r24
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <action_tapping_process+0xde>
    2a98:	45 c0       	rjmp	.+138    	; 0x2b24 <action_tapping_process+0x168>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2a9a:	80 91 6b 01 	lds	r24, 0x016B
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	ee 0f       	add	r30, r30
    2aa4:	ff 1f       	adc	r31, r31
    2aa6:	e8 0f       	add	r30, r24
    2aa8:	f9 1f       	adc	r31, r25
    2aaa:	ee 0f       	add	r30, r30
    2aac:	ff 1f       	adc	r31, r31
    2aae:	e4 59       	subi	r30, 0x94	; 148
    2ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab2:	40 81       	ld	r20, Z
    2ab4:	51 81       	ldd	r21, Z+1	; 0x01
    2ab6:	62 81       	ldd	r22, Z+2	; 0x02
    2ab8:	73 81       	ldd	r23, Z+3	; 0x03
    2aba:	84 81       	ldd	r24, Z+4	; 0x04
    2abc:	95 81       	ldd	r25, Z+5	; 0x05
    2abe:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2ac2:	80 91 6b 01 	lds	r24, 0x016B
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	87 70       	andi	r24, 0x07	; 7
    2acc:	90 70       	andi	r25, 0x00	; 0
    2ace:	80 93 6b 01 	sts	0x016B, r24
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <action_tapping_process+0x11a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2ad4:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2ad6:	90 91 6b 01 	lds	r25, 0x016B
    2ada:	80 91 6a 01 	lds	r24, 0x016A
    2ade:	98 17       	cp	r25, r24
    2ae0:	91 f6       	brne	.-92     	; 0x2a86 <action_tapping_process+0xca>
    2ae2:	20 c0       	rjmp	.+64     	; 0x2b24 <action_tapping_process+0x168>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2ae4:	80 91 6a 01 	lds	r24, 0x016A
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	2f 5f       	subi	r18, 0xFF	; 255
    2aee:	3f 4f       	sbci	r19, 0xFF	; 255
    2af0:	b9 01       	movw	r22, r18
    2af2:	67 70       	andi	r22, 0x07	; 7
    2af4:	70 70       	andi	r23, 0x00	; 0
    2af6:	21 50       	subi	r18, 0x01	; 1
    2af8:	30 40       	sbci	r19, 0x00	; 0
    2afa:	80 91 6b 01 	lds	r24, 0x016B
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	68 17       	cp	r22, r24
    2b02:	79 07       	cpc	r23, r25
    2b04:	09 f0       	breq	.+2      	; 0x2b08 <action_tapping_process+0x14c>
    2b06:	a6 cf       	rjmp	.-180    	; 0x2a54 <action_tapping_process+0x98>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2b08:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2b0c:	10 92 6a 01 	sts	0x016A, r1
    waiting_buffer_tail = 0;
    2b10:	10 92 6b 01 	sts	0x016B, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2b14:	e4 e6       	ldi	r30, 0x64	; 100
    2b16:	f1 e0       	ldi	r31, 0x01	; 1
    2b18:	86 e0       	ldi	r24, 0x06	; 6
    2b1a:	df 01       	movw	r26, r30
    2b1c:	1d 92       	st	X+, r1
    2b1e:	8a 95       	dec	r24
    2b20:	e9 f7       	brne	.-6      	; 0x2b1c <action_tapping_process+0x160>
    2b22:	d8 cf       	rjmp	.-80     	; 0x2ad4 <action_tapping_process+0x118>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2b24:	2c 96       	adiw	r28, 0x0c	; 12
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	08 95       	ret

00002b3a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2b3a:	cf 92       	push	r12
    2b3c:	df 92       	push	r13
    2b3e:	ef 92       	push	r14
    2b40:	ff 92       	push	r15
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <action_macro_play+0x16>
    2b4e:	64 c0       	rjmp	.+200    	; 0x2c18 <action_macro_play+0xde>
    2b50:	10 e0       	ldi	r17, 0x00	; 0
    2b52:	90 ea       	ldi	r25, 0xA0	; 160
    2b54:	c9 2e       	mov	r12, r25
    2b56:	9f e0       	ldi	r25, 0x0F	; 15
    2b58:	d9 2e       	mov	r13, r25
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	e8 2e       	mov	r14, r24
    2b5e:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2b60:	fe 01       	movw	r30, r28
    2b62:	21 96       	adiw	r28, 0x01	; 1
    2b64:	94 91       	lpm	r25, Z+
    2b66:	94 37       	cpi	r25, 0x74	; 116
    2b68:	48 f4       	brcc	.+18     	; 0x2b7c <action_macro_play+0x42>
    2b6a:	94 30       	cpi	r25, 0x04	; 4
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <action_macro_play+0x36>
    2b6e:	42 c0       	rjmp	.+132    	; 0x2bf4 <action_macro_play+0xba>
    2b70:	91 30       	cpi	r25, 0x01	; 1
    2b72:	79 f0       	breq	.+30     	; 0x2b92 <action_macro_play+0x58>
    2b74:	92 30       	cpi	r25, 0x02	; 2
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <action_macro_play+0x40>
    2b78:	4f c0       	rjmp	.+158    	; 0x2c18 <action_macro_play+0xde>
    2b7a:	1b c0       	rjmp	.+54     	; 0x2bb2 <action_macro_play+0x78>
    2b7c:	95 37       	cpi	r25, 0x75	; 117
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <action_macro_play+0x48>
    2b80:	35 c0       	rjmp	.+106    	; 0x2bec <action_macro_play+0xb2>
    2b82:	95 37       	cpi	r25, 0x75	; 117
    2b84:	40 f1       	brcs	.+80     	; 0x2bd6 <action_macro_play+0x9c>
    2b86:	89 2f       	mov	r24, r25
    2b88:	84 58       	subi	r24, 0x84	; 132
    2b8a:	80 37       	cpi	r24, 0x70	; 112
    2b8c:	08 f0       	brcs	.+2      	; 0x2b90 <action_macro_play+0x56>
    2b8e:	44 c0       	rjmp	.+136    	; 0x2c18 <action_macro_play+0xde>
    2b90:	35 c0       	rjmp	.+106    	; 0x2bfc <action_macro_play+0xc2>
            case KEY_DOWN:
                MACRO_READ();
    2b92:	fe 01       	movw	r30, r28
    2b94:	21 96       	adiw	r28, 0x01	; 1
    2b96:	94 91       	lpm	r25, Z+
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2b98:	89 2f       	mov	r24, r25
    2b9a:	80 5e       	subi	r24, 0xE0	; 224
    2b9c:	88 30       	cpi	r24, 0x08	; 8
    2b9e:	50 f5       	brcc	.+84     	; 0x2bf4 <action_macro_play+0xba>
                    add_weak_mods(MOD_BIT(macro));
    2ba0:	97 70       	andi	r25, 0x07	; 7
    2ba2:	8e 2d       	mov	r24, r14
    2ba4:	01 c0       	rjmp	.+2      	; 0x2ba8 <action_macro_play+0x6e>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	9a 95       	dec	r25
    2baa:	ea f7       	brpl	.-6      	; 0x2ba6 <action_macro_play+0x6c>
    2bac:	0e 94 99 17 	call	0x2f32	; 0x2f32 <add_weak_mods>
    2bb0:	29 c0       	rjmp	.+82     	; 0x2c04 <action_macro_play+0xca>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	21 96       	adiw	r28, 0x01	; 1
    2bb6:	94 91       	lpm	r25, Z+
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2bb8:	89 2f       	mov	r24, r25
    2bba:	80 5e       	subi	r24, 0xE0	; 224
    2bbc:	88 30       	cpi	r24, 0x08	; 8
    2bbe:	48 f4       	brcc	.+18     	; 0x2bd2 <action_macro_play+0x98>
                    del_weak_mods(MOD_BIT(macro));
    2bc0:	97 70       	andi	r25, 0x07	; 7
    2bc2:	8e 2d       	mov	r24, r14
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <action_macro_play+0x8e>
    2bc6:	88 0f       	add	r24, r24
    2bc8:	9a 95       	dec	r25
    2bca:	ea f7       	brpl	.-6      	; 0x2bc6 <action_macro_play+0x8c>
    2bcc:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <del_weak_mods>
    2bd0:	19 c0       	rjmp	.+50     	; 0x2c04 <action_macro_play+0xca>
                } else {
                    unregister_code(macro);
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	15 c0       	rjmp	.+42     	; 0x2c00 <action_macro_play+0xc6>
                }
                break;
            case WAIT:
                MACRO_READ();
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	24 91       	lpm	r18, Z+
    2bda:	04 c0       	rjmp	.+8      	; 0x2be4 <action_macro_play+0xaa>
    2bdc:	c6 01       	movw	r24, r12
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <action_macro_play+0xa4>
    2be2:	21 50       	subi	r18, 0x01	; 1
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    2be4:	22 23       	and	r18, r18
    2be6:	d1 f7       	brne	.-12     	; 0x2bdc <action_macro_play+0xa2>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    2be8:	21 96       	adiw	r28, 0x01	; 1
    2bea:	0c c0       	rjmp	.+24     	; 0x2c04 <action_macro_play+0xca>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    2bec:	fe 01       	movw	r30, r28
    2bee:	21 96       	adiw	r28, 0x01	; 1
    2bf0:	14 91       	lpm	r17, Z+
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <action_macro_play+0xca>
                dprintf("INTERVAL(%u)\n", interval);
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    2bf4:	89 2f       	mov	r24, r25
    2bf6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <register_code>
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <action_macro_play+0xca>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2bfc:	89 2f       	mov	r24, r25
    2bfe:	8f 77       	andi	r24, 0x7F	; 127
    2c00:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <unregister_code>
    2c04:	21 2f       	mov	r18, r17
    2c06:	04 c0       	rjmp	.+8      	; 0x2c10 <action_macro_play+0xd6>
    2c08:	c6 01       	movw	r24, r12
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <action_macro_play+0xd0>
    2c0e:	21 50       	subi	r18, 0x01	; 1
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    2c10:	22 23       	and	r18, r18
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <action_macro_play+0xdc>
    2c14:	a5 cf       	rjmp	.-182    	; 0x2b60 <action_macro_play+0x26>
    2c16:	f8 cf       	rjmp	.-16     	; 0x2c08 <action_macro_play+0xce>
    }
}
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	1f 91       	pop	r17
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	df 90       	pop	r13
    2c24:	cf 90       	pop	r12
    2c26:	08 95       	ret

00002c28 <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    2c28:	08 95       	ret

00002c2a <layer_debug>:
}

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    2c2a:	08 95       	ret

00002c2c <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    2c2c:	cf 92       	push	r12
    2c2e:	df 92       	push	r13
    2c30:	ef 92       	push	r14
    2c32:	ff 92       	push	r15
    2c34:	0f 93       	push	r16
    2c36:	1f 93       	push	r17
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    2c3e:	e0 90 9c 01 	lds	r14, 0x019C
    2c42:	f0 90 9d 01 	lds	r15, 0x019D
    2c46:	00 91 9e 01 	lds	r16, 0x019E
    2c4a:	10 91 9f 01 	lds	r17, 0x019F
    2c4e:	80 91 a0 01 	lds	r24, 0x01A0
    2c52:	90 91 a1 01 	lds	r25, 0x01A1
    2c56:	a0 91 a2 01 	lds	r26, 0x01A2
    2c5a:	b0 91 a3 01 	lds	r27, 0x01A3
    2c5e:	e8 2a       	or	r14, r24
    2c60:	f9 2a       	or	r15, r25
    2c62:	0a 2b       	or	r16, r26
    2c64:	1b 2b       	or	r17, r27
    2c66:	cf e1       	ldi	r28, 0x1F	; 31
    2c68:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2c6a:	d8 01       	movw	r26, r16
    2c6c:	c7 01       	movw	r24, r14
    2c6e:	0c 2e       	mov	r0, r28
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <layer_switch_get_action+0x4e>
    2c72:	b6 95       	lsr	r27
    2c74:	a7 95       	ror	r26
    2c76:	97 95       	ror	r25
    2c78:	87 95       	ror	r24
    2c7a:	0a 94       	dec	r0
    2c7c:	d2 f7       	brpl	.-12     	; 0x2c72 <layer_switch_get_action+0x46>
    2c7e:	81 70       	andi	r24, 0x01	; 1
    2c80:	90 70       	andi	r25, 0x00	; 0
    2c82:	89 2b       	or	r24, r25
    2c84:	41 f0       	breq	.+16     	; 0x2c96 <layer_switch_get_action+0x6a>
            action = action_for_key(i, key);
    2c86:	8c 2f       	mov	r24, r28
    2c88:	b6 01       	movw	r22, r12
    2c8a:	0e 94 76 03 	call	0x6ec	; 0x6ec <action_for_key>
    2c8e:	9c 01       	movw	r18, r24
            if (action.code != ACTION_TRANSPARENT) {
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	91 05       	cpc	r25, r1
    2c94:	51 f4       	brne	.+20     	; 0x2caa <layer_switch_get_action+0x7e>
                return action;
    2c96:	21 97       	sbiw	r28, 0x01	; 1
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	cf 3f       	cpi	r28, 0xFF	; 255
    2c9c:	d8 07       	cpc	r29, r24
    2c9e:	29 f7       	brne	.-54     	; 0x2c6a <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	b6 01       	movw	r22, r12
    2ca4:	0e 94 76 03 	call	0x6ec	; 0x6ec <action_for_key>
    2ca8:	9c 01       	movw	r18, r24
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    2caa:	82 2f       	mov	r24, r18
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	ff 90       	pop	r15
    2cb6:	ef 90       	pop	r14
    2cb8:	df 90       	pop	r13
    2cba:	cf 90       	pop	r12
    2cbc:	08 95       	ret

00002cbe <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2cbe:	60 93 a0 01 	sts	0x01A0, r22
    2cc2:	70 93 a1 01 	sts	0x01A1, r23
    2cc6:	80 93 a2 01 	sts	0x01A2, r24
    2cca:	90 93 a3 01 	sts	0x01A3, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2cce:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <clear_keyboard_but_mods>
}
    2cd2:	08 95       	ret

00002cd4 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    2cd4:	9b 01       	movw	r18, r22
    2cd6:	ac 01       	movw	r20, r24
    layer_state_set(layer_state ^ state);
    2cd8:	60 91 a0 01 	lds	r22, 0x01A0
    2cdc:	70 91 a1 01 	lds	r23, 0x01A1
    2ce0:	80 91 a2 01 	lds	r24, 0x01A2
    2ce4:	90 91 a3 01 	lds	r25, 0x01A3
    2ce8:	62 27       	eor	r22, r18
    2cea:	73 27       	eor	r23, r19
    2cec:	84 27       	eor	r24, r20
    2cee:	95 27       	eor	r25, r21
    2cf0:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2cf4:	08 95       	ret

00002cf6 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    layer_state_set(layer_state & state);
    2cfa:	60 91 a0 01 	lds	r22, 0x01A0
    2cfe:	70 91 a1 01 	lds	r23, 0x01A1
    2d02:	80 91 a2 01 	lds	r24, 0x01A2
    2d06:	90 91 a3 01 	lds	r25, 0x01A3
    2d0a:	62 23       	and	r22, r18
    2d0c:	73 23       	and	r23, r19
    2d0e:	84 23       	and	r24, r20
    2d10:	95 23       	and	r25, r21
    2d12:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2d16:	08 95       	ret

00002d18 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    2d18:	9b 01       	movw	r18, r22
    2d1a:	ac 01       	movw	r20, r24
    layer_state_set(layer_state | state);
    2d1c:	60 91 a0 01 	lds	r22, 0x01A0
    2d20:	70 91 a1 01 	lds	r23, 0x01A1
    2d24:	80 91 a2 01 	lds	r24, 0x01A2
    2d28:	90 91 a3 01 	lds	r25, 0x01A3
    2d2c:	62 2b       	or	r22, r18
    2d2e:	73 2b       	or	r23, r19
    2d30:	84 2b       	or	r24, r20
    2d32:	95 2b       	or	r25, r21
    2d34:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2d38:	08 95       	ret

00002d3a <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    2d3a:	21 e0       	ldi	r18, 0x01	; 1
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	04 c0       	rjmp	.+8      	; 0x2d4c <layer_invert+0x12>
    2d44:	22 0f       	add	r18, r18
    2d46:	33 1f       	adc	r19, r19
    2d48:	44 1f       	adc	r20, r20
    2d4a:	55 1f       	adc	r21, r21
    2d4c:	8a 95       	dec	r24
    2d4e:	d2 f7       	brpl	.-12     	; 0x2d44 <layer_invert+0xa>
    2d50:	80 91 a0 01 	lds	r24, 0x01A0
    2d54:	90 91 a1 01 	lds	r25, 0x01A1
    2d58:	a0 91 a2 01 	lds	r26, 0x01A2
    2d5c:	b0 91 a3 01 	lds	r27, 0x01A3
    2d60:	28 27       	eor	r18, r24
    2d62:	39 27       	eor	r19, r25
    2d64:	4a 27       	eor	r20, r26
    2d66:	5b 27       	eor	r21, r27
    2d68:	ca 01       	movw	r24, r20
    2d6a:	b9 01       	movw	r22, r18
    2d6c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2d70:	08 95       	ret

00002d72 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2d72:	21 e0       	ldi	r18, 0x01	; 1
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e0       	ldi	r20, 0x00	; 0
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	04 c0       	rjmp	.+8      	; 0x2d84 <layer_off+0x12>
    2d7c:	22 0f       	add	r18, r18
    2d7e:	33 1f       	adc	r19, r19
    2d80:	44 1f       	adc	r20, r20
    2d82:	55 1f       	adc	r21, r21
    2d84:	8a 95       	dec	r24
    2d86:	d2 f7       	brpl	.-12     	; 0x2d7c <layer_off+0xa>
    2d88:	20 95       	com	r18
    2d8a:	30 95       	com	r19
    2d8c:	40 95       	com	r20
    2d8e:	50 95       	com	r21
    2d90:	80 91 a0 01 	lds	r24, 0x01A0
    2d94:	90 91 a1 01 	lds	r25, 0x01A1
    2d98:	a0 91 a2 01 	lds	r26, 0x01A2
    2d9c:	b0 91 a3 01 	lds	r27, 0x01A3
    2da0:	28 23       	and	r18, r24
    2da2:	39 23       	and	r19, r25
    2da4:	4a 23       	and	r20, r26
    2da6:	5b 23       	and	r21, r27
    2da8:	ca 01       	movw	r24, r20
    2daa:	b9 01       	movw	r22, r18
    2dac:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2db0:	08 95       	ret

00002db2 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2db2:	21 e0       	ldi	r18, 0x01	; 1
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e0       	ldi	r20, 0x00	; 0
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <layer_on+0x12>
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	44 1f       	adc	r20, r20
    2dc2:	55 1f       	adc	r21, r21
    2dc4:	8a 95       	dec	r24
    2dc6:	d2 f7       	brpl	.-12     	; 0x2dbc <layer_on+0xa>
    2dc8:	80 91 a0 01 	lds	r24, 0x01A0
    2dcc:	90 91 a1 01 	lds	r25, 0x01A1
    2dd0:	a0 91 a2 01 	lds	r26, 0x01A2
    2dd4:	b0 91 a3 01 	lds	r27, 0x01A3
    2dd8:	28 2b       	or	r18, r24
    2dda:	39 2b       	or	r19, r25
    2ddc:	4a 2b       	or	r20, r26
    2dde:	5b 2b       	or	r21, r27
    2de0:	ca 01       	movw	r24, r20
    2de2:	b9 01       	movw	r22, r18
    2de4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2de8:	08 95       	ret

00002dea <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2dea:	21 e0       	ldi	r18, 0x01	; 1
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e0       	ldi	r20, 0x00	; 0
    2df0:	50 e0       	ldi	r21, 0x00	; 0
    2df2:	04 c0       	rjmp	.+8      	; 0x2dfc <layer_move+0x12>
    2df4:	22 0f       	add	r18, r18
    2df6:	33 1f       	adc	r19, r19
    2df8:	44 1f       	adc	r20, r20
    2dfa:	55 1f       	adc	r21, r21
    2dfc:	8a 95       	dec	r24
    2dfe:	d2 f7       	brpl	.-12     	; 0x2df4 <layer_move+0xa>
    2e00:	ca 01       	movw	r24, r20
    2e02:	b9 01       	movw	r22, r18
    2e04:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2e08:	08 95       	ret

00002e0a <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <layer_state_set>
}
    2e16:	08 95       	ret

00002e18 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2e18:	60 93 9c 01 	sts	0x019C, r22
    2e1c:	70 93 9d 01 	sts	0x019D, r23
    2e20:	80 93 9e 01 	sts	0x019E, r24
    2e24:	90 93 9f 01 	sts	0x019F, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2e28:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <clear_keyboard_but_mods>
}
    2e2c:	08 95       	ret

00002e2e <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    2e2e:	9b 01       	movw	r18, r22
    2e30:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state ^ state);
    2e32:	60 91 9c 01 	lds	r22, 0x019C
    2e36:	70 91 9d 01 	lds	r23, 0x019D
    2e3a:	80 91 9e 01 	lds	r24, 0x019E
    2e3e:	90 91 9f 01 	lds	r25, 0x019F
    2e42:	62 27       	eor	r22, r18
    2e44:	73 27       	eor	r23, r19
    2e46:	84 27       	eor	r24, r20
    2e48:	95 27       	eor	r25, r21
    2e4a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <default_layer_state_set>
}
    2e4e:	08 95       	ret

00002e50 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    2e50:	9b 01       	movw	r18, r22
    2e52:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state & state);
    2e54:	60 91 9c 01 	lds	r22, 0x019C
    2e58:	70 91 9d 01 	lds	r23, 0x019D
    2e5c:	80 91 9e 01 	lds	r24, 0x019E
    2e60:	90 91 9f 01 	lds	r25, 0x019F
    2e64:	62 23       	and	r22, r18
    2e66:	73 23       	and	r23, r19
    2e68:	84 23       	and	r24, r20
    2e6a:	95 23       	and	r25, r21
    2e6c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <default_layer_state_set>
}
    2e70:	08 95       	ret

00002e72 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2e72:	9b 01       	movw	r18, r22
    2e74:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state | state);
    2e76:	60 91 9c 01 	lds	r22, 0x019C
    2e7a:	70 91 9d 01 	lds	r23, 0x019D
    2e7e:	80 91 9e 01 	lds	r24, 0x019E
    2e82:	90 91 9f 01 	lds	r25, 0x019F
    2e86:	62 2b       	or	r22, r18
    2e88:	73 2b       	or	r23, r19
    2e8a:	84 2b       	or	r24, r20
    2e8c:	95 2b       	or	r25, r21
    2e8e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <default_layer_state_set>
}
    2e92:	08 95       	ret

00002e94 <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    2e94:	38 2f       	mov	r19, r24
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2e96:	a0 91 03 01 	lds	r26, 0x0103
    2e9a:	b0 91 04 01 	lds	r27, 0x0104
    2e9e:	fd 01       	movw	r30, r26
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
    2ea4:	92 81       	ldd	r25, Z+2	; 0x02
    2ea6:	93 17       	cp	r25, r19
    2ea8:	91 f0       	breq	.+36     	; 0x2ece <add_key+0x3a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    2eaa:	8f 3f       	cpi	r24, 0xFF	; 255
    2eac:	19 f4       	brne	.+6      	; 0x2eb4 <add_key+0x20>
    2eae:	99 23       	and	r25, r25
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <add_key+0x20>
    2eb2:	82 2f       	mov	r24, r18
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    2eb4:	2f 5f       	subi	r18, 0xFF	; 255
    2eb6:	31 96       	adiw	r30, 0x01	; 1
    2eb8:	26 30       	cpi	r18, 0x06	; 6
    2eba:	a1 f7       	brne	.-24     	; 0x2ea4 <add_key+0x10>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    2ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ebe:	39 f0       	breq	.+14     	; 0x2ece <add_key+0x3a>
            keyboard_report->keys[empty] = code;
    2ec0:	99 27       	eor	r25, r25
    2ec2:	87 fd       	sbrc	r24, 7
    2ec4:	90 95       	com	r25
    2ec6:	a8 0f       	add	r26, r24
    2ec8:	b9 1f       	adc	r27, r25
    2eca:	12 96       	adiw	r26, 0x02	; 2
    2ecc:	3c 93       	st	X, r19
    2ece:	08 95       	ret

00002ed0 <del_key>:
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
{
    2ed0:	98 2f       	mov	r25, r24
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2ed6:	e0 91 03 01 	lds	r30, 0x0103
    2eda:	f0 91 04 01 	lds	r31, 0x0104
    2ede:	e2 0f       	add	r30, r18
    2ee0:	f3 1f       	adc	r31, r19
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	89 17       	cp	r24, r25
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    2ee8:	12 82       	std	Z+2, r1	; 0x02
    2eea:	2f 5f       	subi	r18, 0xFF	; 255
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    2eee:	26 30       	cpi	r18, 0x06	; 6
    2ef0:	31 05       	cpc	r19, r1
    2ef2:	89 f7       	brne	.-30     	; 0x2ed6 <del_key+0x6>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    2ef4:	08 95       	ret

00002ef6 <clear_keys>:

void clear_keys(void)
{
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    2efa:	e0 91 03 01 	lds	r30, 0x0103
    2efe:	f0 91 04 01 	lds	r31, 0x0104
    2f02:	e8 0f       	add	r30, r24
    2f04:	f9 1f       	adc	r31, r25
    2f06:	10 82       	st	Z, r1
    2f08:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2f0a:	88 30       	cpi	r24, 0x08	; 8
    2f0c:	91 05       	cpc	r25, r1
    2f0e:	a9 f7       	brne	.-22     	; 0x2efa <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    2f10:	08 95       	ret

00002f12 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    2f12:	90 91 ac 01 	lds	r25, 0x01AC
    2f16:	98 2b       	or	r25, r24
    2f18:	90 93 ac 01 	sts	0x01AC, r25
    2f1c:	08 95       	ret

00002f1e <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    2f1e:	80 95       	com	r24
    2f20:	90 91 ac 01 	lds	r25, 0x01AC
    2f24:	98 23       	and	r25, r24
    2f26:	90 93 ac 01 	sts	0x01AC, r25
    2f2a:	08 95       	ret

00002f2c <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    2f2c:	10 92 ac 01 	sts	0x01AC, r1
    2f30:	08 95       	ret

00002f32 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    2f32:	90 91 ae 01 	lds	r25, 0x01AE
    2f36:	98 2b       	or	r25, r24
    2f38:	90 93 ae 01 	sts	0x01AE, r25
    2f3c:	08 95       	ret

00002f3e <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    2f3e:	80 95       	com	r24
    2f40:	90 91 ae 01 	lds	r25, 0x01AE
    2f44:	98 23       	and	r25, r24
    2f46:	90 93 ae 01 	sts	0x01AE, r25
    2f4a:	08 95       	ret

00002f4c <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    2f4c:	10 92 ae 01 	sts	0x01AE, r1
    2f50:	08 95       	ret

00002f52 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2f52:	80 93 ad 01 	sts	0x01AD, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    2f56:	08 95       	ret

00002f58 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2f58:	10 92 ad 01 	sts	0x01AD, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    2f5c:	08 95       	ret

00002f5e <has_anykey>:

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    2f5e:	e0 91 03 01 	lds	r30, 0x0103
    2f62:	f0 91 04 01 	lds	r31, 0x0104
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2f6a:	81 81       	ldd	r24, Z+1	; 0x01
    2f6c:	81 11       	cpse	r24, r1
            cnt++;
    2f6e:	2f 5f       	subi	r18, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2f70:	9f 5f       	subi	r25, 0xFF	; 255
    2f72:	31 96       	adiw	r30, 0x01	; 1
    2f74:	98 30       	cpi	r25, 0x08	; 8
    2f76:	c9 f7       	brne	.-14     	; 0x2f6a <has_anykey+0xc>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2f78:	82 2f       	mov	r24, r18
    2f7a:	08 95       	ret

00002f7c <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2f7c:	e0 91 03 01 	lds	r30, 0x0103
    2f80:	f0 91 04 01 	lds	r31, 0x0104
    2f84:	80 91 ac 01 	lds	r24, 0x01AC
    2f88:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2f8a:	e0 91 03 01 	lds	r30, 0x0103
    2f8e:	f0 91 04 01 	lds	r31, 0x0104
    2f92:	80 81       	ld	r24, Z
    2f94:	90 91 ae 01 	lds	r25, 0x01AE
    2f98:	89 2b       	or	r24, r25
    2f9a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2f9c:	90 91 ad 01 	lds	r25, 0x01AD
    2fa0:	99 23       	and	r25, r25
    2fa2:	69 f0       	breq	.+26     	; 0x2fbe <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2fa4:	e0 91 03 01 	lds	r30, 0x0103
    2fa8:	f0 91 04 01 	lds	r31, 0x0104
    2fac:	80 81       	ld	r24, Z
    2fae:	89 2b       	or	r24, r25
    2fb0:	80 83       	st	Z, r24
        if (has_anykey()) {
    2fb2:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <has_anykey>
    2fb6:	88 23       	and	r24, r24
    2fb8:	11 f0       	breq	.+4      	; 0x2fbe <send_keyboard_report+0x42>
            clear_oneshot_mods();
    2fba:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    2fbe:	80 91 03 01 	lds	r24, 0x0103
    2fc2:	90 91 04 01 	lds	r25, 0x0104
    2fc6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <host_keyboard_send>
}
    2fca:	08 95       	ret

00002fcc <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    2fcc:	1f 92       	push	r1
    2fce:	0f 92       	push	r0
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	0f 92       	push	r0
    2fd4:	11 24       	eor	r1, r1
    2fd6:	8f 93       	push	r24
    2fd8:	9f 93       	push	r25
    2fda:	af 93       	push	r26
    2fdc:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    2fde:	80 91 b0 01 	lds	r24, 0x01B0
    2fe2:	88 23       	and	r24, r24
    2fe4:	99 f4       	brne	.+38     	; 0x300c <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    2fe6:	80 91 b1 01 	lds	r24, 0x01B1
    2fea:	90 91 b2 01 	lds	r25, 0x01B2
    2fee:	a0 91 b3 01 	lds	r26, 0x01B3
    2ff2:	b0 91 b4 01 	lds	r27, 0x01B4
    2ff6:	41 96       	adiw	r24, 0x11	; 17
    2ff8:	a1 1d       	adc	r26, r1
    2ffa:	b1 1d       	adc	r27, r1
    2ffc:	80 93 b1 01 	sts	0x01B1, r24
    3000:	90 93 b2 01 	sts	0x01B2, r25
    3004:	a0 93 b3 01 	sts	0x01B3, r26
    3008:	b0 93 b4 01 	sts	0x01B4, r27
            break;
        default:
            ;
    }
}
    300c:	bf 91       	pop	r27
    300e:	af 91       	pop	r26
    3010:	9f 91       	pop	r25
    3012:	8f 91       	pop	r24
    3014:	0f 90       	pop	r0
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	0f 90       	pop	r0
    301a:	1f 90       	pop	r1
    301c:	18 95       	reti

0000301e <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    301e:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    3022:	08 95       	ret

00003024 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3024:	82 e0       	ldi	r24, 0x02	; 2
    3026:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3028:	93 e0       	ldi	r25, 0x03	; 3
    302a:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    302c:	9a ef       	ldi	r25, 0xFA	; 250
    302e:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3030:	80 93 6e 00 	sts	0x006E, r24
}
    3034:	08 95       	ret

00003036 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3036:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3038:	f8 94       	cli
    t = timer_count;
    303a:	20 91 b1 01 	lds	r18, 0x01B1
    303e:	30 91 b2 01 	lds	r19, 0x01B2
    3042:	40 91 b3 01 	lds	r20, 0x01B3
    3046:	50 91 b4 01 	lds	r21, 0x01B4
    SREG = sreg;
    304a:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    304c:	c9 01       	movw	r24, r18
    304e:	08 95       	ret

00003050 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3050:	ef 92       	push	r14
    3052:	ff 92       	push	r15
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	bc 01       	movw	r22, r24
    uint32_t t;

    uint8_t sreg = SREG;
    305a:	8f b7       	in	r24, 0x3f	; 63
    cli();
    305c:	f8 94       	cli
    t = timer_count;
    305e:	e0 90 b1 01 	lds	r14, 0x01B1
    3062:	f0 90 b2 01 	lds	r15, 0x01B2
    3066:	00 91 b3 01 	lds	r16, 0x01B3
    306a:	10 91 b4 01 	lds	r17, 0x01B4
    SREG = sreg;
    306e:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3070:	a8 01       	movw	r20, r16
    3072:	97 01       	movw	r18, r14
    3074:	40 70       	andi	r20, 0x00	; 0
    3076:	50 70       	andi	r21, 0x00	; 0
    3078:	cb 01       	movw	r24, r22
    307a:	a0 e0       	ldi	r26, 0x00	; 0
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	28 17       	cp	r18, r24
    3080:	39 07       	cpc	r19, r25
    3082:	4a 07       	cpc	r20, r26
    3084:	5b 07       	cpc	r21, r27
    3086:	20 f0       	brcs	.+8      	; 0x3090 <timer_elapsed+0x40>
    3088:	97 01       	movw	r18, r14
    308a:	26 1b       	sub	r18, r22
    308c:	37 0b       	sbc	r19, r23
    308e:	05 c0       	rjmp	.+10     	; 0x309a <timer_elapsed+0x4a>
    3090:	9b 01       	movw	r18, r22
    3092:	20 95       	com	r18
    3094:	30 95       	com	r19
    3096:	2e 0d       	add	r18, r14
    3098:	3f 1d       	adc	r19, r15
}
    309a:	c9 01       	movw	r24, r18
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	08 95       	ret

000030a6 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    30a6:	1f 92       	push	r1
    30a8:	0f 92       	push	r0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	0f 92       	push	r0
    30ae:	11 24       	eor	r1, r1
    30b0:	8f 93       	push	r24
    30b2:	9f 93       	push	r25
    30b4:	af 93       	push	r26
    30b6:	bf 93       	push	r27
    timer_count++;
    30b8:	80 91 b1 01 	lds	r24, 0x01B1
    30bc:	90 91 b2 01 	lds	r25, 0x01B2
    30c0:	a0 91 b3 01 	lds	r26, 0x01B3
    30c4:	b0 91 b4 01 	lds	r27, 0x01B4
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	a1 1d       	adc	r26, r1
    30cc:	b1 1d       	adc	r27, r1
    30ce:	80 93 b1 01 	sts	0x01B1, r24
    30d2:	90 93 b2 01 	sts	0x01B2, r25
    30d6:	a0 93 b3 01 	sts	0x01B3, r26
    30da:	b0 93 b4 01 	sts	0x01B4, r27
}
    30de:	bf 91       	pop	r27
    30e0:	af 91       	pop	r26
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	0f 90       	pop	r0
    30ec:	1f 90       	pop	r1
    30ee:	18 95       	reti

000030f0 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    30f0:	80 91 bb 01 	lds	r24, 0x01BB
    30f4:	80 ff       	sbrs	r24, 0
    30f6:	0b c0       	rjmp	.+22     	; 0x310e <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    30f8:	90 91 07 01 	lds	r25, 0x0107
    30fc:	85 e0       	ldi	r24, 0x05	; 5
    30fe:	98 9f       	mul	r25, r24
    3100:	c0 01       	movw	r24, r0
    3102:	11 24       	eor	r1, r1
    3104:	95 95       	asr	r25
    3106:	87 95       	ror	r24
    3108:	95 95       	asr	r25
    310a:	87 95       	ror	r24
    310c:	30 c0       	rjmp	.+96     	; 0x316e <move_unit+0x7e>
    } else if (mousekey_accel & (1<<1)) {
    310e:	81 ff       	sbrs	r24, 1
    3110:	09 c0       	rjmp	.+18     	; 0x3124 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    3112:	90 91 07 01 	lds	r25, 0x0107
    3116:	85 e0       	ldi	r24, 0x05	; 5
    3118:	98 9f       	mul	r25, r24
    311a:	c0 01       	movw	r24, r0
    311c:	11 24       	eor	r1, r1
    311e:	95 95       	asr	r25
    3120:	87 95       	ror	r24
    3122:	25 c0       	rjmp	.+74     	; 0x316e <move_unit+0x7e>
    } else if (mousekey_accel & (1<<2)) {
    3124:	82 ff       	sbrs	r24, 2
    3126:	03 c0       	rjmp	.+6      	; 0x312e <move_unit+0x3e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3128:	90 91 07 01 	lds	r25, 0x0107
    312c:	0d c0       	rjmp	.+26     	; 0x3148 <move_unit+0x58>
    } else if (mousekey_repeat == 0) {
    312e:	80 91 ba 01 	lds	r24, 0x01BA
    3132:	88 23       	and	r24, r24
    3134:	19 f4       	brne	.+6      	; 0x313c <move_unit+0x4c>
    3136:	85 e0       	ldi	r24, 0x05	; 5
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	08 95       	ret
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    313c:	60 91 08 01 	lds	r22, 0x0108
    3140:	90 91 07 01 	lds	r25, 0x0107
    3144:	86 17       	cp	r24, r22
    3146:	28 f0       	brcs	.+10     	; 0x3152 <move_unit+0x62>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    3148:	85 e0       	ldi	r24, 0x05	; 5
    314a:	98 9f       	mul	r25, r24
    314c:	c0 01       	movw	r24, r0
    314e:	11 24       	eor	r1, r1
    3150:	0e c0       	rjmp	.+28     	; 0x316e <move_unit+0x7e>
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    3152:	89 9f       	mul	r24, r25
    3154:	90 01       	movw	r18, r0
    3156:	11 24       	eor	r1, r1
    3158:	c9 01       	movw	r24, r18
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	82 0f       	add	r24, r18
    3164:	93 1f       	adc	r25, r19
    3166:	70 e0       	ldi	r23, 0x00	; 0
    3168:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divmodhi4>
    316c:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    316e:	80 38       	cpi	r24, 0x80	; 128
    3170:	91 05       	cpc	r25, r1
    3172:	10 f0       	brcs	.+4      	; 0x3178 <move_unit+0x88>
    3174:	8f e7       	ldi	r24, 0x7F	; 127
    3176:	08 95       	ret
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	09 f4       	brne	.+2      	; 0x317e <move_unit+0x8e>
    317c:	81 e0       	ldi	r24, 0x01	; 1
}
    317e:	08 95       	ret

00003180 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3180:	80 91 bb 01 	lds	r24, 0x01BB
    3184:	80 ff       	sbrs	r24, 0
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <wheel_unit+0x12>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3188:	80 91 09 01 	lds	r24, 0x0109
    318c:	86 95       	lsr	r24
    318e:	86 95       	lsr	r24
    3190:	18 c0       	rjmp	.+48     	; 0x31c2 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<1)) {
    3192:	81 ff       	sbrs	r24, 1
    3194:	04 c0       	rjmp	.+8      	; 0x319e <wheel_unit+0x1e>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3196:	80 91 09 01 	lds	r24, 0x0109
    319a:	86 95       	lsr	r24
    319c:	12 c0       	rjmp	.+36     	; 0x31c2 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<2)) {
    319e:	82 ff       	sbrs	r24, 2
    31a0:	03 c0       	rjmp	.+6      	; 0x31a8 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    31a2:	80 91 09 01 	lds	r24, 0x0109
    31a6:	0d c0       	rjmp	.+26     	; 0x31c2 <wheel_unit+0x42>
    } else if (mousekey_repeat == 0) {
    31a8:	20 91 ba 01 	lds	r18, 0x01BA
    31ac:	22 23       	and	r18, r18
    31ae:	19 f4       	brne	.+6      	; 0x31b6 <wheel_unit+0x36>
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	08 95       	ret
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    31b6:	60 91 0a 01 	lds	r22, 0x010A
    31ba:	80 91 09 01 	lds	r24, 0x0109
    31be:	26 17       	cp	r18, r22
    31c0:	10 f0       	brcs	.+4      	; 0x31c6 <wheel_unit+0x46>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	07 c0       	rjmp	.+14     	; 0x31d4 <wheel_unit+0x54>
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    31c6:	28 9f       	mul	r18, r24
    31c8:	c0 01       	movw	r24, r0
    31ca:	11 24       	eor	r1, r1
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divmodhi4>
    31d2:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    31d4:	80 38       	cpi	r24, 0x80	; 128
    31d6:	91 05       	cpc	r25, r1
    31d8:	10 f0       	brcs	.+4      	; 0x31de <wheel_unit+0x5e>
    31da:	8f e7       	ldi	r24, 0x7F	; 127
    31dc:	08 95       	ret
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <wheel_unit+0x64>
    31e2:	81 e0       	ldi	r24, 0x01	; 1
}
    31e4:	08 95       	ret

000031e6 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    31e6:	80 3f       	cpi	r24, 0xF0	; 240
    31e8:	21 f4       	brne	.+8      	; 0x31f2 <mousekey_on+0xc>
    31ea:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    31ee:	81 95       	neg	r24
    31f0:	04 c0       	rjmp	.+8      	; 0x31fa <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    31f2:	81 3f       	cpi	r24, 0xF1	; 241
    31f4:	29 f4       	brne	.+10     	; 0x3200 <mousekey_on+0x1a>
    31f6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    31fa:	80 93 b7 01 	sts	0x01B7, r24
    31fe:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    3200:	82 3f       	cpi	r24, 0xF2	; 242
    3202:	21 f4       	brne	.+8      	; 0x320c <mousekey_on+0x26>
    3204:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    3208:	81 95       	neg	r24
    320a:	04 c0       	rjmp	.+8      	; 0x3214 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    320c:	83 3f       	cpi	r24, 0xF3	; 243
    320e:	29 f4       	brne	.+10     	; 0x321a <mousekey_on+0x34>
    3210:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    3214:	80 93 b6 01 	sts	0x01B6, r24
    3218:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    321a:	89 3f       	cpi	r24, 0xF9	; 249
    321c:	19 f4       	brne	.+6      	; 0x3224 <mousekey_on+0x3e>
    321e:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    3222:	05 c0       	rjmp	.+10     	; 0x322e <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    3224:	8a 3f       	cpi	r24, 0xFA	; 250
    3226:	31 f4       	brne	.+12     	; 0x3234 <mousekey_on+0x4e>
    3228:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    322c:	81 95       	neg	r24
    322e:	80 93 b8 01 	sts	0x01B8, r24
    3232:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    3234:	8b 3f       	cpi	r24, 0xFB	; 251
    3236:	21 f4       	brne	.+8      	; 0x3240 <mousekey_on+0x5a>
    3238:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    323c:	81 95       	neg	r24
    323e:	04 c0       	rjmp	.+8      	; 0x3248 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    3240:	8c 3f       	cpi	r24, 0xFC	; 252
    3242:	29 f4       	brne	.+10     	; 0x324e <mousekey_on+0x68>
    3244:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    3248:	80 93 b9 01 	sts	0x01B9, r24
    324c:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    324e:	84 3f       	cpi	r24, 0xF4	; 244
    3250:	21 f4       	brne	.+8      	; 0x325a <mousekey_on+0x74>
    3252:	80 91 b5 01 	lds	r24, 0x01B5
    3256:	81 60       	ori	r24, 0x01	; 1
    3258:	17 c0       	rjmp	.+46     	; 0x3288 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    325a:	85 3f       	cpi	r24, 0xF5	; 245
    325c:	21 f4       	brne	.+8      	; 0x3266 <mousekey_on+0x80>
    325e:	80 91 b5 01 	lds	r24, 0x01B5
    3262:	82 60       	ori	r24, 0x02	; 2
    3264:	11 c0       	rjmp	.+34     	; 0x3288 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    3266:	86 3f       	cpi	r24, 0xF6	; 246
    3268:	21 f4       	brne	.+8      	; 0x3272 <mousekey_on+0x8c>
    326a:	80 91 b5 01 	lds	r24, 0x01B5
    326e:	84 60       	ori	r24, 0x04	; 4
    3270:	0b c0       	rjmp	.+22     	; 0x3288 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    3272:	87 3f       	cpi	r24, 0xF7	; 247
    3274:	21 f4       	brne	.+8      	; 0x327e <mousekey_on+0x98>
    3276:	80 91 b5 01 	lds	r24, 0x01B5
    327a:	88 60       	ori	r24, 0x08	; 8
    327c:	05 c0       	rjmp	.+10     	; 0x3288 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    327e:	88 3f       	cpi	r24, 0xF8	; 248
    3280:	31 f4       	brne	.+12     	; 0x328e <mousekey_on+0xa8>
    3282:	80 91 b5 01 	lds	r24, 0x01B5
    3286:	80 61       	ori	r24, 0x10	; 16
    3288:	80 93 b5 01 	sts	0x01B5, r24
    328c:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    328e:	8d 3f       	cpi	r24, 0xFD	; 253
    3290:	21 f4       	brne	.+8      	; 0x329a <mousekey_on+0xb4>
    3292:	80 91 bb 01 	lds	r24, 0x01BB
    3296:	81 60       	ori	r24, 0x01	; 1
    3298:	05 c0       	rjmp	.+10     	; 0x32a4 <mousekey_on+0xbe>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    329a:	8e 3f       	cpi	r24, 0xFE	; 254
    329c:	31 f4       	brne	.+12     	; 0x32aa <mousekey_on+0xc4>
    329e:	80 91 bb 01 	lds	r24, 0x01BB
    32a2:	82 60       	ori	r24, 0x02	; 2
    32a4:	80 93 bb 01 	sts	0x01BB, r24
    32a8:	08 95       	ret
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    32aa:	8f 3f       	cpi	r24, 0xFF	; 255
    32ac:	29 f4       	brne	.+10     	; 0x32b8 <mousekey_on+0xd2>
    32ae:	80 91 bb 01 	lds	r24, 0x01BB
    32b2:	84 60       	ori	r24, 0x04	; 4
    32b4:	80 93 bb 01 	sts	0x01BB, r24
    32b8:	08 95       	ret

000032ba <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    32ba:	80 3f       	cpi	r24, 0xF0	; 240
    32bc:	29 f4       	brne	.+10     	; 0x32c8 <mousekey_off+0xe>
    32be:	80 91 b7 01 	lds	r24, 0x01B7
    32c2:	87 ff       	sbrs	r24, 7
    32c4:	6f c0       	rjmp	.+222    	; 0x33a4 <mousekey_off+0xea>
    32c6:	07 c0       	rjmp	.+14     	; 0x32d6 <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    32c8:	81 3f       	cpi	r24, 0xF1	; 241
    32ca:	41 f4       	brne	.+16     	; 0x32dc <mousekey_off+0x22>
    32cc:	80 91 b7 01 	lds	r24, 0x01B7
    32d0:	18 16       	cp	r1, r24
    32d2:	0c f0       	brlt	.+2      	; 0x32d6 <mousekey_off+0x1c>
    32d4:	67 c0       	rjmp	.+206    	; 0x33a4 <mousekey_off+0xea>
    32d6:	10 92 b7 01 	sts	0x01B7, r1
    32da:	64 c0       	rjmp	.+200    	; 0x33a4 <mousekey_off+0xea>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    32dc:	82 3f       	cpi	r24, 0xF2	; 242
    32de:	29 f4       	brne	.+10     	; 0x32ea <mousekey_off+0x30>
    32e0:	80 91 b6 01 	lds	r24, 0x01B6
    32e4:	87 ff       	sbrs	r24, 7
    32e6:	5e c0       	rjmp	.+188    	; 0x33a4 <mousekey_off+0xea>
    32e8:	07 c0       	rjmp	.+14     	; 0x32f8 <mousekey_off+0x3e>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    32ea:	83 3f       	cpi	r24, 0xF3	; 243
    32ec:	41 f4       	brne	.+16     	; 0x32fe <mousekey_off+0x44>
    32ee:	80 91 b6 01 	lds	r24, 0x01B6
    32f2:	18 16       	cp	r1, r24
    32f4:	0c f0       	brlt	.+2      	; 0x32f8 <mousekey_off+0x3e>
    32f6:	56 c0       	rjmp	.+172    	; 0x33a4 <mousekey_off+0xea>
    32f8:	10 92 b6 01 	sts	0x01B6, r1
    32fc:	53 c0       	rjmp	.+166    	; 0x33a4 <mousekey_off+0xea>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    32fe:	89 3f       	cpi	r24, 0xF9	; 249
    3300:	29 f4       	brne	.+10     	; 0x330c <mousekey_off+0x52>
    3302:	80 91 b8 01 	lds	r24, 0x01B8
    3306:	18 16       	cp	r1, r24
    3308:	3c f0       	brlt	.+14     	; 0x3318 <mousekey_off+0x5e>
    330a:	4c c0       	rjmp	.+152    	; 0x33a4 <mousekey_off+0xea>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    330c:	8a 3f       	cpi	r24, 0xFA	; 250
    330e:	39 f4       	brne	.+14     	; 0x331e <mousekey_off+0x64>
    3310:	80 91 b8 01 	lds	r24, 0x01B8
    3314:	87 ff       	sbrs	r24, 7
    3316:	46 c0       	rjmp	.+140    	; 0x33a4 <mousekey_off+0xea>
    3318:	10 92 b8 01 	sts	0x01B8, r1
    331c:	43 c0       	rjmp	.+134    	; 0x33a4 <mousekey_off+0xea>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    331e:	8b 3f       	cpi	r24, 0xFB	; 251
    3320:	29 f4       	brne	.+10     	; 0x332c <mousekey_off+0x72>
    3322:	80 91 b9 01 	lds	r24, 0x01B9
    3326:	87 ff       	sbrs	r24, 7
    3328:	3d c0       	rjmp	.+122    	; 0x33a4 <mousekey_off+0xea>
    332a:	06 c0       	rjmp	.+12     	; 0x3338 <mousekey_off+0x7e>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    332c:	8c 3f       	cpi	r24, 0xFC	; 252
    332e:	39 f4       	brne	.+14     	; 0x333e <mousekey_off+0x84>
    3330:	80 91 b9 01 	lds	r24, 0x01B9
    3334:	18 16       	cp	r1, r24
    3336:	b4 f5       	brge	.+108    	; 0x33a4 <mousekey_off+0xea>
    3338:	10 92 b9 01 	sts	0x01B9, r1
    333c:	33 c0       	rjmp	.+102    	; 0x33a4 <mousekey_off+0xea>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    333e:	84 3f       	cpi	r24, 0xF4	; 244
    3340:	21 f4       	brne	.+8      	; 0x334a <mousekey_off+0x90>
    3342:	80 91 b5 01 	lds	r24, 0x01B5
    3346:	8e 7f       	andi	r24, 0xFE	; 254
    3348:	05 c0       	rjmp	.+10     	; 0x3354 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    334a:	85 3f       	cpi	r24, 0xF5	; 245
    334c:	31 f4       	brne	.+12     	; 0x335a <mousekey_off+0xa0>
    334e:	80 91 b5 01 	lds	r24, 0x01B5
    3352:	8d 7f       	andi	r24, 0xFD	; 253
    3354:	80 93 b5 01 	sts	0x01B5, r24
    3358:	25 c0       	rjmp	.+74     	; 0x33a4 <mousekey_off+0xea>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    335a:	86 3f       	cpi	r24, 0xF6	; 246
    335c:	21 f4       	brne	.+8      	; 0x3366 <mousekey_off+0xac>
    335e:	80 91 b5 01 	lds	r24, 0x01B5
    3362:	8b 7f       	andi	r24, 0xFB	; 251
    3364:	f7 cf       	rjmp	.-18     	; 0x3354 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    3366:	87 3f       	cpi	r24, 0xF7	; 247
    3368:	21 f4       	brne	.+8      	; 0x3372 <mousekey_off+0xb8>
    336a:	80 91 b5 01 	lds	r24, 0x01B5
    336e:	87 7f       	andi	r24, 0xF7	; 247
    3370:	f1 cf       	rjmp	.-30     	; 0x3354 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    3372:	88 3f       	cpi	r24, 0xF8	; 248
    3374:	21 f4       	brne	.+8      	; 0x337e <mousekey_off+0xc4>
    3376:	80 91 b5 01 	lds	r24, 0x01B5
    337a:	8f 7e       	andi	r24, 0xEF	; 239
    337c:	eb cf       	rjmp	.-42     	; 0x3354 <mousekey_off+0x9a>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    337e:	8d 3f       	cpi	r24, 0xFD	; 253
    3380:	21 f4       	brne	.+8      	; 0x338a <mousekey_off+0xd0>
    3382:	80 91 bb 01 	lds	r24, 0x01BB
    3386:	8e 7f       	andi	r24, 0xFE	; 254
    3388:	0b c0       	rjmp	.+22     	; 0x33a0 <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    338a:	8e 3f       	cpi	r24, 0xFE	; 254
    338c:	21 f4       	brne	.+8      	; 0x3396 <mousekey_off+0xdc>
    338e:	80 91 bb 01 	lds	r24, 0x01BB
    3392:	8d 7f       	andi	r24, 0xFD	; 253
    3394:	05 c0       	rjmp	.+10     	; 0x33a0 <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    3396:	8f 3f       	cpi	r24, 0xFF	; 255
    3398:	29 f4       	brne	.+10     	; 0x33a4 <mousekey_off+0xea>
    339a:	80 91 bb 01 	lds	r24, 0x01BB
    339e:	8b 7f       	andi	r24, 0xFB	; 251
    33a0:	80 93 bb 01 	sts	0x01BB, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    33a4:	80 91 b6 01 	lds	r24, 0x01B6
    33a8:	88 23       	and	r24, r24
    33aa:	71 f4       	brne	.+28     	; 0x33c8 <mousekey_off+0x10e>
    33ac:	80 91 b7 01 	lds	r24, 0x01B7
    33b0:	88 23       	and	r24, r24
    33b2:	51 f4       	brne	.+20     	; 0x33c8 <mousekey_off+0x10e>
    33b4:	80 91 b8 01 	lds	r24, 0x01B8
    33b8:	88 23       	and	r24, r24
    33ba:	31 f4       	brne	.+12     	; 0x33c8 <mousekey_off+0x10e>
    33bc:	80 91 b9 01 	lds	r24, 0x01B9
    33c0:	88 23       	and	r24, r24
    33c2:	11 f4       	brne	.+4      	; 0x33c8 <mousekey_off+0x10e>
        mousekey_repeat = 0;
    33c4:	10 92 ba 01 	sts	0x01BA, r1
    33c8:	08 95       	ret

000033ca <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    33ca:	e5 eb       	ldi	r30, 0xB5	; 181
    33cc:	f1 e0       	ldi	r31, 0x01	; 1
    33ce:	85 e0       	ldi	r24, 0x05	; 5
    33d0:	df 01       	movw	r26, r30
    33d2:	1d 92       	st	X+, r1
    33d4:	8a 95       	dec	r24
    33d6:	e9 f7       	brne	.-6      	; 0x33d2 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    33d8:	10 92 ba 01 	sts	0x01BA, r1
    mousekey_accel = 0;
    33dc:	10 92 bb 01 	sts	0x01BB, r1
}
    33e0:	08 95       	ret

000033e2 <mousekey_send>:
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    33e2:	85 eb       	ldi	r24, 0xB5	; 181
    33e4:	91 e0       	ldi	r25, 0x01	; 1
    33e6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <host_mouse_send>
    last_timer = timer_read();
    33ea:	0e 94 1b 18 	call	0x3036	; 0x3036 <timer_read>
    33ee:	90 93 bd 01 	sts	0x01BD, r25
    33f2:	80 93 bc 01 	sts	0x01BC, r24
}
    33f6:	08 95       	ret

000033f8 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    33f8:	1f 93       	push	r17
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    33fa:	80 91 bc 01 	lds	r24, 0x01BC
    33fe:	90 91 bd 01 	lds	r25, 0x01BD
    3402:	0e 94 28 18 	call	0x3050	; 0x3050 <timer_elapsed>
    3406:	ac 01       	movw	r20, r24
    3408:	20 91 ba 01 	lds	r18, 0x01BA
    340c:	22 23       	and	r18, r18
    340e:	21 f0       	breq	.+8      	; 0x3418 <mousekey_task+0x20>
    3410:	80 91 06 01 	lds	r24, 0x0106
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	06 c0       	rjmp	.+12     	; 0x3424 <mousekey_task+0x2c>
    3418:	90 91 05 01 	lds	r25, 0x0105
    341c:	8a e0       	ldi	r24, 0x0A	; 10
    341e:	98 9f       	mul	r25, r24
    3420:	c0 01       	movw	r24, r0
    3422:	11 24       	eor	r1, r1
    3424:	48 17       	cp	r20, r24
    3426:	59 07       	cpc	r21, r25
    3428:	08 f4       	brcc	.+2      	; 0x342c <mousekey_task+0x34>
    342a:	85 c0       	rjmp	.+266    	; 0x3536 <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    342c:	90 91 b6 01 	lds	r25, 0x01B6
    3430:	99 23       	and	r25, r25
    3432:	69 f4       	brne	.+26     	; 0x344e <mousekey_task+0x56>
    3434:	80 91 b7 01 	lds	r24, 0x01B7
    3438:	88 23       	and	r24, r24
    343a:	49 f4       	brne	.+18     	; 0x344e <mousekey_task+0x56>
    343c:	80 91 b8 01 	lds	r24, 0x01B8
    3440:	88 23       	and	r24, r24
    3442:	29 f4       	brne	.+10     	; 0x344e <mousekey_task+0x56>
    3444:	80 91 b9 01 	lds	r24, 0x01B9
    3448:	88 23       	and	r24, r24
    344a:	09 f4       	brne	.+2      	; 0x344e <mousekey_task+0x56>
    344c:	74 c0       	rjmp	.+232    	; 0x3536 <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    344e:	2f 3f       	cpi	r18, 0xFF	; 255
    3450:	19 f0       	breq	.+6      	; 0x3458 <mousekey_task+0x60>
        mousekey_repeat++;
    3452:	2f 5f       	subi	r18, 0xFF	; 255
    3454:	20 93 ba 01 	sts	0x01BA, r18


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    3458:	19 16       	cp	r1, r25
    345a:	24 f4       	brge	.+8      	; 0x3464 <mousekey_task+0x6c>
    345c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    3460:	80 93 b6 01 	sts	0x01B6, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    3464:	80 91 b6 01 	lds	r24, 0x01B6
    3468:	87 ff       	sbrs	r24, 7
    346a:	05 c0       	rjmp	.+10     	; 0x3476 <mousekey_task+0x7e>
    346c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    3470:	81 95       	neg	r24
    3472:	80 93 b6 01 	sts	0x01B6, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    3476:	80 91 b7 01 	lds	r24, 0x01B7
    347a:	18 16       	cp	r1, r24
    347c:	24 f4       	brge	.+8      	; 0x3486 <mousekey_task+0x8e>
    347e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    3482:	80 93 b7 01 	sts	0x01B7, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    3486:	80 91 b7 01 	lds	r24, 0x01B7
    348a:	87 ff       	sbrs	r24, 7
    348c:	05 c0       	rjmp	.+10     	; 0x3498 <mousekey_task+0xa0>
    348e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <move_unit>
    3492:	81 95       	neg	r24
    3494:	80 93 b7 01 	sts	0x01B7, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    3498:	60 91 b6 01 	lds	r22, 0x01B6
    349c:	66 23       	and	r22, r22
    349e:	39 f1       	breq	.+78     	; 0x34ee <mousekey_task+0xf6>
    34a0:	10 91 b7 01 	lds	r17, 0x01B7
    34a4:	11 23       	and	r17, r17
    34a6:	19 f1       	breq	.+70     	; 0x34ee <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    34a8:	77 27       	eor	r23, r23
    34aa:	67 fd       	sbrc	r22, 7
    34ac:	70 95       	com	r23
    34ae:	87 2f       	mov	r24, r23
    34b0:	97 2f       	mov	r25, r23
    34b2:	0e 94 bd 21 	call	0x437a	; 0x437a <__floatsisf>
    34b6:	23 e3       	ldi	r18, 0x33	; 51
    34b8:	33 e3       	ldi	r19, 0x33	; 51
    34ba:	43 e3       	ldi	r20, 0x33	; 51
    34bc:	5f e3       	ldi	r21, 0x3F	; 63
    34be:	0e 94 21 22 	call	0x4442	; 0x4442 <__mulsf3>
    34c2:	0e 94 8a 21 	call	0x4314	; 0x4314 <__fixsfsi>
    34c6:	60 93 b6 01 	sts	0x01B6, r22
        mouse_report.y *= 0.7;
    34ca:	61 2f       	mov	r22, r17
    34cc:	77 27       	eor	r23, r23
    34ce:	67 fd       	sbrc	r22, 7
    34d0:	70 95       	com	r23
    34d2:	87 2f       	mov	r24, r23
    34d4:	97 2f       	mov	r25, r23
    34d6:	0e 94 bd 21 	call	0x437a	; 0x437a <__floatsisf>
    34da:	23 e3       	ldi	r18, 0x33	; 51
    34dc:	33 e3       	ldi	r19, 0x33	; 51
    34de:	43 e3       	ldi	r20, 0x33	; 51
    34e0:	5f e3       	ldi	r21, 0x3F	; 63
    34e2:	0e 94 21 22 	call	0x4442	; 0x4442 <__mulsf3>
    34e6:	0e 94 8a 21 	call	0x4314	; 0x4314 <__fixsfsi>
    34ea:	60 93 b7 01 	sts	0x01B7, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    34ee:	80 91 b8 01 	lds	r24, 0x01B8
    34f2:	18 16       	cp	r1, r24
    34f4:	24 f4       	brge	.+8      	; 0x34fe <mousekey_task+0x106>
    34f6:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    34fa:	80 93 b8 01 	sts	0x01B8, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    34fe:	80 91 b8 01 	lds	r24, 0x01B8
    3502:	87 ff       	sbrs	r24, 7
    3504:	05 c0       	rjmp	.+10     	; 0x3510 <mousekey_task+0x118>
    3506:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    350a:	81 95       	neg	r24
    350c:	80 93 b8 01 	sts	0x01B8, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    3510:	80 91 b9 01 	lds	r24, 0x01B9
    3514:	18 16       	cp	r1, r24
    3516:	24 f4       	brge	.+8      	; 0x3520 <mousekey_task+0x128>
    3518:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    351c:	80 93 b9 01 	sts	0x01B9, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    3520:	80 91 b9 01 	lds	r24, 0x01B9
    3524:	87 ff       	sbrs	r24, 7
    3526:	05 c0       	rjmp	.+10     	; 0x3532 <mousekey_task+0x13a>
    3528:	0e 94 c0 18 	call	0x3180	; 0x3180 <wheel_unit>
    352c:	81 95       	neg	r24
    352e:	80 93 b9 01 	sts	0x01B9, r24

    mousekey_send();
    3532:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <mousekey_send>
}
    3536:	1f 91       	pop	r17
    3538:	08 95       	ret

0000353a <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__eerd_word_m32u4>
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	8d 5e       	subi	r24, 0xED	; 237
    3546:	9e 4f       	sbci	r25, 0xFE	; 254
    3548:	09 f4       	brne	.+2      	; 0x354c <eeconfig_is_enabled+0x12>
    354a:	21 e0       	ldi	r18, 0x01	; 1
}
    354c:	82 2f       	mov	r24, r18
    354e:	08 95       	ret

00003550 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	6d ee       	ldi	r22, 0xED	; 237
    3556:	7e ef       	ldi	r23, 0xFE	; 254
    3558:	0e 94 f5 22 	call	0x45ea	; 0x45ea <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    355c:	82 e0       	ldi	r24, 0x02	; 2
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	0e 94 df 22 	call	0x45be	; 0x45be <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    3566:	83 e0       	ldi	r24, 0x03	; 3
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	0e 94 df 22 	call	0x45be	; 0x45be <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    3570:	84 e0       	ldi	r24, 0x04	; 4
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	60 e0       	ldi	r22, 0x00	; 0
    3576:	0e 94 df 22 	call	0x45be	; 0x45be <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    357a:	85 e0       	ldi	r24, 0x05	; 5
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	0e 94 df 22 	call	0x45be	; 0x45be <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    3584:	08 95       	ret

00003586 <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    /* For battery powered device */
    USB_IsInitialized = false;
    3586:	10 92 1f 02 	sts	0x021F, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    358a:	08 95       	ret

0000358c <EVENT_USB_Device_Reset>:

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
}
    358c:	08 95       	ret

0000358e <EVENT_USB_Device_Suspend>:
{
    print("[S]");
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
#endif
}
    358e:	08 95       	ret

00003590 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    3590:	80 91 bf 01 	lds	r24, 0x01BF
    3594:	08 95       	ret

00003596 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	00 d0       	rcall	.+0      	; 0x359c <send_consumer+0x6>
    359c:	0f 92       	push	r0
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    35a4:	80 91 20 02 	lds	r24, 0x0220
    35a8:	84 30       	cpi	r24, 0x04	; 4
    35aa:	29 f5       	brne	.+74     	; 0x35f6 <send_consumer+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    35ac:	83 e0       	ldi	r24, 0x03	; 3
    35ae:	80 93 e9 00 	sts	0x00E9, r24
    35b2:	2f ef       	ldi	r18, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35b4:	95 ed       	ldi	r25, 0xD5	; 213
    35b6:	05 c0       	rjmp	.+10     	; 0x35c2 <send_consumer+0x2c>
    35b8:	89 2f       	mov	r24, r25
    35ba:	8a 95       	dec	r24
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <send_consumer+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    35be:	22 23       	and	r18, r18
    35c0:	29 f0       	breq	.+10     	; 0x35cc <send_consumer+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    35c2:	80 91 e8 00 	lds	r24, 0x00E8
    35c6:	21 50       	subi	r18, 0x01	; 1
    35c8:	85 ff       	sbrs	r24, 5
    35ca:	f6 cf       	rjmp	.-20     	; 0x35b8 <send_consumer+0x22>
    35cc:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    35d0:	85 ff       	sbrs	r24, 5
    35d2:	11 c0       	rjmp	.+34     	; 0x35f6 <send_consumer+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
    35d4:	5b 83       	std	Y+3, r21	; 0x03
    35d6:	4a 83       	std	Y+2, r20	; 0x02
    35d8:	83 e0       	ldi	r24, 0x03	; 3
    35da:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    35dc:	ce 01       	movw	r24, r28
    35de:	01 96       	adiw	r24, 0x01	; 1
    35e0:	63 e0       	ldi	r22, 0x03	; 3
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	40 e0       	ldi	r20, 0x00	; 0
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    35ec:	80 91 e8 00 	lds	r24, 0x00E8
    35f0:	8e 77       	andi	r24, 0x7E	; 126
    35f2:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	cf 91       	pop	r28
    35fe:	df 91       	pop	r29
    3600:	08 95       	ret

00003602 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	00 d0       	rcall	.+0      	; 0x3608 <send_system+0x6>
    3608:	0f 92       	push	r0
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    3610:	80 91 20 02 	lds	r24, 0x0220
    3614:	84 30       	cpi	r24, 0x04	; 4
    3616:	29 f5       	brne	.+74     	; 0x3662 <send_system+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3618:	83 e0       	ldi	r24, 0x03	; 3
    361a:	80 93 e9 00 	sts	0x00E9, r24
    361e:	2f ef       	ldi	r18, 0xFF	; 255
    3620:	95 ed       	ldi	r25, 0xD5	; 213
    3622:	05 c0       	rjmp	.+10     	; 0x362e <send_system+0x2c>
    3624:	89 2f       	mov	r24, r25
    3626:	8a 95       	dec	r24
    3628:	f1 f7       	brne	.-4      	; 0x3626 <send_system+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    362a:	22 23       	and	r18, r18
    362c:	29 f0       	breq	.+10     	; 0x3638 <send_system+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    362e:	80 91 e8 00 	lds	r24, 0x00E8
    3632:	21 50       	subi	r18, 0x01	; 1
    3634:	85 ff       	sbrs	r24, 5
    3636:	f6 cf       	rjmp	.-20     	; 0x3624 <send_system+0x22>
    3638:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    363c:	85 ff       	sbrs	r24, 5
    363e:	11 c0       	rjmp	.+34     	; 0x3662 <send_system+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    3640:	5b 83       	std	Y+3, r21	; 0x03
    3642:	4a 83       	std	Y+2, r20	; 0x02
    3644:	82 e0       	ldi	r24, 0x02	; 2
    3646:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    3648:	ce 01       	movw	r24, r28
    364a:	01 96       	adiw	r24, 0x01	; 1
    364c:	63 e0       	ldi	r22, 0x03	; 3
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	40 e0       	ldi	r20, 0x00	; 0
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3658:	80 91 e8 00 	lds	r24, 0x00E8
    365c:	8e 77       	andi	r24, 0x7E	; 126
    365e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	08 95       	ret

0000366e <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
    366e:	ac 01       	movw	r20, r24
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    3670:	80 91 20 02 	lds	r24, 0x0220
    3674:	84 30       	cpi	r24, 0x04	; 4
    3676:	01 f5       	brne	.+64     	; 0x36b8 <send_mouse+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3678:	82 e0       	ldi	r24, 0x02	; 2
    367a:	80 93 e9 00 	sts	0x00E9, r24
    367e:	2f ef       	ldi	r18, 0xFF	; 255
    3680:	95 ed       	ldi	r25, 0xD5	; 213
    3682:	05 c0       	rjmp	.+10     	; 0x368e <send_mouse+0x20>
    3684:	89 2f       	mov	r24, r25
    3686:	8a 95       	dec	r24
    3688:	f1 f7       	brne	.-4      	; 0x3686 <send_mouse+0x18>

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    368a:	22 23       	and	r18, r18
    368c:	29 f0       	breq	.+10     	; 0x3698 <send_mouse+0x2a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    368e:	80 91 e8 00 	lds	r24, 0x00E8
    3692:	21 50       	subi	r18, 0x01	; 1
    3694:	85 ff       	sbrs	r24, 5
    3696:	f6 cf       	rjmp	.-20     	; 0x3684 <send_mouse+0x16>
    3698:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    369c:	85 ff       	sbrs	r24, 5
    369e:	0c c0       	rjmp	.+24     	; 0x36b8 <send_mouse+0x4a>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    36a0:	ca 01       	movw	r24, r20
    36a2:	65 e0       	ldi	r22, 0x05	; 5
    36a4:	70 e0       	ldi	r23, 0x00	; 0
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	50 e0       	ldi	r21, 0x00	; 0
    36aa:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36ae:	80 91 e8 00 	lds	r24, 0x00E8
    36b2:	8e 77       	andi	r24, 0x7E	; 126
    36b4:	80 93 e8 00 	sts	0x00E8, r24
    36b8:	08 95       	ret

000036ba <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	18 2f       	mov	r17, r24
    36c0:	09 2f       	mov	r16, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    36c2:	80 91 20 02 	lds	r24, 0x0220
    36c6:	84 30       	cpi	r24, 0x04	; 4
    36c8:	61 f5       	brne	.+88     	; 0x3722 <send_keyboard+0x68>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	80 93 e9 00 	sts	0x00E9, r24
    36d0:	9f ef       	ldi	r25, 0xFF	; 255
    36d2:	25 ed       	ldi	r18, 0xD5	; 213
    36d4:	05 c0       	rjmp	.+10     	; 0x36e0 <send_keyboard+0x26>
    36d6:	82 2f       	mov	r24, r18
    36d8:	8a 95       	dec	r24
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <send_keyboard+0x1e>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    36dc:	99 23       	and	r25, r25
    36de:	29 f0       	breq	.+10     	; 0x36ea <send_keyboard+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    36e0:	80 91 e8 00 	lds	r24, 0x00E8
    36e4:	91 50       	subi	r25, 0x01	; 1
    36e6:	85 ff       	sbrs	r24, 5
    36e8:	f6 cf       	rjmp	.-20     	; 0x36d6 <send_keyboard+0x1c>
    36ea:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    36ee:	85 ff       	sbrs	r24, 5
    36f0:	18 c0       	rjmp	.+48     	; 0x3722 <send_keyboard+0x68>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    36f2:	81 2f       	mov	r24, r17
    36f4:	90 2f       	mov	r25, r16
    36f6:	68 e0       	ldi	r22, 0x08	; 8
    36f8:	70 e0       	ldi	r23, 0x00	; 0
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3702:	80 91 e8 00 	lds	r24, 0x00E8
    3706:	8e 77       	andi	r24, 0x7E	; 126
    3708:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    370c:	a0 ec       	ldi	r26, 0xC0	; 192
    370e:	b1 e0       	ldi	r27, 0x01	; 1
    3710:	21 2f       	mov	r18, r17
    3712:	30 2f       	mov	r19, r16
    3714:	c9 01       	movw	r24, r18
    3716:	fc 01       	movw	r30, r24
    3718:	88 e0       	ldi	r24, 0x08	; 8
    371a:	01 90       	ld	r0, Z+
    371c:	0d 92       	st	X+, r0
    371e:	81 50       	subi	r24, 0x01	; 1
    3720:	e1 f7       	brne	.-8      	; 0x371a <send_keyboard+0x60>
}
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	08 95       	ret

00003728 <EVENT_USB_Device_Connect>:
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    /* For battery powered device */
    if (!USB_IsInitialized) {
    3728:	80 91 1f 02 	lds	r24, 0x021F
    372c:	88 23       	and	r24, r24
    372e:	49 f4       	brne	.+18     	; 0x3742 <EVENT_USB_Device_Connect+0x1a>
        USB_Disable();
    3730:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <USB_Disable>
        USB_Init();
    3734:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <USB_Init>
    3738:	80 91 e2 00 	lds	r24, 0x00E2
    373c:	84 60       	ori	r24, 0x04	; 4
    373e:	80 93 e2 00 	sts	0x00E2, r24
    3742:	08 95       	ret

00003744 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    3744:	80 91 22 02 	lds	r24, 0x0222
    3748:	83 30       	cpi	r24, 0x03	; 3
    374a:	09 f4       	brne	.+2      	; 0x374e <EVENT_USB_Device_ControlRequest+0xa>
    374c:	55 c0       	rjmp	.+170    	; 0x37f8 <EVENT_USB_Device_ControlRequest+0xb4>
    374e:	84 30       	cpi	r24, 0x04	; 4
    3750:	30 f4       	brcc	.+12     	; 0x375e <EVENT_USB_Device_ControlRequest+0x1a>
    3752:	81 30       	cpi	r24, 0x01	; 1
    3754:	71 f0       	breq	.+28     	; 0x3772 <EVENT_USB_Device_ControlRequest+0x2e>
    3756:	82 30       	cpi	r24, 0x02	; 2
    3758:	09 f0       	breq	.+2      	; 0x375c <EVENT_USB_Device_ControlRequest+0x18>
    375a:	b5 c0       	rjmp	.+362    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
    375c:	9c c0       	rjmp	.+312    	; 0x3896 <EVENT_USB_Device_ControlRequest+0x152>
    375e:	8a 30       	cpi	r24, 0x0A	; 10
    3760:	09 f4       	brne	.+2      	; 0x3764 <EVENT_USB_Device_ControlRequest+0x20>
    3762:	89 c0       	rjmp	.+274    	; 0x3876 <EVENT_USB_Device_ControlRequest+0x132>
    3764:	8b 30       	cpi	r24, 0x0B	; 11
    3766:	09 f4       	brne	.+2      	; 0x376a <EVENT_USB_Device_ControlRequest+0x26>
    3768:	68 c0       	rjmp	.+208    	; 0x383a <EVENT_USB_Device_ControlRequest+0xf6>
    376a:	89 30       	cpi	r24, 0x09	; 9
    376c:	09 f0       	breq	.+2      	; 0x3770 <EVENT_USB_Device_ControlRequest+0x2c>
    376e:	ab c0       	rjmp	.+342    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
    3770:	20 c0       	rjmp	.+64     	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3772:	80 91 21 02 	lds	r24, 0x0221
    3776:	81 3a       	cpi	r24, 0xA1	; 161
    3778:	09 f0       	breq	.+2      	; 0x377c <EVENT_USB_Device_ControlRequest+0x38>
    377a:	a5 c0       	rjmp	.+330    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    377c:	80 91 e8 00 	lds	r24, 0x00E8
    3780:	87 7f       	andi	r24, 0xF7	; 247
    3782:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    3786:	80 91 25 02 	lds	r24, 0x0225
    378a:	90 91 26 02 	lds	r25, 0x0226
    378e:	89 2b       	or	r24, r25
    3790:	21 f4       	brne	.+8      	; 0x379a <EVENT_USB_Device_ControlRequest+0x56>
    3792:	80 ec       	ldi	r24, 0xC0	; 192
    3794:	91 e0       	ldi	r25, 0x01	; 1
    3796:	68 e0       	ldi	r22, 0x08	; 8
    3798:	03 c0       	rjmp	.+6      	; 0x37a0 <EVENT_USB_Device_ControlRequest+0x5c>
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	60 e0       	ldi	r22, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    37a6:	80 91 e8 00 	lds	r24, 0x00E8
    37aa:	8b 77       	andi	r24, 0x7B	; 123
    37ac:	80 93 e8 00 	sts	0x00E8, r24
    37b0:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    37b2:	80 91 21 02 	lds	r24, 0x0221
    37b6:	81 32       	cpi	r24, 0x21	; 33
    37b8:	09 f0       	breq	.+2      	; 0x37bc <EVENT_USB_Device_ControlRequest+0x78>
    37ba:	85 c0       	rjmp	.+266    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    37bc:	80 91 25 02 	lds	r24, 0x0225
    37c0:	90 91 26 02 	lds	r25, 0x0226
    37c4:	89 2b       	or	r24, r25
    37c6:	09 f0       	breq	.+2      	; 0x37ca <EVENT_USB_Device_ControlRequest+0x86>
    37c8:	7e c0       	rjmp	.+252    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    37ca:	80 91 e8 00 	lds	r24, 0x00E8
    37ce:	87 7f       	andi	r24, 0xF7	; 247
    37d0:	80 93 e8 00 	sts	0x00E8, r24
    37d4:	05 c0       	rjmp	.+10     	; 0x37e0 <EVENT_USB_Device_ControlRequest+0x9c>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    37d6:	80 91 20 02 	lds	r24, 0x0220
    37da:	88 23       	and	r24, r24
    37dc:	09 f4       	brne	.+2      	; 0x37e0 <EVENT_USB_Device_ControlRequest+0x9c>
    37de:	73 c0       	rjmp	.+230    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    37e0:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    37e4:	82 ff       	sbrs	r24, 2
    37e6:	f7 cf       	rjmp	.-18     	; 0x37d6 <EVENT_USB_Device_ControlRequest+0x92>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    37e8:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    37ec:	80 93 bf 01 	sts	0x01BF, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    37f0:	80 91 e8 00 	lds	r24, 0x00E8
    37f4:	8b 77       	andi	r24, 0x7B	; 123
    37f6:	1c c0       	rjmp	.+56     	; 0x3830 <EVENT_USB_Device_ControlRequest+0xec>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    37f8:	80 91 21 02 	lds	r24, 0x0221
    37fc:	81 3a       	cpi	r24, 0xA1	; 161
    37fe:	09 f0       	breq	.+2      	; 0x3802 <EVENT_USB_Device_ControlRequest+0xbe>
    3800:	62 c0       	rjmp	.+196    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    3802:	80 91 25 02 	lds	r24, 0x0225
    3806:	90 91 26 02 	lds	r25, 0x0226
    380a:	89 2b       	or	r24, r25
    380c:	09 f0       	breq	.+2      	; 0x3810 <EVENT_USB_Device_ControlRequest+0xcc>
    380e:	5b c0       	rjmp	.+182    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3810:	80 91 e8 00 	lds	r24, 0x00E8
    3814:	87 7f       	andi	r24, 0xF7	; 247
    3816:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    381a:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    381e:	80 ff       	sbrs	r24, 0
    3820:	fc cf       	rjmp	.-8      	; 0x381a <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    3822:	80 91 0b 01 	lds	r24, 0x010B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3826:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    382a:	80 91 e8 00 	lds	r24, 0x00E8
    382e:	8e 77       	andi	r24, 0x7E	; 126
    3830:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    3834:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Endpoint_ClearStatusStage>
    3838:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    383a:	80 91 21 02 	lds	r24, 0x0221
    383e:	81 32       	cpi	r24, 0x21	; 33
    3840:	09 f0       	breq	.+2      	; 0x3844 <EVENT_USB_Device_ControlRequest+0x100>
    3842:	41 c0       	rjmp	.+130    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    3844:	80 91 25 02 	lds	r24, 0x0225
    3848:	90 91 26 02 	lds	r25, 0x0226
    384c:	89 2b       	or	r24, r25
    384e:	d9 f5       	brne	.+118    	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3850:	80 91 e8 00 	lds	r24, 0x00E8
    3854:	87 7f       	andi	r24, 0xF7	; 247
    3856:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    385a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    385e:	10 92 0b 01 	sts	0x010B, r1
    3862:	80 91 23 02 	lds	r24, 0x0223
    3866:	88 23       	and	r24, r24
    3868:	19 f0       	breq	.+6      	; 0x3870 <EVENT_USB_Device_ControlRequest+0x12c>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
#endif
                    clear_keyboard();
    3870:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <clear_keyboard>
    3874:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3876:	80 91 21 02 	lds	r24, 0x0221
    387a:	81 32       	cpi	r24, 0x21	; 33
    387c:	21 f5       	brne	.+72     	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
    387e:	80 91 e8 00 	lds	r24, 0x00E8
    3882:	87 7f       	andi	r24, 0xF7	; 247
    3884:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    3888:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    388c:	80 91 24 02 	lds	r24, 0x0224
    3890:	80 93 be 01 	sts	0x01BE, r24
    3894:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3896:	80 91 21 02 	lds	r24, 0x0221
    389a:	81 3a       	cpi	r24, 0xA1	; 161
    389c:	a1 f4       	brne	.+40     	; 0x38c6 <EVENT_USB_Device_ControlRequest+0x182>
    389e:	80 91 e8 00 	lds	r24, 0x00E8
    38a2:	87 7f       	andi	r24, 0xF7	; 247
    38a4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    38a8:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    38ac:	80 ff       	sbrs	r24, 0
    38ae:	fc cf       	rjmp	.-8      	; 0x38a8 <EVENT_USB_Device_ControlRequest+0x164>
                Endpoint_Write_8(keyboard_idle);
    38b0:	80 91 be 01 	lds	r24, 0x01BE
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    38b4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    38b8:	80 91 e8 00 	lds	r24, 0x00E8
    38bc:	8e 77       	andi	r24, 0x7E	; 126
    38be:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    38c2:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Endpoint_ClearStatusStage>
    38c6:	08 95       	ret

000038c8 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	61 ec       	ldi	r22, 0xC1	; 193
    38cc:	42 e0       	ldi	r20, 0x02	; 2
    38ce:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    38d2:	82 e0       	ldi	r24, 0x02	; 2
    38d4:	61 ec       	ldi	r22, 0xC1	; 193
    38d6:	42 e0       	ldi	r20, 0x02	; 2
    38d8:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Endpoint_ConfigureEndpoint_Prv>
    38dc:	83 e0       	ldi	r24, 0x03	; 3
    38de:	61 ec       	ldi	r22, 0xC1	; 193
    38e0:	42 e0       	ldi	r20, 0x02	; 2
    38e2:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Endpoint_ConfigureEndpoint_Prv>
    38e6:	08 95       	ret

000038e8 <EVENT_USB_Device_WakeUp>:
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    suspend_wakeup_init();
    38e8:	0e 94 0f 18 	call	0x301e	; 0x301e <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
#endif
}
    38ec:	08 95       	ret

000038ee <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    38ee:	da 01       	movw	r26, r20
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    38f0:	93 30       	cpi	r25, 0x03	; 3
    38f2:	c1 f0       	breq	.+48     	; 0x3924 <CALLBACK_USB_GetDescriptor+0x36>
    38f4:	94 30       	cpi	r25, 0x04	; 4
    38f6:	30 f4       	brcc	.+12     	; 0x3904 <CALLBACK_USB_GetDescriptor+0x16>
    38f8:	91 30       	cpi	r25, 0x01	; 1
    38fa:	51 f0       	breq	.+20     	; 0x3910 <CALLBACK_USB_GetDescriptor+0x22>
    38fc:	92 30       	cpi	r25, 0x02	; 2
    38fe:	09 f0       	breq	.+2      	; 0x3902 <CALLBACK_USB_GetDescriptor+0x14>
    3900:	4f c0       	rjmp	.+158    	; 0x39a0 <CALLBACK_USB_GetDescriptor+0xb2>
    3902:	0b c0       	rjmp	.+22     	; 0x391a <CALLBACK_USB_GetDescriptor+0x2c>
    3904:	91 32       	cpi	r25, 0x21	; 33
    3906:	21 f1       	breq	.+72     	; 0x3950 <CALLBACK_USB_GetDescriptor+0x62>
    3908:	92 32       	cpi	r25, 0x22	; 34
    390a:	09 f0       	breq	.+2      	; 0x390e <CALLBACK_USB_GetDescriptor+0x20>
    390c:	49 c0       	rjmp	.+146    	; 0x39a0 <CALLBACK_USB_GetDescriptor+0xb2>
    390e:	32 c0       	rjmp	.+100    	; 0x3974 <CALLBACK_USB_GetDescriptor+0x86>
    3910:	e2 ee       	ldi	r30, 0xE2	; 226
    3912:	f4 e0       	ldi	r31, 0x04	; 4
    3914:	22 e1       	ldi	r18, 0x12	; 18
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	47 c0       	rjmp	.+142    	; 0x39a8 <CALLBACK_USB_GetDescriptor+0xba>
    391a:	e4 ef       	ldi	r30, 0xF4	; 244
    391c:	f4 e0       	ldi	r31, 0x04	; 4
    391e:	24 e5       	ldi	r18, 0x54	; 84
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	42 c0       	rjmp	.+132    	; 0x39a8 <CALLBACK_USB_GetDescriptor+0xba>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    3924:	81 30       	cpi	r24, 0x01	; 1
    3926:	51 f0       	breq	.+20     	; 0x393c <CALLBACK_USB_GetDescriptor+0x4e>
    3928:	81 30       	cpi	r24, 0x01	; 1
    392a:	20 f0       	brcs	.+8      	; 0x3934 <CALLBACK_USB_GetDescriptor+0x46>
    392c:	82 30       	cpi	r24, 0x02	; 2
    392e:	09 f0       	breq	.+2      	; 0x3932 <CALLBACK_USB_GetDescriptor+0x44>
    3930:	37 c0       	rjmp	.+110    	; 0x39a0 <CALLBACK_USB_GetDescriptor+0xb2>
    3932:	08 c0       	rjmp	.+16     	; 0x3944 <CALLBACK_USB_GetDescriptor+0x56>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    3934:	e8 e4       	ldi	r30, 0x48	; 72
    3936:	f5 e0       	ldi	r31, 0x05	; 5
    3938:	84 91       	lpm	r24, Z+
    393a:	07 c0       	rjmp	.+14     	; 0x394a <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    393c:	ec e4       	ldi	r30, 0x4C	; 76
    393e:	f5 e0       	ldi	r31, 0x05	; 5
    3940:	84 91       	lpm	r24, Z+
    3942:	03 c0       	rjmp	.+6      	; 0x394a <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    3944:	e6 e5       	ldi	r30, 0x56	; 86
    3946:	f5 e0       	ldi	r31, 0x05	; 5
    3948:	84 91       	lpm	r24, Z+
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	2c c0       	rjmp	.+88     	; 0x39a8 <CALLBACK_USB_GetDescriptor+0xba>
                    break;
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
    3950:	61 30       	cpi	r22, 0x01	; 1
    3952:	41 f0       	breq	.+16     	; 0x3964 <CALLBACK_USB_GetDescriptor+0x76>
    3954:	61 30       	cpi	r22, 0x01	; 1
    3956:	18 f0       	brcs	.+6      	; 0x395e <CALLBACK_USB_GetDescriptor+0x70>
    3958:	62 30       	cpi	r22, 0x02	; 2
    395a:	11 f5       	brne	.+68     	; 0x39a0 <CALLBACK_USB_GetDescriptor+0xb2>
    395c:	08 c0       	rjmp	.+16     	; 0x396e <CALLBACK_USB_GetDescriptor+0x80>
    395e:	e6 e0       	ldi	r30, 0x06	; 6
    3960:	f5 e0       	ldi	r31, 0x05	; 5
    3962:	02 c0       	rjmp	.+4      	; 0x3968 <CALLBACK_USB_GetDescriptor+0x7a>
    3964:	ef e1       	ldi	r30, 0x1F	; 31
    3966:	f5 e0       	ldi	r31, 0x05	; 5
    3968:	29 e0       	ldi	r18, 0x09	; 9
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	1d c0       	rjmp	.+58     	; 0x39a8 <CALLBACK_USB_GetDescriptor+0xba>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &ConfigurationDescriptor.Mouse_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    396e:	e8 e3       	ldi	r30, 0x38	; 56
    3970:	f5 e0       	ldi	r31, 0x05	; 5
    3972:	fa cf       	rjmp	.-12     	; 0x3968 <CALLBACK_USB_GetDescriptor+0x7a>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    3974:	61 30       	cpi	r22, 0x01	; 1
    3976:	51 f0       	breq	.+20     	; 0x398c <CALLBACK_USB_GetDescriptor+0x9e>
    3978:	61 30       	cpi	r22, 0x01	; 1
    397a:	18 f0       	brcs	.+6      	; 0x3982 <CALLBACK_USB_GetDescriptor+0x94>
    397c:	62 30       	cpi	r22, 0x02	; 2
    397e:	81 f4       	brne	.+32     	; 0x39a0 <CALLBACK_USB_GetDescriptor+0xb2>
    3980:	0a c0       	rjmp	.+20     	; 0x3996 <CALLBACK_USB_GetDescriptor+0xa8>
    3982:	e0 e2       	ldi	r30, 0x20	; 32
    3984:	f4 e0       	ldi	r31, 0x04	; 4
    3986:	2f e3       	ldi	r18, 0x3F	; 63
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	0e c0       	rjmp	.+28     	; 0x39a8 <CALLBACK_USB_GetDescriptor+0xba>
    398c:	ef e5       	ldi	r30, 0x5F	; 95
    398e:	f4 e0       	ldi	r31, 0x04	; 4
    3990:	2d e4       	ldi	r18, 0x4D	; 77
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	09 c0       	rjmp	.+18     	; 0x39a8 <CALLBACK_USB_GetDescriptor+0xba>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &MouseReport;
                Size    = sizeof(MouseReport);
                break;
    3996:	ec ea       	ldi	r30, 0xAC	; 172
    3998:	f4 e0       	ldi	r31, 0x04	; 4
    399a:	26 e3       	ldi	r18, 0x36	; 54
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	04 c0       	rjmp	.+8      	; 0x39a8 <CALLBACK_USB_GetDescriptor+0xba>
    39a0:	e0 e0       	ldi	r30, 0x00	; 0
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    39a8:	ed 93       	st	X+, r30
    39aa:	fc 93       	st	X, r31
    return Size;
}
    39ac:	c9 01       	movw	r24, r18
    39ae:	08 95       	ret

000039b0 <Endpoint_Write_Control_Stream_LE>:
    39b0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    39b2:	40 91 27 02 	lds	r20, 0x0227
    39b6:	50 91 28 02 	lds	r21, 0x0228
    39ba:	46 17       	cp	r20, r22
    39bc:	57 07       	cpc	r21, r23
    39be:	18 f4       	brcc	.+6      	; 0x39c6 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    39c0:	f9 01       	movw	r30, r18
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	43 c0       	rjmp	.+134    	; 0x3a4c <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    39c6:	61 15       	cp	r22, r1
    39c8:	71 05       	cpc	r23, r1
    39ca:	11 f0       	breq	.+4      	; 0x39d0 <Endpoint_Write_Control_Stream_LE+0x20>
    39cc:	ab 01       	movw	r20, r22
    39ce:	f8 cf       	rjmp	.-16     	; 0x39c0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39d0:	80 91 e8 00 	lds	r24, 0x00E8
    39d4:	8e 77       	andi	r24, 0x7E	; 126
    39d6:	80 93 e8 00 	sts	0x00E8, r24
    39da:	40 e0       	ldi	r20, 0x00	; 0
    39dc:	50 e0       	ldi	r21, 0x00	; 0
    39de:	f0 cf       	rjmp	.-32     	; 0x39c0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39e0:	80 91 20 02 	lds	r24, 0x0220

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39e4:	88 23       	and	r24, r24
    39e6:	09 f4       	brne	.+2      	; 0x39ea <Endpoint_Write_Control_Stream_LE+0x3a>
    39e8:	47 c0       	rjmp	.+142    	; 0x3a78 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39ea:	85 30       	cpi	r24, 0x05	; 5
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <Endpoint_Write_Control_Stream_LE+0x40>
    39ee:	46 c0       	rjmp	.+140    	; 0x3a7c <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    39f0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    39f4:	83 fd       	sbrc	r24, 3
    39f6:	44 c0       	rjmp	.+136    	; 0x3a80 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39f8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    39fc:	82 fd       	sbrc	r24, 2
    39fe:	36 c0       	rjmp	.+108    	; 0x3a6c <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3a00:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3a04:	80 ff       	sbrs	r24, 0
    3a06:	22 c0       	rjmp	.+68     	; 0x3a4c <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    3a08:	80 91 f3 00 	lds	r24, 0x00F3
    3a0c:	90 91 f2 00 	lds	r25, 0x00F2
    3a10:	78 2f       	mov	r23, r24
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	29 2f       	mov	r18, r25
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	26 2b       	or	r18, r22
    3a1a:	37 2b       	or	r19, r23
    3a1c:	07 c0       	rjmp	.+14     	; 0x3a2c <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3a1e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3a20:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3a24:	41 50       	subi	r20, 0x01	; 1
    3a26:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3a28:	2f 5f       	subi	r18, 0xFF	; 255
    3a2a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3a2c:	41 15       	cp	r20, r1
    3a2e:	51 05       	cpc	r21, r1
    3a30:	19 f0       	breq	.+6      	; 0x3a38 <Endpoint_Write_Control_Stream_LE+0x88>
    3a32:	28 30       	cpi	r18, 0x08	; 8
    3a34:	31 05       	cpc	r19, r1
    3a36:	98 f3       	brcs	.-26     	; 0x3a1e <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	28 30       	cpi	r18, 0x08	; 8
    3a3c:	31 05       	cpc	r19, r1
    3a3e:	09 f4       	brne	.+2      	; 0x3a42 <Endpoint_Write_Control_Stream_LE+0x92>
    3a40:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a42:	80 91 e8 00 	lds	r24, 0x00E8
    3a46:	8e 77       	andi	r24, 0x7E	; 126
    3a48:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3a4c:	41 15       	cp	r20, r1
    3a4e:	51 05       	cpc	r21, r1
    3a50:	39 f6       	brne	.-114    	; 0x39e0 <Endpoint_Write_Control_Stream_LE+0x30>
    3a52:	99 23       	and	r25, r25
    3a54:	29 f6       	brne	.-118    	; 0x39e0 <Endpoint_Write_Control_Stream_LE+0x30>
    3a56:	0a c0       	rjmp	.+20     	; 0x3a6c <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3a58:	80 91 20 02 	lds	r24, 0x0220

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3a5c:	88 23       	and	r24, r24
    3a5e:	61 f0       	breq	.+24     	; 0x3a78 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3a60:	85 30       	cpi	r24, 0x05	; 5
    3a62:	61 f0       	breq	.+24     	; 0x3a7c <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3a64:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3a68:	83 fd       	sbrc	r24, 3
    3a6a:	0a c0       	rjmp	.+20     	; 0x3a80 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a6c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3a70:	82 ff       	sbrs	r24, 2
    3a72:	f2 cf       	rjmp	.-28     	; 0x3a58 <Endpoint_Write_Control_Stream_LE+0xa8>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	08 95       	ret
    3a78:	82 e0       	ldi	r24, 0x02	; 2
    3a7a:	08 95       	ret
    3a7c:	83 e0       	ldi	r24, 0x03	; 3
    3a7e:	08 95       	ret
    3a80:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3a82:	08 95       	ret

00003a84 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3a84:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3a86:	40 91 27 02 	lds	r20, 0x0227
    3a8a:	50 91 28 02 	lds	r21, 0x0228
    3a8e:	46 17       	cp	r20, r22
    3a90:	57 07       	cpc	r21, r23
    3a92:	18 f4       	brcc	.+6      	; 0x3a9a <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3a94:	f9 01       	movw	r30, r18
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	44 c0       	rjmp	.+136    	; 0x3b22 <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3a9a:	61 15       	cp	r22, r1
    3a9c:	71 05       	cpc	r23, r1
    3a9e:	11 f0       	breq	.+4      	; 0x3aa4 <Endpoint_Write_Control_PStream_LE+0x20>
    3aa0:	ab 01       	movw	r20, r22
    3aa2:	f8 cf       	rjmp	.-16     	; 0x3a94 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3aa4:	80 91 e8 00 	lds	r24, 0x00E8
    3aa8:	8e 77       	andi	r24, 0x7E	; 126
    3aaa:	80 93 e8 00 	sts	0x00E8, r24
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	50 e0       	ldi	r21, 0x00	; 0
    3ab2:	f0 cf       	rjmp	.-32     	; 0x3a94 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3ab4:	80 91 20 02 	lds	r24, 0x0220

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3ab8:	88 23       	and	r24, r24
    3aba:	09 f4       	brne	.+2      	; 0x3abe <Endpoint_Write_Control_PStream_LE+0x3a>
    3abc:	48 c0       	rjmp	.+144    	; 0x3b4e <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3abe:	85 30       	cpi	r24, 0x05	; 5
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <Endpoint_Write_Control_PStream_LE+0x40>
    3ac2:	47 c0       	rjmp	.+142    	; 0x3b52 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3ac4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3ac8:	83 fd       	sbrc	r24, 3
    3aca:	45 c0       	rjmp	.+138    	; 0x3b56 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3acc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3ad0:	82 fd       	sbrc	r24, 2
    3ad2:	37 c0       	rjmp	.+110    	; 0x3b42 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3ad4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3ad8:	80 ff       	sbrs	r24, 0
    3ada:	23 c0       	rjmp	.+70     	; 0x3b22 <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    3adc:	80 91 f3 00 	lds	r24, 0x00F3
    3ae0:	90 91 f2 00 	lds	r25, 0x00F2
    3ae4:	78 2f       	mov	r23, r24
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	29 2f       	mov	r18, r25
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	26 2b       	or	r18, r22
    3aee:	37 2b       	or	r19, r23
    3af0:	08 c0       	rjmp	.+16     	; 0x3b02 <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3af2:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3af4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3af8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    3afa:	41 50       	subi	r20, 0x01	; 1
    3afc:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3afe:	2f 5f       	subi	r18, 0xFF	; 255
    3b00:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3b02:	41 15       	cp	r20, r1
    3b04:	51 05       	cpc	r21, r1
    3b06:	19 f0       	breq	.+6      	; 0x3b0e <Endpoint_Write_Control_PStream_LE+0x8a>
    3b08:	28 30       	cpi	r18, 0x08	; 8
    3b0a:	31 05       	cpc	r19, r1
    3b0c:	90 f3       	brcs	.-28     	; 0x3af2 <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	28 30       	cpi	r18, 0x08	; 8
    3b12:	31 05       	cpc	r19, r1
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <Endpoint_Write_Control_PStream_LE+0x94>
    3b16:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3b18:	80 91 e8 00 	lds	r24, 0x00E8
    3b1c:	8e 77       	andi	r24, 0x7E	; 126
    3b1e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3b22:	41 15       	cp	r20, r1
    3b24:	51 05       	cpc	r21, r1
    3b26:	31 f6       	brne	.-116    	; 0x3ab4 <Endpoint_Write_Control_PStream_LE+0x30>
    3b28:	99 23       	and	r25, r25
    3b2a:	21 f6       	brne	.-120    	; 0x3ab4 <Endpoint_Write_Control_PStream_LE+0x30>
    3b2c:	0a c0       	rjmp	.+20     	; 0x3b42 <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3b2e:	80 91 20 02 	lds	r24, 0x0220

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3b32:	88 23       	and	r24, r24
    3b34:	61 f0       	breq	.+24     	; 0x3b4e <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3b36:	85 30       	cpi	r24, 0x05	; 5
    3b38:	61 f0       	breq	.+24     	; 0x3b52 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3b3a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3b3e:	83 fd       	sbrc	r24, 3
    3b40:	0a c0       	rjmp	.+20     	; 0x3b56 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3b42:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3b46:	82 ff       	sbrs	r24, 2
    3b48:	f2 cf       	rjmp	.-28     	; 0x3b2e <Endpoint_Write_Control_PStream_LE+0xaa>
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	08 95       	ret
    3b4e:	82 e0       	ldi	r24, 0x02	; 2
    3b50:	08 95       	ret
    3b52:	83 e0       	ldi	r24, 0x03	; 3
    3b54:	08 95       	ret
    3b56:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3b58:	08 95       	ret

00003b5a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3b5a:	bf 92       	push	r11
    3b5c:	cf 92       	push	r12
    3b5e:	df 92       	push	r13
    3b60:	ef 92       	push	r14
    3b62:	ff 92       	push	r15
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	18 2f       	mov	r17, r24
    3b6e:	09 2f       	mov	r16, r25
    3b70:	7b 01       	movw	r14, r22
    3b72:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3b74:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <Endpoint_WaitUntilReady>
    3b78:	b8 2e       	mov	r11, r24
    3b7a:	88 23       	and	r24, r24
    3b7c:	b1 f5       	brne	.+108    	; 0x3bea <Endpoint_Write_Stream_LE+0x90>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3b7e:	81 2f       	mov	r24, r17
    3b80:	90 2f       	mov	r25, r16
    3b82:	9c 01       	movw	r18, r24
    3b84:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3b86:	c1 14       	cp	r12, r1
    3b88:	d1 04       	cpc	r13, r1
    3b8a:	39 f0       	breq	.+14     	; 0x3b9a <Endpoint_Write_Stream_LE+0x40>
	{
		Length -= *BytesProcessed;
    3b8c:	f6 01       	movw	r30, r12
    3b8e:	80 81       	ld	r24, Z
    3b90:	91 81       	ldd	r25, Z+1	; 0x01
    3b92:	e8 1a       	sub	r14, r24
    3b94:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3b96:	c8 0f       	add	r28, r24
    3b98:	d9 1f       	adc	r29, r25
    3b9a:	00 e0       	ldi	r16, 0x00	; 0
    3b9c:	10 e0       	ldi	r17, 0x00	; 0
    3b9e:	22 c0       	rjmp	.+68     	; 0x3be4 <Endpoint_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3ba0:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3ba4:	85 fd       	sbrc	r24, 5
    3ba6:	16 c0       	rjmp	.+44     	; 0x3bd4 <Endpoint_Write_Stream_LE+0x7a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ba8:	80 91 e8 00 	lds	r24, 0x00E8
    3bac:	8e 77       	andi	r24, 0x7E	; 126
    3bae:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    3bb2:	c1 14       	cp	r12, r1
    3bb4:	d1 04       	cpc	r13, r1
    3bb6:	49 f0       	breq	.+18     	; 0x3bca <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    3bb8:	f6 01       	movw	r30, r12
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	80 0f       	add	r24, r16
    3bc0:	91 1f       	adc	r25, r17
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
    3bc6:	85 e0       	ldi	r24, 0x05	; 5
    3bc8:	11 c0       	rjmp	.+34     	; 0x3bec <Endpoint_Write_Stream_LE+0x92>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3bca:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <Endpoint_WaitUntilReady>
    3bce:	88 23       	and	r24, r24
    3bd0:	49 f0       	breq	.+18     	; 0x3be4 <Endpoint_Write_Stream_LE+0x8a>
    3bd2:	0c c0       	rjmp	.+24     	; 0x3bec <Endpoint_Write_Stream_LE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3bd4:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3bd6:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3bda:	08 94       	sec
    3bdc:	e1 08       	sbc	r14, r1
    3bde:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    3be0:	0f 5f       	subi	r16, 0xFF	; 255
    3be2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3be4:	e1 14       	cp	r14, r1
    3be6:	f1 04       	cpc	r15, r1
    3be8:	d9 f6       	brne	.-74     	; 0x3ba0 <Endpoint_Write_Stream_LE+0x46>
    3bea:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	1f 91       	pop	r17
    3bf2:	0f 91       	pop	r16
    3bf4:	ff 90       	pop	r15
    3bf6:	ef 90       	pop	r14
    3bf8:	df 90       	pop	r13
    3bfa:	cf 90       	pop	r12
    3bfc:	bf 90       	pop	r11
    3bfe:	08 95       	ret

00003c00 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    3c00:	38 2f       	mov	r19, r24
    3c02:	28 2f       	mov	r18, r24
    3c04:	2e c0       	rjmp	.+92     	; 0x3c62 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c06:	82 2f       	mov	r24, r18
    3c08:	8f 70       	andi	r24, 0x0F	; 15
    3c0a:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    3c0e:	23 17       	cp	r18, r19
    3c10:	21 f4       	brne	.+8      	; 0x3c1a <Endpoint_ConfigureEndpoint_Prv+0x1a>
    3c12:	76 2f       	mov	r23, r22
    3c14:	94 2f       	mov	r25, r20
    3c16:	50 e0       	ldi	r21, 0x00	; 0
    3c18:	06 c0       	rjmp	.+12     	; 0x3c26 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    3c1a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    3c1e:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    3c22:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    3c26:	91 ff       	sbrs	r25, 1
    3c28:	1b c0       	rjmp	.+54     	; 0x3c60 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    3c2a:	80 91 eb 00 	lds	r24, 0x00EB
    3c2e:	8e 7f       	andi	r24, 0xFE	; 254
    3c30:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    3c34:	80 91 ed 00 	lds	r24, 0x00ED
    3c38:	8d 7f       	andi	r24, 0xFD	; 253
    3c3a:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    3c3e:	80 91 eb 00 	lds	r24, 0x00EB
    3c42:	81 60       	ori	r24, 0x01	; 1
    3c44:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    3c48:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    3c4c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    3c50:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    3c54:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    3c58:	87 fd       	sbrc	r24, 7
    3c5a:	02 c0       	rjmp	.+4      	; 0x3c60 <Endpoint_ConfigureEndpoint_Prv+0x60>
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3c60:	2f 5f       	subi	r18, 0xFF	; 255
    3c62:	27 30       	cpi	r18, 0x07	; 7
    3c64:	80 f2       	brcs	.-96     	; 0x3c06 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c66:	3f 70       	andi	r19, 0x0F	; 15
    3c68:	30 93 e9 00 	sts	0x00E9, r19
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    3c6e:	08 95       	ret

00003c70 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3c70:	80 91 21 02 	lds	r24, 0x0221
    3c74:	88 23       	and	r24, r24
    3c76:	9c f4       	brge	.+38     	; 0x3c9e <Endpoint_ClearStatusStage+0x2e>
    3c78:	04 c0       	rjmp	.+8      	; 0x3c82 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3c7a:	80 91 20 02 	lds	r24, 0x0220
    3c7e:	88 23       	and	r24, r24
    3c80:	b9 f0       	breq	.+46     	; 0x3cb0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3c82:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3c86:	82 ff       	sbrs	r24, 2
    3c88:	f8 cf       	rjmp	.-16     	; 0x3c7a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3c8a:	80 91 e8 00 	lds	r24, 0x00E8
    3c8e:	8b 77       	andi	r24, 0x7B	; 123
    3c90:	80 93 e8 00 	sts	0x00E8, r24
    3c94:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3c96:	80 91 20 02 	lds	r24, 0x0220
    3c9a:	88 23       	and	r24, r24
    3c9c:	49 f0       	breq	.+18     	; 0x3cb0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3c9e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3ca2:	80 ff       	sbrs	r24, 0
    3ca4:	f8 cf       	rjmp	.-16     	; 0x3c96 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ca6:	80 91 e8 00 	lds	r24, 0x00E8
    3caa:	8e 77       	andi	r24, 0x7E	; 126
    3cac:	80 93 e8 00 	sts	0x00E8, r24
    3cb0:	08 95       	ret

00003cb2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3cb2:	40 91 e4 00 	lds	r20, 0x00E4
    3cb6:	50 91 e5 00 	lds	r21, 0x00E5
    3cba:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3cbc:	80 91 ec 00 	lds	r24, 0x00EC
    3cc0:	80 ff       	sbrs	r24, 0
    3cc2:	24 c0       	rjmp	.+72     	; 0x3d0c <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3cc4:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    3cc8:	80 fd       	sbrc	r24, 0
    3cca:	1e c0       	rjmp	.+60     	; 0x3d08 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3ccc:	80 91 20 02 	lds	r24, 0x0220

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3cd0:	88 23       	and	r24, r24
    3cd2:	11 f4       	brne	.+4      	; 0x3cd8 <Endpoint_WaitUntilReady+0x26>
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3cd8:	85 30       	cpi	r24, 0x05	; 5
    3cda:	11 f4       	brne	.+4      	; 0x3ce0 <Endpoint_WaitUntilReady+0x2e>
    3cdc:	83 e0       	ldi	r24, 0x03	; 3
    3cde:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3ce0:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3ce4:	85 ff       	sbrs	r24, 5
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <Endpoint_WaitUntilReady+0x3a>
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	08 95       	ret
    3cec:	80 91 e4 00 	lds	r24, 0x00E4
    3cf0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3cf4:	84 17       	cp	r24, r20
    3cf6:	95 07       	cpc	r25, r21
    3cf8:	09 f3       	breq	.-62     	; 0x3cbc <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    3cfa:	22 23       	and	r18, r18
    3cfc:	11 f4       	brne	.+4      	; 0x3d02 <Endpoint_WaitUntilReady+0x50>
    3cfe:	84 e0       	ldi	r24, 0x04	; 4
    3d00:	08 95       	ret
    3d02:	21 50       	subi	r18, 0x01	; 1
    3d04:	ac 01       	movw	r20, r24
    3d06:	da cf       	rjmp	.-76     	; 0x3cbc <Endpoint_WaitUntilReady+0xa>
    3d08:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3d0a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3d0c:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3d10:	82 ff       	sbrs	r24, 2
    3d12:	dc cf       	rjmp	.-72     	; 0x3ccc <Endpoint_WaitUntilReady+0x1a>
    3d14:	f9 cf       	rjmp	.-14     	; 0x3d08 <Endpoint_WaitUntilReady+0x56>

00003d16 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    3d16:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3d1a:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    3d1e:	e0 ee       	ldi	r30, 0xE0	; 224
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	81 60       	ori	r24, 0x01	; 1
    3d26:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    3d28:	a8 ed       	ldi	r26, 0xD8	; 216
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	8c 91       	ld	r24, X
    3d2e:	8f 77       	andi	r24, 0x7F	; 127
    3d30:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3d32:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    3d34:	e7 ed       	ldi	r30, 0xD7	; 215
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	80 81       	ld	r24, Z
    3d3a:	8e 7f       	andi	r24, 0xFE	; 254
    3d3c:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3d3e:	8c 91       	ld	r24, X
    3d40:	8f 7e       	andi	r24, 0xEF	; 239
    3d42:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    3d44:	10 92 1f 02 	sts	0x021F, r1
}
    3d48:	08 95       	ret

00003d4a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    3d4a:	ef 92       	push	r14
    3d4c:	ff 92       	push	r15
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3d52:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3d56:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3d5a:	08 ed       	ldi	r16, 0xD8	; 216
    3d5c:	10 e0       	ldi	r17, 0x00	; 0
    3d5e:	f8 01       	movw	r30, r16
    3d60:	80 81       	ld	r24, Z
    3d62:	8f 77       	andi	r24, 0x7F	; 127
    3d64:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    3d66:	80 81       	ld	r24, Z
    3d68:	80 68       	ori	r24, 0x80	; 128
    3d6a:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3d6c:	80 81       	ld	r24, Z
    3d6e:	8f 7d       	andi	r24, 0xDF	; 223
    3d70:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3d72:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3d74:	10 92 20 02 	sts	0x0220, r1
	USB_Device_ConfigurationNumber  = 0;
    3d78:	10 92 1c 02 	sts	0x021C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3d7c:	10 92 1e 02 	sts	0x021E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3d80:	10 92 1d 02 	sts	0x021D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3d84:	80 ee       	ldi	r24, 0xE0	; 224
    3d86:	e8 2e       	mov	r14, r24
    3d88:	f1 2c       	mov	r15, r1
    3d8a:	f7 01       	movw	r30, r14
    3d8c:	80 81       	ld	r24, Z
    3d8e:	8b 7f       	andi	r24, 0xFB	; 251
    3d90:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3d92:	f8 01       	movw	r30, r16
    3d94:	80 81       	ld	r24, Z
    3d96:	81 60       	ori	r24, 0x01	; 1
    3d98:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	60 e0       	ldi	r22, 0x00	; 0
    3d9e:	42 e0       	ldi	r20, 0x02	; 2
    3da0:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3da4:	e1 ee       	ldi	r30, 0xE1	; 225
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	80 81       	ld	r24, Z
    3daa:	8e 7f       	andi	r24, 0xFE	; 254
    3dac:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3dae:	e2 ee       	ldi	r30, 0xE2	; 226
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	81 60       	ori	r24, 0x01	; 1
    3db6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3db8:	80 81       	ld	r24, Z
    3dba:	88 60       	ori	r24, 0x08	; 8
    3dbc:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3dbe:	f7 01       	movw	r30, r14
    3dc0:	80 81       	ld	r24, Z
    3dc2:	8e 7f       	andi	r24, 0xFE	; 254
    3dc4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	80 81       	ld	r24, Z
    3dca:	80 61       	ori	r24, 0x10	; 16
    3dcc:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3dce:	1f 91       	pop	r17
    3dd0:	0f 91       	pop	r16
    3dd2:	ff 90       	pop	r15
    3dd4:	ef 90       	pop	r14
    3dd6:	08 95       	ret

00003dd8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3dd8:	e8 ed       	ldi	r30, 0xD8	; 216
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	8f 7e       	andi	r24, 0xEF	; 239
    3de0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    3de2:	e7 ed       	ldi	r30, 0xD7	; 215
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	80 81       	ld	r24, Z
    3de8:	81 60       	ori	r24, 0x01	; 1
    3dea:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    3dec:	84 e0       	ldi	r24, 0x04	; 4
    3dee:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	80 93 1f 02 	sts	0x021F, r24

	USB_ResetInterface();
    3df6:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <USB_ResetInterface>
}
    3dfa:	08 95       	ret

00003dfc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    3dfc:	e8 ed       	ldi	r30, 0xD8	; 216
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	8e 7f       	andi	r24, 0xFE	; 254
    3e04:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3e06:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    3e0a:	08 95       	ret

00003e0c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3e0c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3e10:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    3e14:	08 95       	ret

00003e16 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3e16:	1f 92       	push	r1
    3e18:	0f 92       	push	r0
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	0f 92       	push	r0
    3e1e:	11 24       	eor	r1, r1
    3e20:	1f 93       	push	r17
    3e22:	2f 93       	push	r18
    3e24:	3f 93       	push	r19
    3e26:	4f 93       	push	r20
    3e28:	5f 93       	push	r21
    3e2a:	6f 93       	push	r22
    3e2c:	7f 93       	push	r23
    3e2e:	8f 93       	push	r24
    3e30:	9f 93       	push	r25
    3e32:	af 93       	push	r26
    3e34:	bf 93       	push	r27
    3e36:	ef 93       	push	r30
    3e38:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e3a:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3e3e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e42:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3e46:	80 91 f0 00 	lds	r24, 0x00F0
    3e4a:	87 7f       	andi	r24, 0xF7	; 247
    3e4c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3e50:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3e52:	0e 94 19 20 	call	0x4032	; 0x4032 <USB_Device_ProcessControlRequest>
    3e56:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3e5a:	80 91 f0 00 	lds	r24, 0x00F0
    3e5e:	88 60       	ori	r24, 0x08	; 8
    3e60:	80 93 f0 00 	sts	0x00F0, r24
    3e64:	1f 70       	andi	r17, 0x0F	; 15
    3e66:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3e6a:	ff 91       	pop	r31
    3e6c:	ef 91       	pop	r30
    3e6e:	bf 91       	pop	r27
    3e70:	af 91       	pop	r26
    3e72:	9f 91       	pop	r25
    3e74:	8f 91       	pop	r24
    3e76:	7f 91       	pop	r23
    3e78:	6f 91       	pop	r22
    3e7a:	5f 91       	pop	r21
    3e7c:	4f 91       	pop	r20
    3e7e:	3f 91       	pop	r19
    3e80:	2f 91       	pop	r18
    3e82:	1f 91       	pop	r17
    3e84:	0f 90       	pop	r0
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	0f 90       	pop	r0
    3e8a:	1f 90       	pop	r1
    3e8c:	18 95       	reti

00003e8e <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3e8e:	1f 92       	push	r1
    3e90:	0f 92       	push	r0
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	0f 92       	push	r0
    3e96:	11 24       	eor	r1, r1
    3e98:	2f 93       	push	r18
    3e9a:	3f 93       	push	r19
    3e9c:	4f 93       	push	r20
    3e9e:	5f 93       	push	r21
    3ea0:	6f 93       	push	r22
    3ea2:	7f 93       	push	r23
    3ea4:	8f 93       	push	r24
    3ea6:	9f 93       	push	r25
    3ea8:	af 93       	push	r26
    3eaa:	bf 93       	push	r27
    3eac:	ef 93       	push	r30
    3eae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3eb0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3eb4:	82 ff       	sbrs	r24, 2
    3eb6:	0b c0       	rjmp	.+22     	; 0x3ece <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3eb8:	80 91 e2 00 	lds	r24, 0x00E2
    3ebc:	82 ff       	sbrs	r24, 2
    3ebe:	07 c0       	rjmp	.+14     	; 0x3ece <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3ec0:	80 91 e1 00 	lds	r24, 0x00E1
    3ec4:	8b 7f       	andi	r24, 0xFB	; 251
    3ec6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3eca:	0e 94 89 21 	call	0x4312	; 0x4312 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3ece:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3ed2:	80 ff       	sbrs	r24, 0
    3ed4:	1f c0       	rjmp	.+62     	; 0x3f14 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3ed6:	80 91 d8 00 	lds	r24, 0x00D8
    3eda:	80 ff       	sbrs	r24, 0
    3edc:	1b c0       	rjmp	.+54     	; 0x3f14 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    3ede:	80 91 da 00 	lds	r24, 0x00DA
    3ee2:	8e 7f       	andi	r24, 0xFE	; 254
    3ee4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3ee8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3eec:	80 ff       	sbrs	r24, 0
    3eee:	0d c0       	rjmp	.+26     	; 0x3f0a <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3ef0:	80 e1       	ldi	r24, 0x10	; 16
    3ef2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3ef4:	82 e1       	ldi	r24, 0x12	; 18
    3ef6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3ef8:	09 b4       	in	r0, 0x29	; 41
    3efa:	00 fe       	sbrs	r0, 0
    3efc:	fd cf       	rjmp	.-6      	; 0x3ef8 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	80 93 20 02 	sts	0x0220, r24
			EVENT_USB_Device_Connect();
    3f04:	0e 94 94 1b 	call	0x3728	; 0x3728 <EVENT_USB_Device_Connect>
    3f08:	05 c0       	rjmp	.+10     	; 0x3f14 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3f0a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3f0c:	10 92 20 02 	sts	0x0220, r1
			EVENT_USB_Device_Disconnect();
    3f10:	0e 94 c3 1a 	call	0x3586	; 0x3586 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3f14:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3f18:	80 ff       	sbrs	r24, 0
    3f1a:	19 c0       	rjmp	.+50     	; 0x3f4e <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3f1c:	80 91 e2 00 	lds	r24, 0x00E2
    3f20:	80 ff       	sbrs	r24, 0
    3f22:	15 c0       	rjmp	.+42     	; 0x3f4e <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3f24:	80 91 e2 00 	lds	r24, 0x00E2
    3f28:	8e 7f       	andi	r24, 0xFE	; 254
    3f2a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3f2e:	80 91 e2 00 	lds	r24, 0x00E2
    3f32:	80 61       	ori	r24, 0x10	; 16
    3f34:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3f38:	80 91 d8 00 	lds	r24, 0x00D8
    3f3c:	80 62       	ori	r24, 0x20	; 32
    3f3e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3f42:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3f44:	85 e0       	ldi	r24, 0x05	; 5
    3f46:	80 93 20 02 	sts	0x0220, r24
		EVENT_USB_Device_Suspend();
    3f4a:	0e 94 c7 1a 	call	0x358e	; 0x358e <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3f4e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3f52:	84 ff       	sbrs	r24, 4
    3f54:	30 c0       	rjmp	.+96     	; 0x3fb6 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3f56:	80 91 e2 00 	lds	r24, 0x00E2
    3f5a:	84 ff       	sbrs	r24, 4
    3f5c:	2c c0       	rjmp	.+88     	; 0x3fb6 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3f5e:	80 e1       	ldi	r24, 0x10	; 16
    3f60:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3f62:	82 e1       	ldi	r24, 0x12	; 18
    3f64:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3f66:	09 b4       	in	r0, 0x29	; 41
    3f68:	00 fe       	sbrs	r0, 0
    3f6a:	fd cf       	rjmp	.-6      	; 0x3f66 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3f6c:	80 91 d8 00 	lds	r24, 0x00D8
    3f70:	8f 7d       	andi	r24, 0xDF	; 223
    3f72:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3f76:	80 91 e1 00 	lds	r24, 0x00E1
    3f7a:	8f 7e       	andi	r24, 0xEF	; 239
    3f7c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3f80:	80 91 e2 00 	lds	r24, 0x00E2
    3f84:	8f 7e       	andi	r24, 0xEF	; 239
    3f86:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3f8a:	80 91 e2 00 	lds	r24, 0x00E2
    3f8e:	81 60       	ori	r24, 0x01	; 1
    3f90:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3f94:	80 91 1c 02 	lds	r24, 0x021C
    3f98:	88 23       	and	r24, r24
    3f9a:	11 f0       	breq	.+4      	; 0x3fa0 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3f9c:	84 e0       	ldi	r24, 0x04	; 4
    3f9e:	07 c0       	rjmp	.+14     	; 0x3fae <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3fa0:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3fa4:	87 fd       	sbrc	r24, 7
    3fa6:	02 c0       	rjmp	.+4      	; 0x3fac <__vector_10+0x11e>
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	01 c0       	rjmp	.+2      	; 0x3fae <__vector_10+0x120>
    3fac:	83 e0       	ldi	r24, 0x03	; 3
    3fae:	80 93 20 02 	sts	0x0220, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3fb2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3fb6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3fba:	83 ff       	sbrs	r24, 3
    3fbc:	29 c0       	rjmp	.+82     	; 0x4010 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3fbe:	80 91 e2 00 	lds	r24, 0x00E2
    3fc2:	83 ff       	sbrs	r24, 3
    3fc4:	25 c0       	rjmp	.+74     	; 0x4010 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3fc6:	80 91 e1 00 	lds	r24, 0x00E1
    3fca:	87 7f       	andi	r24, 0xF7	; 247
    3fcc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	80 93 20 02 	sts	0x0220, r24
		USB_Device_ConfigurationNumber = 0;
    3fd6:	10 92 1c 02 	sts	0x021C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3fda:	80 91 e1 00 	lds	r24, 0x00E1
    3fde:	8e 7f       	andi	r24, 0xFE	; 254
    3fe0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3fe4:	80 91 e2 00 	lds	r24, 0x00E2
    3fe8:	8e 7f       	andi	r24, 0xFE	; 254
    3fea:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3fee:	80 91 e2 00 	lds	r24, 0x00E2
    3ff2:	80 61       	ori	r24, 0x10	; 16
    3ff4:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	42 e0       	ldi	r20, 0x02	; 2
    3ffe:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    4002:	80 91 f0 00 	lds	r24, 0x00F0
    4006:	88 60       	ori	r24, 0x08	; 8
    4008:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    400c:	0e 94 c6 1a 	call	0x358c	; 0x358c <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    4010:	ff 91       	pop	r31
    4012:	ef 91       	pop	r30
    4014:	bf 91       	pop	r27
    4016:	af 91       	pop	r26
    4018:	9f 91       	pop	r25
    401a:	8f 91       	pop	r24
    401c:	7f 91       	pop	r23
    401e:	6f 91       	pop	r22
    4020:	5f 91       	pop	r21
    4022:	4f 91       	pop	r20
    4024:	3f 91       	pop	r19
    4026:	2f 91       	pop	r18
    4028:	0f 90       	pop	r0
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	0f 90       	pop	r0
    402e:	1f 90       	pop	r1
    4030:	18 95       	reti

00004032 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    4032:	1f 93       	push	r17
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
    403c:	ac 97       	sbiw	r28, 0x2c	; 44
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	e1 e2       	ldi	r30, 0x21	; 33
    404a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    404c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    4050:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    4052:	22 e0       	ldi	r18, 0x02	; 2
    4054:	e9 32       	cpi	r30, 0x29	; 41
    4056:	f2 07       	cpc	r31, r18
    4058:	c9 f7       	brne	.-14     	; 0x404c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    405a:	0e 94 a2 1b 	call	0x3744	; 0x3744 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    405e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    4062:	83 ff       	sbrs	r24, 3
    4064:	3e c1       	rjmp	.+636    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    4066:	80 91 21 02 	lds	r24, 0x0221

		switch (USB_ControlRequest.bRequest)
    406a:	30 91 22 02 	lds	r19, 0x0222
    406e:	35 30       	cpi	r19, 0x05	; 5
    4070:	09 f4       	brne	.+2      	; 0x4074 <USB_Device_ProcessControlRequest+0x42>
    4072:	87 c0       	rjmp	.+270    	; 0x4182 <USB_Device_ProcessControlRequest+0x150>
    4074:	36 30       	cpi	r19, 0x06	; 6
    4076:	40 f4       	brcc	.+16     	; 0x4088 <USB_Device_ProcessControlRequest+0x56>
    4078:	31 30       	cpi	r19, 0x01	; 1
    407a:	c9 f1       	breq	.+114    	; 0x40ee <USB_Device_ProcessControlRequest+0xbc>
    407c:	31 30       	cpi	r19, 0x01	; 1
    407e:	70 f0       	brcs	.+28     	; 0x409c <USB_Device_ProcessControlRequest+0x6a>
    4080:	33 30       	cpi	r19, 0x03	; 3
    4082:	09 f0       	breq	.+2      	; 0x4086 <USB_Device_ProcessControlRequest+0x54>
    4084:	2e c1       	rjmp	.+604    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
    4086:	33 c0       	rjmp	.+102    	; 0x40ee <USB_Device_ProcessControlRequest+0xbc>
    4088:	38 30       	cpi	r19, 0x08	; 8
    408a:	09 f4       	brne	.+2      	; 0x408e <USB_Device_ProcessControlRequest+0x5c>
    408c:	f9 c0       	rjmp	.+498    	; 0x4280 <USB_Device_ProcessControlRequest+0x24e>
    408e:	39 30       	cpi	r19, 0x09	; 9
    4090:	09 f4       	brne	.+2      	; 0x4094 <USB_Device_ProcessControlRequest+0x62>
    4092:	09 c1       	rjmp	.+530    	; 0x42a6 <USB_Device_ProcessControlRequest+0x274>
    4094:	36 30       	cpi	r19, 0x06	; 6
    4096:	09 f0       	breq	.+2      	; 0x409a <USB_Device_ProcessControlRequest+0x68>
    4098:	24 c1       	rjmp	.+584    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
    409a:	97 c0       	rjmp	.+302    	; 0x41ca <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    409c:	80 38       	cpi	r24, 0x80	; 128
    409e:	21 f0       	breq	.+8      	; 0x40a8 <USB_Device_ProcessControlRequest+0x76>
    40a0:	82 38       	cpi	r24, 0x82	; 130
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <USB_Device_ProcessControlRequest+0x74>
    40a4:	1e c1       	rjmp	.+572    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
    40a6:	08 c0       	rjmp	.+16     	; 0x40b8 <USB_Device_ProcessControlRequest+0x86>
    40a8:	90 91 1d 02 	lds	r25, 0x021D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    40ac:	80 91 1e 02 	lds	r24, 0x021E
    40b0:	88 23       	and	r24, r24
    40b2:	99 f0       	breq	.+38     	; 0x40da <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    40b4:	92 60       	ori	r25, 0x02	; 2
    40b6:	11 c0       	rjmp	.+34     	; 0x40da <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    40b8:	80 91 25 02 	lds	r24, 0x0225
    40bc:	8f 70       	andi	r24, 0x0F	; 15
    40be:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    40c2:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	25 e0       	ldi	r18, 0x05	; 5
    40ca:	96 95       	lsr	r25
    40cc:	87 95       	ror	r24
    40ce:	2a 95       	dec	r18
    40d0:	e1 f7       	brne	.-8      	; 0x40ca <USB_Device_ProcessControlRequest+0x98>
    40d2:	98 2f       	mov	r25, r24
    40d4:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    40d6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    40da:	80 91 e8 00 	lds	r24, 0x00E8
    40de:	87 7f       	andi	r24, 0xF7	; 247
    40e0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    40e4:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    40e8:	10 92 f1 00 	sts	0x00F1, r1
    40ec:	d4 c0       	rjmp	.+424    	; 0x4296 <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    40ee:	88 23       	and	r24, r24
    40f0:	19 f0       	breq	.+6      	; 0x40f8 <USB_Device_ProcessControlRequest+0xc6>
    40f2:	82 30       	cpi	r24, 0x02	; 2
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <USB_Device_ProcessControlRequest+0xc6>
    40f6:	f5 c0       	rjmp	.+490    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	8f 71       	andi	r24, 0x1F	; 31
    40fc:	90 70       	andi	r25, 0x00	; 0
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	21 f0       	breq	.+8      	; 0x410a <USB_Device_ProcessControlRequest+0xd8>
    4102:	02 97       	sbiw	r24, 0x02	; 2
    4104:	09 f0       	breq	.+2      	; 0x4108 <USB_Device_ProcessControlRequest+0xd6>
    4106:	ed c0       	rjmp	.+474    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
    4108:	0c c0       	rjmp	.+24     	; 0x4122 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    410a:	80 91 23 02 	lds	r24, 0x0223
    410e:	81 30       	cpi	r24, 0x01	; 1
    4110:	09 f0       	breq	.+2      	; 0x4114 <USB_Device_ProcessControlRequest+0xe2>
    4112:	e7 c0       	rjmp	.+462    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    4114:	10 92 1e 02 	sts	0x021E, r1
    4118:	33 30       	cpi	r19, 0x03	; 3
    411a:	69 f5       	brne	.+90     	; 0x4176 <USB_Device_ProcessControlRequest+0x144>
    411c:	80 93 1e 02 	sts	0x021E, r24
    4120:	2a c0       	rjmp	.+84     	; 0x4176 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    4122:	80 91 23 02 	lds	r24, 0x0223
    4126:	88 23       	and	r24, r24
    4128:	31 f5       	brne	.+76     	; 0x4176 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    412a:	20 91 25 02 	lds	r18, 0x0225
    412e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    4130:	09 f4       	brne	.+2      	; 0x4134 <USB_Device_ProcessControlRequest+0x102>
    4132:	d7 c0       	rjmp	.+430    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4134:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    4138:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    413c:	80 ff       	sbrs	r24, 0
    413e:	1b c0       	rjmp	.+54     	; 0x4176 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    4140:	33 30       	cpi	r19, 0x03	; 3
    4142:	21 f4       	brne	.+8      	; 0x414c <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4144:	80 91 eb 00 	lds	r24, 0x00EB
    4148:	80 62       	ori	r24, 0x20	; 32
    414a:	13 c0       	rjmp	.+38     	; 0x4172 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    414c:	80 91 eb 00 	lds	r24, 0x00EB
    4150:	80 61       	ori	r24, 0x10	; 16
    4152:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	02 c0       	rjmp	.+4      	; 0x4160 <USB_Device_ProcessControlRequest+0x12e>
    415c:	88 0f       	add	r24, r24
    415e:	99 1f       	adc	r25, r25
    4160:	2a 95       	dec	r18
    4162:	e2 f7       	brpl	.-8      	; 0x415c <USB_Device_ProcessControlRequest+0x12a>
    4164:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    4168:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    416c:	80 91 eb 00 	lds	r24, 0x00EB
    4170:	88 60       	ori	r24, 0x08	; 8
    4172:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4176:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    417a:	80 91 e8 00 	lds	r24, 0x00E8
    417e:	87 7f       	andi	r24, 0xF7	; 247
    4180:	8d c0       	rjmp	.+282    	; 0x429c <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4182:	88 23       	and	r24, r24
    4184:	09 f0       	breq	.+2      	; 0x4188 <USB_Device_ProcessControlRequest+0x156>
    4186:	ad c0       	rjmp	.+346    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    4188:	10 91 23 02 	lds	r17, 0x0223
    418c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    418e:	80 91 e3 00 	lds	r24, 0x00E3
    4192:	80 78       	andi	r24, 0x80	; 128
    4194:	81 2b       	or	r24, r17
    4196:	80 93 e3 00 	sts	0x00E3, r24
    419a:	80 91 e8 00 	lds	r24, 0x00E8
    419e:	87 7f       	andi	r24, 0xF7	; 247
    41a0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    41a4:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    41a8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    41ac:	80 ff       	sbrs	r24, 0
    41ae:	fc cf       	rjmp	.-8      	; 0x41a8 <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    41b0:	80 91 e3 00 	lds	r24, 0x00E3
    41b4:	80 68       	ori	r24, 0x80	; 128
    41b6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    41ba:	11 23       	and	r17, r17
    41bc:	11 f4       	brne	.+4      	; 0x41c2 <USB_Device_ProcessControlRequest+0x190>
    41be:	82 e0       	ldi	r24, 0x02	; 2
    41c0:	01 c0       	rjmp	.+2      	; 0x41c4 <USB_Device_ProcessControlRequest+0x192>
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	80 93 20 02 	sts	0x0220, r24
    41c8:	8c c0       	rjmp	.+280    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    41ca:	80 58       	subi	r24, 0x80	; 128
    41cc:	82 30       	cpi	r24, 0x02	; 2
    41ce:	08 f0       	brcs	.+2      	; 0x41d2 <USB_Device_ProcessControlRequest+0x1a0>
    41d0:	88 c0       	rjmp	.+272    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    41d2:	80 91 23 02 	lds	r24, 0x0223
    41d6:	90 91 24 02 	lds	r25, 0x0224
    41da:	23 e0       	ldi	r18, 0x03	; 3
    41dc:	8c 3d       	cpi	r24, 0xDC	; 220
    41de:	92 07       	cpc	r25, r18
    41e0:	09 f0       	breq	.+2      	; 0x41e4 <USB_Device_ProcessControlRequest+0x1b2>
    41e2:	34 c0       	rjmp	.+104    	; 0x424c <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    41e4:	83 e0       	ldi	r24, 0x03	; 3
    41e6:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    41e8:	8a e2       	ldi	r24, 0x2A	; 42
    41ea:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    41ec:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    41ee:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    41f0:	de 01       	movw	r26, r28
    41f2:	15 96       	adiw	r26, 0x05	; 5
    41f4:	6e e0       	ldi	r22, 0x0E	; 14
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    41fa:	11 e2       	ldi	r17, 0x21	; 33
    41fc:	e6 2f       	mov	r30, r22
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	10 93 57 00 	sts	0x0057, r17
    4204:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    4206:	40 ff       	sbrs	r20, 0
    4208:	03 c0       	rjmp	.+6      	; 0x4210 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    420a:	82 95       	swap	r24
    420c:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    420e:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    4210:	8f 70       	andi	r24, 0x0F	; 15
    4212:	28 2f       	mov	r18, r24
    4214:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    4216:	8a 30       	cpi	r24, 0x0A	; 10
    4218:	18 f0       	brcs	.+6      	; 0x4220 <USB_Device_ProcessControlRequest+0x1ee>
    421a:	c9 01       	movw	r24, r18
    421c:	c7 96       	adiw	r24, 0x37	; 55
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <USB_Device_ProcessControlRequest+0x1f2>
    4220:	c9 01       	movw	r24, r18
    4222:	c0 96       	adiw	r24, 0x30	; 48
    4224:	8d 93       	st	X+, r24
    4226:	9d 93       	st	X+, r25
    4228:	4f 5f       	subi	r20, 0xFF	; 255
    422a:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    422c:	44 31       	cpi	r20, 0x14	; 20
    422e:	51 05       	cpc	r21, r1
    4230:	29 f7       	brne	.-54     	; 0x41fc <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4232:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4234:	80 91 e8 00 	lds	r24, 0x00E8
    4238:	87 7f       	andi	r24, 0xF7	; 247
    423a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    423e:	ce 01       	movw	r24, r28
    4240:	03 96       	adiw	r24, 0x03	; 3
    4242:	6a e2       	ldi	r22, 0x2A	; 42
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <Endpoint_Write_Control_Stream_LE>
    424a:	14 c0       	rjmp	.+40     	; 0x4274 <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    424c:	60 91 25 02 	lds	r22, 0x0225
    4250:	ae 01       	movw	r20, r28
    4252:	4f 5f       	subi	r20, 0xFF	; 255
    4254:	5f 4f       	sbci	r21, 0xFF	; 255
    4256:	0e 94 77 1c 	call	0x38ee	; 0x38ee <CALLBACK_USB_GetDescriptor>
    425a:	bc 01       	movw	r22, r24
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	09 f4       	brne	.+2      	; 0x4262 <USB_Device_ProcessControlRequest+0x230>
    4260:	40 c0       	rjmp	.+128    	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
    4262:	80 91 e8 00 	lds	r24, 0x00E8
    4266:	87 7f       	andi	r24, 0xF7	; 247
    4268:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	9a 81       	ldd	r25, Y+2	; 0x02
    4270:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4274:	80 91 e8 00 	lds	r24, 0x00E8
    4278:	8b 77       	andi	r24, 0x7B	; 123
    427a:	80 93 e8 00 	sts	0x00E8, r24
    427e:	31 c0       	rjmp	.+98     	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    4280:	80 38       	cpi	r24, 0x80	; 128
    4282:	79 f5       	brne	.+94     	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4284:	80 91 e8 00 	lds	r24, 0x00E8
    4288:	87 7f       	andi	r24, 0xF7	; 247
    428a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    428e:	80 91 1c 02 	lds	r24, 0x021C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4292:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4296:	80 91 e8 00 	lds	r24, 0x00E8
    429a:	8e 77       	andi	r24, 0x7E	; 126
    429c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    42a0:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Endpoint_ClearStatusStage>
    42a4:	1e c0       	rjmp	.+60     	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    42a6:	88 23       	and	r24, r24
    42a8:	e1 f4       	brne	.+56     	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    42aa:	90 91 23 02 	lds	r25, 0x0223
    42ae:	92 30       	cpi	r25, 0x02	; 2
    42b0:	c0 f4       	brcc	.+48     	; 0x42e2 <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    42b2:	80 91 e8 00 	lds	r24, 0x00E8
    42b6:	87 7f       	andi	r24, 0xF7	; 247
    42b8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    42bc:	90 93 1c 02 	sts	0x021C, r25

	Endpoint_ClearStatusStage();
    42c0:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    42c4:	80 91 1c 02 	lds	r24, 0x021C
    42c8:	88 23       	and	r24, r24
    42ca:	31 f4       	brne	.+12     	; 0x42d8 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    42cc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    42d0:	87 fd       	sbrc	r24, 7
    42d2:	02 c0       	rjmp	.+4      	; 0x42d8 <USB_Device_ProcessControlRequest+0x2a6>
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	01 c0       	rjmp	.+2      	; 0x42da <USB_Device_ProcessControlRequest+0x2a8>
    42d8:	84 e0       	ldi	r24, 0x04	; 4
    42da:	80 93 20 02 	sts	0x0220, r24

	EVENT_USB_Device_ConfigurationChanged();
    42de:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    42e2:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    42e6:	83 ff       	sbrs	r24, 3
    42e8:	0a c0       	rjmp	.+20     	; 0x42fe <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    42ea:	80 91 e8 00 	lds	r24, 0x00E8
    42ee:	87 7f       	andi	r24, 0xF7	; 247
    42f0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    42f4:	80 91 eb 00 	lds	r24, 0x00EB
    42f8:	80 62       	ori	r24, 0x20	; 32
    42fa:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    42fe:	ac 96       	adiw	r28, 0x2c	; 44
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	cf 91       	pop	r28
    430c:	df 91       	pop	r29
    430e:	1f 91       	pop	r17
    4310:	08 95       	ret

00004312 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    4312:	08 95       	ret

00004314 <__fixsfsi>:
    4314:	04 d0       	rcall	.+8      	; 0x431e <__fixunssfsi>
    4316:	68 94       	set
    4318:	b1 11       	cpse	r27, r1
    431a:	8d c0       	rjmp	.+282    	; 0x4436 <__fp_szero>
    431c:	08 95       	ret

0000431e <__fixunssfsi>:
    431e:	70 d0       	rcall	.+224    	; 0x4400 <__fp_splitA>
    4320:	88 f0       	brcs	.+34     	; 0x4344 <__fixunssfsi+0x26>
    4322:	9f 57       	subi	r25, 0x7F	; 127
    4324:	90 f0       	brcs	.+36     	; 0x434a <__fixunssfsi+0x2c>
    4326:	b9 2f       	mov	r27, r25
    4328:	99 27       	eor	r25, r25
    432a:	b7 51       	subi	r27, 0x17	; 23
    432c:	a0 f0       	brcs	.+40     	; 0x4356 <__fixunssfsi+0x38>
    432e:	d1 f0       	breq	.+52     	; 0x4364 <__fixunssfsi+0x46>
    4330:	66 0f       	add	r22, r22
    4332:	77 1f       	adc	r23, r23
    4334:	88 1f       	adc	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	1a f0       	brmi	.+6      	; 0x4340 <__fixunssfsi+0x22>
    433a:	ba 95       	dec	r27
    433c:	c9 f7       	brne	.-14     	; 0x4330 <__fixunssfsi+0x12>
    433e:	12 c0       	rjmp	.+36     	; 0x4364 <__fixunssfsi+0x46>
    4340:	b1 30       	cpi	r27, 0x01	; 1
    4342:	81 f0       	breq	.+32     	; 0x4364 <__fixunssfsi+0x46>
    4344:	77 d0       	rcall	.+238    	; 0x4434 <__fp_zero>
    4346:	b1 e0       	ldi	r27, 0x01	; 1
    4348:	08 95       	ret
    434a:	74 c0       	rjmp	.+232    	; 0x4434 <__fp_zero>
    434c:	67 2f       	mov	r22, r23
    434e:	78 2f       	mov	r23, r24
    4350:	88 27       	eor	r24, r24
    4352:	b8 5f       	subi	r27, 0xF8	; 248
    4354:	39 f0       	breq	.+14     	; 0x4364 <__fixunssfsi+0x46>
    4356:	b9 3f       	cpi	r27, 0xF9	; 249
    4358:	cc f3       	brlt	.-14     	; 0x434c <__fixunssfsi+0x2e>
    435a:	86 95       	lsr	r24
    435c:	77 95       	ror	r23
    435e:	67 95       	ror	r22
    4360:	b3 95       	inc	r27
    4362:	d9 f7       	brne	.-10     	; 0x435a <__fixunssfsi+0x3c>
    4364:	3e f4       	brtc	.+14     	; 0x4374 <__fixunssfsi+0x56>
    4366:	90 95       	com	r25
    4368:	80 95       	com	r24
    436a:	70 95       	com	r23
    436c:	61 95       	neg	r22
    436e:	7f 4f       	sbci	r23, 0xFF	; 255
    4370:	8f 4f       	sbci	r24, 0xFF	; 255
    4372:	9f 4f       	sbci	r25, 0xFF	; 255
    4374:	08 95       	ret

00004376 <__floatunsisf>:
    4376:	e8 94       	clt
    4378:	09 c0       	rjmp	.+18     	; 0x438c <__floatsisf+0x12>

0000437a <__floatsisf>:
    437a:	97 fb       	bst	r25, 7
    437c:	3e f4       	brtc	.+14     	; 0x438c <__floatsisf+0x12>
    437e:	90 95       	com	r25
    4380:	80 95       	com	r24
    4382:	70 95       	com	r23
    4384:	61 95       	neg	r22
    4386:	7f 4f       	sbci	r23, 0xFF	; 255
    4388:	8f 4f       	sbci	r24, 0xFF	; 255
    438a:	9f 4f       	sbci	r25, 0xFF	; 255
    438c:	99 23       	and	r25, r25
    438e:	a9 f0       	breq	.+42     	; 0x43ba <__floatsisf+0x40>
    4390:	f9 2f       	mov	r31, r25
    4392:	96 e9       	ldi	r25, 0x96	; 150
    4394:	bb 27       	eor	r27, r27
    4396:	93 95       	inc	r25
    4398:	f6 95       	lsr	r31
    439a:	87 95       	ror	r24
    439c:	77 95       	ror	r23
    439e:	67 95       	ror	r22
    43a0:	b7 95       	ror	r27
    43a2:	f1 11       	cpse	r31, r1
    43a4:	f8 cf       	rjmp	.-16     	; 0x4396 <__floatsisf+0x1c>
    43a6:	fa f4       	brpl	.+62     	; 0x43e6 <__floatsisf+0x6c>
    43a8:	bb 0f       	add	r27, r27
    43aa:	11 f4       	brne	.+4      	; 0x43b0 <__floatsisf+0x36>
    43ac:	60 ff       	sbrs	r22, 0
    43ae:	1b c0       	rjmp	.+54     	; 0x43e6 <__floatsisf+0x6c>
    43b0:	6f 5f       	subi	r22, 0xFF	; 255
    43b2:	7f 4f       	sbci	r23, 0xFF	; 255
    43b4:	8f 4f       	sbci	r24, 0xFF	; 255
    43b6:	9f 4f       	sbci	r25, 0xFF	; 255
    43b8:	16 c0       	rjmp	.+44     	; 0x43e6 <__floatsisf+0x6c>
    43ba:	88 23       	and	r24, r24
    43bc:	11 f0       	breq	.+4      	; 0x43c2 <__floatsisf+0x48>
    43be:	96 e9       	ldi	r25, 0x96	; 150
    43c0:	11 c0       	rjmp	.+34     	; 0x43e4 <__floatsisf+0x6a>
    43c2:	77 23       	and	r23, r23
    43c4:	21 f0       	breq	.+8      	; 0x43ce <__floatsisf+0x54>
    43c6:	9e e8       	ldi	r25, 0x8E	; 142
    43c8:	87 2f       	mov	r24, r23
    43ca:	76 2f       	mov	r23, r22
    43cc:	05 c0       	rjmp	.+10     	; 0x43d8 <__floatsisf+0x5e>
    43ce:	66 23       	and	r22, r22
    43d0:	71 f0       	breq	.+28     	; 0x43ee <__floatsisf+0x74>
    43d2:	96 e8       	ldi	r25, 0x86	; 134
    43d4:	86 2f       	mov	r24, r22
    43d6:	70 e0       	ldi	r23, 0x00	; 0
    43d8:	60 e0       	ldi	r22, 0x00	; 0
    43da:	2a f0       	brmi	.+10     	; 0x43e6 <__floatsisf+0x6c>
    43dc:	9a 95       	dec	r25
    43de:	66 0f       	add	r22, r22
    43e0:	77 1f       	adc	r23, r23
    43e2:	88 1f       	adc	r24, r24
    43e4:	da f7       	brpl	.-10     	; 0x43dc <__floatsisf+0x62>
    43e6:	88 0f       	add	r24, r24
    43e8:	96 95       	lsr	r25
    43ea:	87 95       	ror	r24
    43ec:	97 f9       	bld	r25, 7
    43ee:	08 95       	ret

000043f0 <__fp_split3>:
    43f0:	57 fd       	sbrc	r21, 7
    43f2:	90 58       	subi	r25, 0x80	; 128
    43f4:	44 0f       	add	r20, r20
    43f6:	55 1f       	adc	r21, r21
    43f8:	59 f0       	breq	.+22     	; 0x4410 <__fp_splitA+0x10>
    43fa:	5f 3f       	cpi	r21, 0xFF	; 255
    43fc:	71 f0       	breq	.+28     	; 0x441a <__fp_splitA+0x1a>
    43fe:	47 95       	ror	r20

00004400 <__fp_splitA>:
    4400:	88 0f       	add	r24, r24
    4402:	97 fb       	bst	r25, 7
    4404:	99 1f       	adc	r25, r25
    4406:	61 f0       	breq	.+24     	; 0x4420 <__fp_splitA+0x20>
    4408:	9f 3f       	cpi	r25, 0xFF	; 255
    440a:	79 f0       	breq	.+30     	; 0x442a <__fp_splitA+0x2a>
    440c:	87 95       	ror	r24
    440e:	08 95       	ret
    4410:	12 16       	cp	r1, r18
    4412:	13 06       	cpc	r1, r19
    4414:	14 06       	cpc	r1, r20
    4416:	55 1f       	adc	r21, r21
    4418:	f2 cf       	rjmp	.-28     	; 0x43fe <__fp_split3+0xe>
    441a:	46 95       	lsr	r20
    441c:	f1 df       	rcall	.-30     	; 0x4400 <__fp_splitA>
    441e:	08 c0       	rjmp	.+16     	; 0x4430 <__fp_splitA+0x30>
    4420:	16 16       	cp	r1, r22
    4422:	17 06       	cpc	r1, r23
    4424:	18 06       	cpc	r1, r24
    4426:	99 1f       	adc	r25, r25
    4428:	f1 cf       	rjmp	.-30     	; 0x440c <__fp_splitA+0xc>
    442a:	86 95       	lsr	r24
    442c:	71 05       	cpc	r23, r1
    442e:	61 05       	cpc	r22, r1
    4430:	08 94       	sec
    4432:	08 95       	ret

00004434 <__fp_zero>:
    4434:	e8 94       	clt

00004436 <__fp_szero>:
    4436:	bb 27       	eor	r27, r27
    4438:	66 27       	eor	r22, r22
    443a:	77 27       	eor	r23, r23
    443c:	cb 01       	movw	r24, r22
    443e:	97 f9       	bld	r25, 7
    4440:	08 95       	ret

00004442 <__mulsf3>:
    4442:	0b d0       	rcall	.+22     	; 0x445a <__mulsf3x>
    4444:	78 c0       	rjmp	.+240    	; 0x4536 <__fp_round>
    4446:	69 d0       	rcall	.+210    	; 0x451a <__fp_pscA>
    4448:	28 f0       	brcs	.+10     	; 0x4454 <__mulsf3+0x12>
    444a:	6e d0       	rcall	.+220    	; 0x4528 <__fp_pscB>
    444c:	18 f0       	brcs	.+6      	; 0x4454 <__mulsf3+0x12>
    444e:	95 23       	and	r25, r21
    4450:	09 f0       	breq	.+2      	; 0x4454 <__mulsf3+0x12>
    4452:	5a c0       	rjmp	.+180    	; 0x4508 <__fp_inf>
    4454:	5f c0       	rjmp	.+190    	; 0x4514 <__fp_nan>
    4456:	11 24       	eor	r1, r1
    4458:	ee cf       	rjmp	.-36     	; 0x4436 <__fp_szero>

0000445a <__mulsf3x>:
    445a:	ca df       	rcall	.-108    	; 0x43f0 <__fp_split3>
    445c:	a0 f3       	brcs	.-24     	; 0x4446 <__mulsf3+0x4>

0000445e <__mulsf3_pse>:
    445e:	95 9f       	mul	r25, r21
    4460:	d1 f3       	breq	.-12     	; 0x4456 <__mulsf3+0x14>
    4462:	95 0f       	add	r25, r21
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	55 1f       	adc	r21, r21
    4468:	62 9f       	mul	r22, r18
    446a:	f0 01       	movw	r30, r0
    446c:	72 9f       	mul	r23, r18
    446e:	bb 27       	eor	r27, r27
    4470:	f0 0d       	add	r31, r0
    4472:	b1 1d       	adc	r27, r1
    4474:	63 9f       	mul	r22, r19
    4476:	aa 27       	eor	r26, r26
    4478:	f0 0d       	add	r31, r0
    447a:	b1 1d       	adc	r27, r1
    447c:	aa 1f       	adc	r26, r26
    447e:	64 9f       	mul	r22, r20
    4480:	66 27       	eor	r22, r22
    4482:	b0 0d       	add	r27, r0
    4484:	a1 1d       	adc	r26, r1
    4486:	66 1f       	adc	r22, r22
    4488:	82 9f       	mul	r24, r18
    448a:	22 27       	eor	r18, r18
    448c:	b0 0d       	add	r27, r0
    448e:	a1 1d       	adc	r26, r1
    4490:	62 1f       	adc	r22, r18
    4492:	73 9f       	mul	r23, r19
    4494:	b0 0d       	add	r27, r0
    4496:	a1 1d       	adc	r26, r1
    4498:	62 1f       	adc	r22, r18
    449a:	83 9f       	mul	r24, r19
    449c:	a0 0d       	add	r26, r0
    449e:	61 1d       	adc	r22, r1
    44a0:	22 1f       	adc	r18, r18
    44a2:	74 9f       	mul	r23, r20
    44a4:	33 27       	eor	r19, r19
    44a6:	a0 0d       	add	r26, r0
    44a8:	61 1d       	adc	r22, r1
    44aa:	23 1f       	adc	r18, r19
    44ac:	84 9f       	mul	r24, r20
    44ae:	60 0d       	add	r22, r0
    44b0:	21 1d       	adc	r18, r1
    44b2:	82 2f       	mov	r24, r18
    44b4:	76 2f       	mov	r23, r22
    44b6:	6a 2f       	mov	r22, r26
    44b8:	11 24       	eor	r1, r1
    44ba:	9f 57       	subi	r25, 0x7F	; 127
    44bc:	50 40       	sbci	r21, 0x00	; 0
    44be:	8a f0       	brmi	.+34     	; 0x44e2 <__mulsf3_pse+0x84>
    44c0:	e1 f0       	breq	.+56     	; 0x44fa <__mulsf3_pse+0x9c>
    44c2:	88 23       	and	r24, r24
    44c4:	4a f0       	brmi	.+18     	; 0x44d8 <__mulsf3_pse+0x7a>
    44c6:	ee 0f       	add	r30, r30
    44c8:	ff 1f       	adc	r31, r31
    44ca:	bb 1f       	adc	r27, r27
    44cc:	66 1f       	adc	r22, r22
    44ce:	77 1f       	adc	r23, r23
    44d0:	88 1f       	adc	r24, r24
    44d2:	91 50       	subi	r25, 0x01	; 1
    44d4:	50 40       	sbci	r21, 0x00	; 0
    44d6:	a9 f7       	brne	.-22     	; 0x44c2 <__mulsf3_pse+0x64>
    44d8:	9e 3f       	cpi	r25, 0xFE	; 254
    44da:	51 05       	cpc	r21, r1
    44dc:	70 f0       	brcs	.+28     	; 0x44fa <__mulsf3_pse+0x9c>
    44de:	14 c0       	rjmp	.+40     	; 0x4508 <__fp_inf>
    44e0:	aa cf       	rjmp	.-172    	; 0x4436 <__fp_szero>
    44e2:	5f 3f       	cpi	r21, 0xFF	; 255
    44e4:	ec f3       	brlt	.-6      	; 0x44e0 <__mulsf3_pse+0x82>
    44e6:	98 3e       	cpi	r25, 0xE8	; 232
    44e8:	dc f3       	brlt	.-10     	; 0x44e0 <__mulsf3_pse+0x82>
    44ea:	86 95       	lsr	r24
    44ec:	77 95       	ror	r23
    44ee:	67 95       	ror	r22
    44f0:	b7 95       	ror	r27
    44f2:	f7 95       	ror	r31
    44f4:	e7 95       	ror	r30
    44f6:	9f 5f       	subi	r25, 0xFF	; 255
    44f8:	c1 f7       	brne	.-16     	; 0x44ea <__mulsf3_pse+0x8c>
    44fa:	fe 2b       	or	r31, r30
    44fc:	88 0f       	add	r24, r24
    44fe:	91 1d       	adc	r25, r1
    4500:	96 95       	lsr	r25
    4502:	87 95       	ror	r24
    4504:	97 f9       	bld	r25, 7
    4506:	08 95       	ret

00004508 <__fp_inf>:
    4508:	97 f9       	bld	r25, 7
    450a:	9f 67       	ori	r25, 0x7F	; 127
    450c:	80 e8       	ldi	r24, 0x80	; 128
    450e:	70 e0       	ldi	r23, 0x00	; 0
    4510:	60 e0       	ldi	r22, 0x00	; 0
    4512:	08 95       	ret

00004514 <__fp_nan>:
    4514:	9f ef       	ldi	r25, 0xFF	; 255
    4516:	80 ec       	ldi	r24, 0xC0	; 192
    4518:	08 95       	ret

0000451a <__fp_pscA>:
    451a:	00 24       	eor	r0, r0
    451c:	0a 94       	dec	r0
    451e:	16 16       	cp	r1, r22
    4520:	17 06       	cpc	r1, r23
    4522:	18 06       	cpc	r1, r24
    4524:	09 06       	cpc	r0, r25
    4526:	08 95       	ret

00004528 <__fp_pscB>:
    4528:	00 24       	eor	r0, r0
    452a:	0a 94       	dec	r0
    452c:	12 16       	cp	r1, r18
    452e:	13 06       	cpc	r1, r19
    4530:	14 06       	cpc	r1, r20
    4532:	05 06       	cpc	r0, r21
    4534:	08 95       	ret

00004536 <__fp_round>:
    4536:	09 2e       	mov	r0, r25
    4538:	03 94       	inc	r0
    453a:	00 0c       	add	r0, r0
    453c:	11 f4       	brne	.+4      	; 0x4542 <__fp_round+0xc>
    453e:	88 23       	and	r24, r24
    4540:	52 f0       	brmi	.+20     	; 0x4556 <__fp_round+0x20>
    4542:	bb 0f       	add	r27, r27
    4544:	40 f4       	brcc	.+16     	; 0x4556 <__fp_round+0x20>
    4546:	bf 2b       	or	r27, r31
    4548:	11 f4       	brne	.+4      	; 0x454e <__fp_round+0x18>
    454a:	60 ff       	sbrs	r22, 0
    454c:	04 c0       	rjmp	.+8      	; 0x4556 <__fp_round+0x20>
    454e:	6f 5f       	subi	r22, 0xFF	; 255
    4550:	7f 4f       	sbci	r23, 0xFF	; 255
    4552:	8f 4f       	sbci	r24, 0xFF	; 255
    4554:	9f 4f       	sbci	r25, 0xFF	; 255
    4556:	08 95       	ret

00004558 <__udivmodhi4>:
    4558:	aa 1b       	sub	r26, r26
    455a:	bb 1b       	sub	r27, r27
    455c:	51 e1       	ldi	r21, 0x11	; 17
    455e:	07 c0       	rjmp	.+14     	; 0x456e <__udivmodhi4_ep>

00004560 <__udivmodhi4_loop>:
    4560:	aa 1f       	adc	r26, r26
    4562:	bb 1f       	adc	r27, r27
    4564:	a6 17       	cp	r26, r22
    4566:	b7 07       	cpc	r27, r23
    4568:	10 f0       	brcs	.+4      	; 0x456e <__udivmodhi4_ep>
    456a:	a6 1b       	sub	r26, r22
    456c:	b7 0b       	sbc	r27, r23

0000456e <__udivmodhi4_ep>:
    456e:	88 1f       	adc	r24, r24
    4570:	99 1f       	adc	r25, r25
    4572:	5a 95       	dec	r21
    4574:	a9 f7       	brne	.-22     	; 0x4560 <__udivmodhi4_loop>
    4576:	80 95       	com	r24
    4578:	90 95       	com	r25
    457a:	bc 01       	movw	r22, r24
    457c:	cd 01       	movw	r24, r26
    457e:	08 95       	ret

00004580 <__divmodhi4>:
    4580:	97 fb       	bst	r25, 7
    4582:	09 2e       	mov	r0, r25
    4584:	07 26       	eor	r0, r23
    4586:	0a d0       	rcall	.+20     	; 0x459c <__divmodhi4_neg1>
    4588:	77 fd       	sbrc	r23, 7
    458a:	04 d0       	rcall	.+8      	; 0x4594 <__divmodhi4_neg2>
    458c:	e5 df       	rcall	.-54     	; 0x4558 <__udivmodhi4>
    458e:	06 d0       	rcall	.+12     	; 0x459c <__divmodhi4_neg1>
    4590:	00 20       	and	r0, r0
    4592:	1a f4       	brpl	.+6      	; 0x459a <__divmodhi4_exit>

00004594 <__divmodhi4_neg2>:
    4594:	70 95       	com	r23
    4596:	61 95       	neg	r22
    4598:	7f 4f       	sbci	r23, 0xFF	; 255

0000459a <__divmodhi4_exit>:
    459a:	08 95       	ret

0000459c <__divmodhi4_neg1>:
    459c:	f6 f7       	brtc	.-4      	; 0x459a <__divmodhi4_exit>
    459e:	90 95       	com	r25
    45a0:	81 95       	neg	r24
    45a2:	9f 4f       	sbci	r25, 0xFF	; 255
    45a4:	08 95       	ret

000045a6 <__eerd_dword_m32u4>:
    45a6:	a6 e1       	ldi	r26, 0x16	; 22
    45a8:	b0 e0       	ldi	r27, 0x00	; 0
    45aa:	44 e0       	ldi	r20, 0x04	; 4
    45ac:	50 e0       	ldi	r21, 0x00	; 0
    45ae:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__eerd_blraw_m32u4>

000045b2 <__eerd_word_m32u4>:
    45b2:	a8 e1       	ldi	r26, 0x18	; 24
    45b4:	b0 e0       	ldi	r27, 0x00	; 0
    45b6:	42 e0       	ldi	r20, 0x02	; 2
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__eerd_blraw_m32u4>

000045be <__eewr_byte_m32u4>:
    45be:	26 2f       	mov	r18, r22

000045c0 <__eewr_r18_m32u4>:
    45c0:	f9 99       	sbic	0x1f, 1	; 31
    45c2:	fe cf       	rjmp	.-4      	; 0x45c0 <__eewr_r18_m32u4>
    45c4:	1f ba       	out	0x1f, r1	; 31
    45c6:	92 bd       	out	0x22, r25	; 34
    45c8:	81 bd       	out	0x21, r24	; 33
    45ca:	20 bd       	out	0x20, r18	; 32
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	fa 9a       	sbi	0x1f, 2	; 31
    45d2:	f9 9a       	sbi	0x1f, 1	; 31
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	01 96       	adiw	r24, 0x01	; 1
    45d8:	08 95       	ret

000045da <__eewr_dword_m32u4>:
    45da:	24 2f       	mov	r18, r20
    45dc:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eewr_r18_m32u4>
    45e0:	25 2f       	mov	r18, r21
    45e2:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eewr_r18_m32u4>
    45e6:	0c 94 f5 22 	jmp	0x45ea	; 0x45ea <__eewr_word_m32u4>

000045ea <__eewr_word_m32u4>:
    45ea:	0e 94 df 22 	call	0x45be	; 0x45be <__eewr_byte_m32u4>
    45ee:	27 2f       	mov	r18, r23
    45f0:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__eewr_r18_m32u4>

000045f4 <__eerd_block_m32u4>:
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22

000045f8 <__eerd_blraw_m32u4>:
    45f8:	fc 01       	movw	r30, r24
    45fa:	f9 99       	sbic	0x1f, 1	; 31
    45fc:	fe cf       	rjmp	.-4      	; 0x45fa <__eerd_blraw_m32u4+0x2>
    45fe:	06 c0       	rjmp	.+12     	; 0x460c <__eerd_blraw_m32u4+0x14>
    4600:	f2 bd       	out	0x22, r31	; 34
    4602:	e1 bd       	out	0x21, r30	; 33
    4604:	f8 9a       	sbi	0x1f, 0	; 31
    4606:	31 96       	adiw	r30, 0x01	; 1
    4608:	00 b4       	in	r0, 0x20	; 32
    460a:	0d 92       	st	X+, r0
    460c:	41 50       	subi	r20, 0x01	; 1
    460e:	50 40       	sbci	r21, 0x00	; 0
    4610:	b8 f7       	brcc	.-18     	; 0x4600 <__eerd_blraw_m32u4+0x8>
    4612:	08 95       	ret

00004614 <_exit>:
    4614:	f8 94       	cli

00004616 <__stop_program>:
    4616:	ff cf       	rjmp	.-2      	; 0x4616 <__stop_program>
